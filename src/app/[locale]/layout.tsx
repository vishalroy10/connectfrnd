'use client';
import '../globals.css';
import { Inter } from 'next/font/google';
import ThemeProvider from '@/common/theme';
import { Providers } from '@/store/provider';
import Header from '@/components/organisms/header';
import { notFound, usePathname } from 'next/navigation';
import { NextIntlClientProvider, useLocale } from 'next-intl';
import useMessage from '@/hooks/useMessage';
import Box from '@/components/atoms/box';
import Audio from '@/components/atoms/audio';
import AuthProvider from '@/utility/AuthProvider';
import ModalContext from '@/utility/ModalContext';

const inter = Inter({ subsets: ['latin'] });

// export const metadata: Metadata = {
//   title: 'Rent Babe',
//   description: 'Generated by create next app',
// };

export default function RootLayout({ children, params }: { children: React.ReactNode; params: any }) {
  const locale = useLocale();
  if (params.locale !== locale) {
    notFound();
  }

  const pathName = usePathname();

  if (!pathName) {
    return false;
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const messages = useMessage();

  return (
    <html lang={locale}>
      <body className={inter.className}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <Providers>
            <AuthProvider pathName={pathName}>
              <ThemeProvider>
                <Audio />
                <ModalContext />
                {!pathName.includes('login') && pathName !== 'profile' && <Header />}
                <Box className={!pathName.includes('login') && !pathName?.includes('profile') ? 'children' : ''}>
                  {children}
                </Box>
              </ThemeProvider>
            </AuthProvider>
          </Providers>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

// String.prototype.toCloudFlareURL = function () {
//   let url = this;
//   if (!url) return '';

//   let get = url.split('/');

//   if (get.length > 2) {
//     if (get[2] === 'images.rentbabe.com') return `${url}`;
//   }

//   let last = get[get.length - 1];
//   let baseURI = process.env.NEXT_PUBLIC_IMAGE_PREFIX;
//   let path = '';
//   const folders = last.split('%2F');
//   for (let index = 0; index < folders.length; index++) {
//     const folder = folders[index];
//     path += `${folder}${index === folders.length - 1 ? '' : '/'}`;
//   }
//   function getURLQueryStringValue(url: string, key: string) {
//     //eslint-disable-next-line no-useless-escape
//     return decodeURIComponent(
//       url.replace(
//         new RegExp('^(?:.*[&\\?]' + encodeURIComponent(key).replace(/[\.\+\*]/g, '\\$&') + '(?:\\=([^&]*))?)?.*$', 'i'),
//         '$1'
//       )
//     );
//   }

//   const rentbh = getURLQueryStringValue(path, 'rentbh');
//   const rentbw = getURLQueryStringValue(path, 'rentbw');
//   const time = getURLQueryStringValue(path, 't');

//   const myPath = path.split('?')[0];
//   const queryWidth = rentbw ? `&rentbw=${rentbw}` : '';
//   const queryHeight = rentbh ? `&rentbh=${rentbh}` : '';
//   const queryTime = time ? `&t=${time}` : '';

//   const finalURL = `${baseURI}${myPath}?${queryHeight}${queryWidth}${queryTime}`; //baseURI + path.split("?")[0] + `?rentbh=${rentbh}&rentbw=${rentbw}` + `${time ? `&t=${time}` : ''}`
//   return finalURL;
// };
