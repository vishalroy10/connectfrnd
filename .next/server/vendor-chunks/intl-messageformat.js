"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/intl-messageformat";
exports.ids = ["vendor-chunks/intl-messageformat"];
exports.modules = {

/***/ "(ssr)/./node_modules/intl-messageformat/lib/src/core.js":
/*!*********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/core.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n  return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n}\nfunction createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n  return {\n    getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.number),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.dateTime),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.pluralRules),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    })\n  };\n}\nvar IntlMessageFormat = /** @class */function () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n    var _this = this;\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n    this.format = function (values) {\n      var parts = _this.formatToParts(values);\n      // Hot path for straight simple msg translations\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n        return all;\n      }, []);\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n      return result;\n    };\n    this.formatToParts = function (values) {\n      return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n    this.resolvedOptions = function () {\n      var _a;\n      return {\n        locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n    this.getAst = function () {\n      return _this.ast;\n    };\n    // Defined first because it's used to build the format pattern.\n    this.locales = locales;\n    this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n    if (typeof message === 'string') {\n      this.message = message;\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      }\n      var _a = opts || {},\n        formatters = _a.formatters,\n        parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\"formatters\"]);\n      // Parse string messages into an AST.\n      this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n        locale: this.resolvedLocale\n      }));\n    } else {\n      this.ast = message;\n    }\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    }\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function () {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n  IntlMessageFormat.resolveLocale = function (locales) {\n    if (typeof Intl.Locale === 'undefined') {\n      return;\n    }\n    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n    if (supportedLocales.length > 0) {\n      return new Intl.Locale(supportedLocales[0]);\n    }\n    return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);\n  };\n  IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n  // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n  IntlMessageFormat.formats = {\n    number: {\n      integer: {\n        maximumFractionDigits: 0\n      },\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intl-messageformat/lib/src/error.js":
/*!**********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/error.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function (ErrorCode) {\n  // When we have a placeholder but no value to format\n  ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n  // When value supplied is invalid\n  ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n  // When we need specific Intl API but it's not available\n  ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n  function FormatError(msg, code, originalMessage) {\n    var _this = _super.call(this, msg) || this;\n    _this.code = code;\n    _this.originalMessage = originalMessage;\n    return _this;\n  }\n  FormatError.prototype.toString = function () {\n    return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n  };\n  return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n  function InvalidValueError(variableId, value, options, originalMessage) {\n    return _super.call(this, \"Invalid values for \\\"\".concat(variableId, \"\\\": \\\"\").concat(value, \"\\\". Options are \\\"\").concat(Object.keys(options).join('\", \"'), \"\\\"\"), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n  function InvalidValueTypeError(value, type, originalMessage) {\n    return _super.call(this, \"Value for \\\"\".concat(value, \"\\\" must be of type \").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n  function MissingValueError(variableId, originalMessage) {\n    return _super.call(this, \"The intl string context variable \\\"\".concat(variableId, \"\\\" was not provided to the string \\\"\").concat(originalMessage, \"\\\"\"), ErrorCode.MISSING_VALUE, originalMessage) || this;\n  }\n  return MissingValueError;\n}(FormatError);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQzNCLElBQUlDLFNBQVM7QUFDcEIsQ0FBQyxVQUFVQSxTQUFTLEVBQUU7RUFDbEI7RUFDQUEsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLGVBQWU7RUFDNUM7RUFDQUEsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLGVBQWU7RUFDNUM7RUFDQUEsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsa0JBQWtCO0FBQ3RELENBQUMsRUFBRUEsU0FBUyxLQUFLQSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxJQUFJQyxXQUFXLEdBQUcsYUFBZSxVQUFVQyxNQUFNLEVBQUU7RUFDL0NILGdEQUFTLENBQUNFLFdBQVcsRUFBRUMsTUFBTSxDQUFDO0VBQzlCLFNBQVNELFdBQVdBLENBQUNFLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUU7SUFDN0MsSUFBSUMsS0FBSyxHQUFHSixNQUFNLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVKLEdBQUcsQ0FBQyxJQUFJLElBQUk7SUFDMUNHLEtBQUssQ0FBQ0YsSUFBSSxHQUFHQSxJQUFJO0lBQ2pCRSxLQUFLLENBQUNELGVBQWUsR0FBR0EsZUFBZTtJQUN2QyxPQUFPQyxLQUFLO0VBQ2hCO0VBQ0FMLFdBQVcsQ0FBQ08sU0FBUyxDQUFDQyxRQUFRLEdBQUcsWUFBWTtJQUN6QyxPQUFPLG1CQUFtQixDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUNNLE1BQU0sQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQztFQUMzRSxDQUFDO0VBQ0QsT0FBT1YsV0FBVztBQUN0QixDQUFDLENBQUNXLEtBQUssQ0FBRTtBQUNjO0FBQ3ZCLElBQUlDLGlCQUFpQixHQUFHLGFBQWUsVUFBVVgsTUFBTSxFQUFFO0VBQ3JESCxnREFBUyxDQUFDYyxpQkFBaUIsRUFBRVgsTUFBTSxDQUFDO0VBQ3BDLFNBQVNXLGlCQUFpQkEsQ0FBQ0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRVgsZUFBZSxFQUFFO0lBQ3BFLE9BQU9ILE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQ0csTUFBTSxDQUFDSSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUNKLE1BQU0sQ0FBQ0ssS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUNMLE1BQU0sQ0FBQ08sTUFBTSxDQUFDQyxJQUFJLENBQUNGLE9BQU8sQ0FBQyxDQUFDRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUVuQixTQUFTLENBQUNvQixhQUFhLEVBQUVmLGVBQWUsQ0FBQyxJQUFJLElBQUk7RUFDeE47RUFDQSxPQUFPUSxpQkFBaUI7QUFDNUIsQ0FBQyxDQUFDWixXQUFXLENBQUU7QUFDYztBQUM3QixJQUFJb0IscUJBQXFCLEdBQUcsYUFBZSxVQUFVbkIsTUFBTSxFQUFFO0VBQ3pESCxnREFBUyxDQUFDc0IscUJBQXFCLEVBQUVuQixNQUFNLENBQUM7RUFDeEMsU0FBU21CLHFCQUFxQkEsQ0FBQ04sS0FBSyxFQUFFTyxJQUFJLEVBQUVqQixlQUFlLEVBQUU7SUFDekQsT0FBT0gsTUFBTSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQ0csTUFBTSxDQUFDSyxLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FBQ0wsTUFBTSxDQUFDWSxJQUFJLENBQUMsRUFBRXRCLFNBQVMsQ0FBQ29CLGFBQWEsRUFBRWYsZUFBZSxDQUFDLElBQUksSUFBSTtFQUNoSjtFQUNBLE9BQU9nQixxQkFBcUI7QUFDaEMsQ0FBQyxDQUFDcEIsV0FBVyxDQUFFO0FBQ2tCO0FBQ2pDLElBQUlzQixpQkFBaUIsR0FBRyxhQUFlLFVBQVVyQixNQUFNLEVBQUU7RUFDckRILGdEQUFTLENBQUN3QixpQkFBaUIsRUFBRXJCLE1BQU0sQ0FBQztFQUNwQyxTQUFTcUIsaUJBQWlCQSxDQUFDVCxVQUFVLEVBQUVULGVBQWUsRUFBRTtJQUNwRCxPQUFPSCxNQUFNLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUUscUNBQXFDLENBQUNHLE1BQU0sQ0FBQ0ksVUFBVSxFQUFFLHNDQUFzQyxDQUFDLENBQUNKLE1BQU0sQ0FBQ0wsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFTCxTQUFTLENBQUN3QixhQUFhLEVBQUVuQixlQUFlLENBQUMsSUFBSSxJQUFJO0VBQzlNO0VBQ0EsT0FBT2tCLGlCQUFpQjtBQUM1QixDQUFDLENBQUN0QixXQUFXLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvc3JjL2Vycm9yLmpzPzQyNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgLy8gV2hlbiB3ZSBoYXZlIGEgcGxhY2Vob2xkZXIgYnV0IG5vIHZhbHVlIHRvIGZvcm1hdFxuICAgIEVycm9yQ29kZVtcIk1JU1NJTkdfVkFMVUVcIl0gPSBcIk1JU1NJTkdfVkFMVUVcIjtcbiAgICAvLyBXaGVuIHZhbHVlIHN1cHBsaWVkIGlzIGludmFsaWRcbiAgICBFcnJvckNvZGVbXCJJTlZBTElEX1ZBTFVFXCJdID0gXCJJTlZBTElEX1ZBTFVFXCI7XG4gICAgLy8gV2hlbiB3ZSBuZWVkIHNwZWNpZmljIEludGwgQVBJIGJ1dCBpdCdzIG5vdCBhdmFpbGFibGVcbiAgICBFcnJvckNvZGVbXCJNSVNTSU5HX0lOVExfQVBJXCJdID0gXCJNSVNTSU5HX0lOVExfQVBJXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG52YXIgRm9ybWF0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcm1hdEVycm9yKG1zZywgY29kZSwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIF90aGlzLm9yaWdpbmFsTWVzc2FnZSA9IG9yaWdpbmFsTWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGb3JtYXRFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIltmb3JtYXRqcyBFcnJvcjogXCIuY29uY2F0KHRoaXMuY29kZSwgXCJdIFwiKS5jb25jYXQodGhpcy5tZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEZvcm1hdEVycm9yIH07XG52YXIgSW52YWxpZFZhbHVlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRWYWx1ZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRWYWx1ZUVycm9yKHZhcmlhYmxlSWQsIHZhbHVlLCBvcHRpb25zLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiSW52YWxpZCB2YWx1ZXMgZm9yIFxcXCJcIi5jb25jYXQodmFyaWFibGVJZCwgXCJcXFwiOiBcXFwiXCIpLmNvbmNhdCh2YWx1ZSwgXCJcXFwiLiBPcHRpb25zIGFyZSBcXFwiXCIpLmNvbmNhdChPYmplY3Qua2V5cyhvcHRpb25zKS5qb2luKCdcIiwgXCInKSwgXCJcXFwiXCIpLCBFcnJvckNvZGUuSU5WQUxJRF9WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFZhbHVlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBJbnZhbGlkVmFsdWVFcnJvciB9O1xudmFyIEludmFsaWRWYWx1ZVR5cGVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFZhbHVlVHlwZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRWYWx1ZVR5cGVFcnJvcih2YWx1ZSwgdHlwZSwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIlZhbHVlIGZvciBcXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCIgbXVzdCBiZSBvZiB0eXBlIFwiKS5jb25jYXQodHlwZSksIEVycm9yQ29kZS5JTlZBTElEX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkVmFsdWVUeXBlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBJbnZhbGlkVmFsdWVUeXBlRXJyb3IgfTtcbnZhciBNaXNzaW5nVmFsdWVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ1ZhbHVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWlzc2luZ1ZhbHVlRXJyb3IodmFyaWFibGVJZCwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIlRoZSBpbnRsIHN0cmluZyBjb250ZXh0IHZhcmlhYmxlIFxcXCJcIi5jb25jYXQodmFyaWFibGVJZCwgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQgdG8gdGhlIHN0cmluZyBcXFwiXCIpLmNvbmNhdChvcmlnaW5hbE1lc3NhZ2UsIFwiXFxcIlwiKSwgRXJyb3JDb2RlLk1JU1NJTkdfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdWYWx1ZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ1ZhbHVlRXJyb3IgfTtcbiJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJFcnJvckNvZGUiLCJGb3JtYXRFcnJvciIsIl9zdXBlciIsIm1zZyIsImNvZGUiLCJvcmlnaW5hbE1lc3NhZ2UiLCJfdGhpcyIsImNhbGwiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNvbmNhdCIsIm1lc3NhZ2UiLCJFcnJvciIsIkludmFsaWRWYWx1ZUVycm9yIiwidmFyaWFibGVJZCIsInZhbHVlIiwib3B0aW9ucyIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiSU5WQUxJRF9WQUxVRSIsIkludmFsaWRWYWx1ZVR5cGVFcnJvciIsInR5cGUiLCJNaXNzaW5nVmFsdWVFcnJvciIsIk1JU1NJTkdfVkFMVUUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js":
/*!***************************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/formatters.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function (PART_TYPE) {\n  PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n  PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n  if (parts.length < 2) {\n    return parts;\n  }\n  return parts.reduce(function (all, part) {\n    var lastPart = all[all.length - 1];\n    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n      all.push(part);\n    } else {\n      lastPart.value += part.value;\n    }\n    return all;\n  }, []);\n}\nfunction isFormatXMLElementFn(el) {\n  return typeof el === 'function';\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue,\n// For debugging\noriginalMessage) {\n  // Hot path for straight simple msg translations\n  if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n    return [{\n      type: PART_TYPE.literal,\n      value: els[0].value\n    }];\n  }\n  var result = [];\n  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n    var el = els_1[_i];\n    // Exit early for string parts.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n      result.push({\n        type: PART_TYPE.literal,\n        value: el.value\n      });\n      continue;\n    }\n    // TODO: should this part be literal type?\n    // Replace `#` in plural rules with the actual numeric value.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n      if (typeof currentPluralValue === 'number') {\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getNumberFormat(locales).format(currentPluralValue)\n        });\n      }\n      continue;\n    }\n    var varName = el.value;\n    // Enforce that all required values are provided by the caller.\n    if (!(values && varName in values)) {\n      throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n    }\n    var value = values[varName];\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n      if (!value || typeof value === 'string' || typeof value === 'number') {\n        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';\n      }\n      result.push({\n        type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n        value: value\n      });\n      continue;\n    }\n    // Recursively format plural and select parts' option — which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      if (style && style.scale) {\n        value = value * (style.scale || 1);\n      }\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getNumberFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      var children = el.children,\n        value_1 = el.value;\n      var formatFn = values[value_1];\n      if (!isFormatXMLElementFn(formatFn)) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, 'function', originalMessage);\n      }\n      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n      var chunks = formatFn(parts.map(function (p) {\n        return p.value;\n      }));\n      if (!Array.isArray(chunks)) {\n        chunks = [chunks];\n      }\n      result.push.apply(result, chunks.map(function (c) {\n        return {\n          type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n          value: c\n        };\n      }));\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      var opt = el.options[value] || el.options.other;\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n      var opt = el.options[\"=\".concat(value)];\n      if (!opt) {\n        if (!Intl.PluralRules) {\n          throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n        }\n        var rule = formatters.getPluralRules(locales, {\n          type: el.pluralType\n        }).select(value - (el.offset || 0));\n        opt = el.options[rule] || el.options.other;\n      }\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n      continue;\n    }\n  }\n  return mergeLiteral(result);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZm9ybWF0dGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErTztBQUNoSTtBQUN4RyxJQUFJZ0IsU0FBUztBQUNwQixDQUFDLFVBQVVBLFNBQVMsRUFBRTtFQUNsQkEsU0FBUyxDQUFDQSxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsU0FBUztFQUMvQ0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUTtBQUNqRCxDQUFDLEVBQUVBLFNBQVMsS0FBS0EsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsU0FBU0MsWUFBWUEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3pCLElBQUlBLEtBQUssQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUNsQixPQUFPRCxLQUFLO0VBQ2hCO0VBQ0EsT0FBT0EsS0FBSyxDQUFDRSxNQUFNLENBQUMsVUFBVUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7SUFDckMsSUFBSUMsUUFBUSxHQUFHRixHQUFHLENBQUNBLEdBQUcsQ0FBQ0YsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQyxJQUFJLENBQUNJLFFBQVEsSUFDVEEsUUFBUSxDQUFDQyxJQUFJLEtBQUtSLFNBQVMsQ0FBQ1MsT0FBTyxJQUNuQ0gsSUFBSSxDQUFDRSxJQUFJLEtBQUtSLFNBQVMsQ0FBQ1MsT0FBTyxFQUFFO01BQ2pDSixHQUFHLENBQUNLLElBQUksQ0FBQ0osSUFBSSxDQUFDO0lBQ2xCLENBQUMsTUFDSTtNQUNEQyxRQUFRLENBQUNJLEtBQUssSUFBSUwsSUFBSSxDQUFDSyxLQUFLO0lBQ2hDO0lBQ0EsT0FBT04sR0FBRztFQUNkLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDVjtBQUNPLFNBQVNPLG9CQUFvQkEsQ0FBQ0MsRUFBRSxFQUFFO0VBQ3JDLE9BQU8sT0FBT0EsRUFBRSxLQUFLLFVB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Q0FBQzNDLE9BQU8sRUFBRTtVQUFFUixJQUFJLEVBQUVLLEVBQUUsQ0FBQytDO1FBQVcsQ0FBQyxDQUFDLENBQ2hEQyxNQUFNLENBQUNsRCxLQUFLLElBQUlFLEVBQUUsQ0FBQ2lELE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQ2IsR0FBRyxHQUFHcEMsRUFBRSxDQUFDcUMsT0FBTyxDQUFDUSxJQUFJLENBQUMsSUFBSTdDLEVBQUUsQ0FBQ3FDLE9BQU8sQ0FBQ0MsS0FBSztNQUM5QztNQUNBLElBQUksQ0FBQ0YsR0FBRyxFQUFFO1FBQ04sTUFBTSxJQUFJcEQscURBQWlCLENBQUNnQixFQUFFLENBQUNGLEtBQUssRUFBRUEsS0FBSyxFQUFFeUMsTUFBTSxDQUFDQyxJQUFJLENBQUN4QyxFQUFFLENBQUNxQyxPQUFPLENBQUMsRUFBRTdCLGVBQWUsQ0FBQztNQUMxRjtNQUNBQyxNQUFNLENBQUNaLElBQUksQ0FBQ3FDLEtBQUssQ0FBQ3pCLE1BQU0sRUFBRVIsYUFBYSxDQUFDbUMsR0FBRyxDQUFDdEMsS0FBSyxFQUFFSyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVSLEtBQUssSUFBSUUsRUFBRSxDQUFDaUQsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDbkg7SUFDSjtFQUNKO0VBQ0EsT0FBTzdELFlBQVksQ0FBQ3FCLE1BQU0sQ0FBQztBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRiYWJlLW5leHRqcy1taWdyYXRpb24vLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZm9ybWF0dGVycy5qcz9kMjRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJndW1lbnRFbGVtZW50LCBpc0RhdGVFbGVtZW50LCBpc0RhdGVUaW1lU2tlbGV0b24sIGlzTGl0ZXJhbEVsZW1lbnQsIGlzTnVtYmVyRWxlbWVudCwgaXNOdW1iZXJTa2VsZXRvbiwgaXNQbHVyYWxFbGVtZW50LCBpc1BvdW5kRWxlbWVudCwgaXNTZWxlY3RFbGVtZW50LCBpc1RhZ0VsZW1lbnQsIGlzVGltZUVsZW1lbnQsIH0gZnJvbSAnQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlcic7XG5pbXBvcnQgeyBFcnJvckNvZGUsIEZvcm1hdEVycm9yLCBJbnZhbGlkVmFsdWVFcnJvciwgSW52YWxpZFZhbHVlVHlwZUVycm9yLCBNaXNzaW5nVmFsdWVFcnJvciwgfSBmcm9tICcuL2Vycm9yJztcbmV4cG9ydCB2YXIgUEFSVF9UWVBFO1xuKGZ1bmN0aW9uIChQQVJUX1RZUEUpIHtcbiAgICBQQVJUX1RZUEVbUEFSVF9UWVBFW1wibGl0ZXJhbFwiXSA9IDBdID0gXCJsaXRlcmFsXCI7XG4gICAgUEFSVF9UWVBFW1BBUlRfVFlQRVtcIm9iamVjdFwiXSA9IDFdID0gXCJvYmplY3RcIjtcbn0pKFBBUlRfVFlQRSB8fCAoUEFSVF9UWVBFID0ge30pKTtcbmZ1bmN0aW9uIG1lcmdlTGl0ZXJhbChwYXJ0cykge1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBwYXJ0cztcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBwYXJ0KSB7XG4gICAgICAgIHZhciBsYXN0UGFydCA9IGFsbFthbGwubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICghbGFzdFBhcnQgfHxcbiAgICAgICAgICAgIGxhc3RQYXJ0LnR5cGUgIT09IFBBUlRfVFlQRS5saXRlcmFsIHx8XG4gICAgICAgICAgICBwYXJ0LnR5cGUgIT09IFBBUlRfVFlQRS5saXRlcmFsKSB7XG4gICAgICAgICAgICBhbGwucHVzaChwYXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RQYXJ0LnZhbHVlICs9IHBhcnQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCBbXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtYXRYTUxFbGVtZW50Rm4oZWwpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVsID09PSAnZnVuY3Rpb24nO1xufVxuLy8gVE9ETyhza2VsZXRvbik6IGFkZCBza2VsZXRvbiBzdXBwb3J0XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VG9QYXJ0cyhlbHMsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgY3VycmVudFBsdXJhbFZhbHVlLCBcbi8vIEZvciBkZWJ1Z2dpbmdcbm9yaWdpbmFsTWVzc2FnZSkge1xuICAgIC8vIEhvdCBwYXRoIGZvciBzdHJhaWdodCBzaW1wbGUgbXNnIHRyYW5zbGF0aW9uc1xuICAgIGlmIChlbHMubGVuZ3RoID09PSAxICYmIGlzTGl0ZXJhbEVsZW1lbnQoZWxzWzBdKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFBBUlRfVFlQRS5saXRlcmFsLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBlbHNbMF0udmFsdWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBlbHNfMSA9IGVsczsgX2kgPCBlbHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVsID0gZWxzXzFbX2ldO1xuICAgICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmcgcGFydHMuXG4gICAgICAgIGlmIChpc0xpdGVyYWxFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IFBBUlRfVFlQRS5saXRlcmFsLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBlbC52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgcGFydCBiZSBsaXRlcmFsIHR5cGU/XG4gICAgICAgIC8vIFJlcGxhY2UgYCNgIGluIHBsdXJhbCBydWxlcyB3aXRoIHRoZSBhY3R1YWwgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgaWYgKGlzUG91bmRFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50UGx1cmFsVmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBQQVJUX1RZUEUubGl0ZXJhbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcnMuZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZXMpLmZvcm1hdChjdXJyZW50UGx1cmFsVmFsdWUpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhck5hbWUgPSBlbC52YWx1ZTtcbiAgICAgICAgLy8gRW5mb3JjZSB0aGF0IGFsbCByZXF1aXJlZCB2YWx1ZXMgYXJlIHByb3ZpZGVkIGJ5IHRoZSBjYWxsZXIuXG4gICAgICAgIGlmICghKHZhbHVlcyAmJiB2YXJOYW1lIGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nVmFsdWVFcnJvcih2YXJOYW1lLCBvcmlnaW5hbE1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1t2YXJOYW1lXTtcbiAgICAgICAgaWYgKGlzQXJndW1lbnRFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBTdHJpbmcodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBQQVJUX1RZUEUubGl0ZXJhbCA6IFBBUlRfVFlQRS5vYmplY3QsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBmb3JtYXQgcGx1cmFsIGFuZCBzZWxlY3QgcGFydHMnIG9wdGlvbiDigJQgd2hpY2ggY2FuIGJlIGFcbiAgICAgICAgLy8gbmVzdGVkIHBhdHRlcm4gc3RydWN0dXJlLiBUaGUgY2hvb3Npbmcgb2YgdGhlIG9wdGlvbiB0byB1c2UgaXNcbiAgICAgICAgLy8gYWJzdHJhY3RlZC1ieSBhbmQgZGVsZWdhdGVkLXRvIHRoZSBwYXJ0IGhlbHBlciBvYmplY3QuXG4gICAgICAgIGlmIChpc0RhdGVFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gdHlwZW9mIGVsLnN0eWxlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gZm9ybWF0cy5kYXRlW2VsLnN0eWxlXVxuICAgICAgICAgICAgICAgIDogaXNEYXRlVGltZVNrZWxldG9uKGVsLnN0eWxlKVxuICAgICAgICAgICAgICAgICAgICA/IGVsLnN0eWxlLnBhcnNlZE9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogUEFSVF9UWVBFLmxpdGVyYWwsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICAgICAgLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZXMsIHN0eWxlKVxuICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KHZhbHVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVGltZUVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0eXBlb2YgZWwuc3R5bGUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBmb3JtYXRzLnRpbWVbZWwuc3R5bGVdXG4gICAgICAgICAgICAgICAgOiBpc0RhdGVUaW1lU2tlbGV0b24oZWwuc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgID8gZWwuc3R5bGUucGFyc2VkT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICA6IGZvcm1hdHMudGltZS5tZWRpdW07XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogUEFSVF9UWVBFLmxpdGVyYWwsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICAgICAgLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZXMsIHN0eWxlKVxuICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KHZhbHVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHR5cGVvZiBlbC5zdHlsZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IGZvcm1hdHMubnVtYmVyW2VsLnN0eWxlXVxuICAgICAgICAgICAgICAgIDogaXNOdW1iZXJTa2VsZXRvbihlbC5zdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgPyBlbC5zdHlsZS5wYXJzZWRPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHN0eWxlICYmIHN0eWxlLnNjYWxlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoc3R5bGUuc2NhbGUgfHwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogUEFSVF9UWVBFLmxpdGVyYWwsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICAgICAgLmdldE51bWJlckZvcm1hdChsb2NhbGVzLCBzdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgLmZvcm1hdCh2YWx1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RhZ0VsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbiwgdmFsdWVfMSA9IGVsLnZhbHVlO1xuICAgICAgICAgICAgdmFyIGZvcm1hdEZuID0gdmFsdWVzW3ZhbHVlXzFdO1xuICAgICAgICAgICAgaWYgKCFpc0Zvcm1hdFhNTEVsZW1lbnRGbihmb3JtYXRGbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFZhbHVlVHlwZUVycm9yKHZhbHVlXzEsICdmdW5jdGlvbicsIG9yaWdpbmFsTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBmb3JtYXRUb1BhcnRzKGNoaWxkcmVuLCBsb2NhbGVzLCBmb3JtYXR0ZXJzLCBmb3JtYXRzLCB2YWx1ZXMsIGN1cnJlbnRQbHVyYWxWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgY2h1bmtzID0gZm9ybWF0Rm4ocGFydHMubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLnZhbHVlOyB9KSk7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2h1bmtzKSkge1xuICAgICAgICAgICAgICAgIGNodW5rcyA9IFtjaHVua3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBjaHVua3MubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZW9mIGMgPT09ICdzdHJpbmcnID8gUEFSVF9UWVBFLmxpdGVyYWwgOiBQQVJUX1RZUEUub2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1NlbGVjdEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZWwub3B0aW9uc1t2YWx1ZV0gfHwgZWwub3B0aW9ucy5vdGhlcjtcbiAgICAgICAgICAgIGlmICghb3B0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRWYWx1ZUVycm9yKGVsLnZhbHVlLCB2YWx1ZSwgT2JqZWN0LmtleXMoZWwub3B0aW9ucyksIG9yaWdpbmFsTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGZvcm1hdFRvUGFydHMob3B0LnZhbHVlLCBsb2NhbGVzLCBmb3JtYXR0ZXJzLCBmb3JtYXRzLCB2YWx1ZXMpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BsdXJhbEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZWwub3B0aW9uc1tcIj1cIi5jb25jYXQodmFsdWUpXTtcbiAgICAgICAgICAgIGlmICghb3B0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJbnRsLlBsdXJhbFJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihcIkludGwuUGx1cmFsUnVsZXMgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LlxcblRyeSBwb2x5ZmlsbGluZyBpdCB1c2luZyBcXFwiQGZvcm1hdGpzL2ludGwtcGx1cmFscnVsZXNcXFwiXFxuXCIsIEVycm9yQ29kZS5NSVNTSU5HX0lOVExfQVBJLCBvcmlnaW5hbE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICAgICAgLmdldFBsdXJhbFJ1bGVzKGxvY2FsZXMsIHsgdHlwZTogZWwucGx1cmFsVHlwZSB9KVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KHZhbHVlIC0gKGVsLm9mZnNldCB8fCAwKSk7XG4gICAgICAgICAgICAgICAgb3B0ID0gZWwub3B0aW9uc1tydWxlXSB8fCBlbC5vcHRpb25zLm90aGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFZhbHVlRXJyb3IoZWwudmFsdWUsIHZhbHVlLCBPYmplY3Qua2V5cyhlbC5vcHRpb25zKSwgb3JpZ2luYWxNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgZm9ybWF0VG9QYXJ0cyhvcHQudmFsdWUsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgdmFsdWUgLSAoZWwub2Zmc2V0IHx8IDApKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VMaXRlcmFsKHJlc3VsdCk7XG59XG4iXSwibmFtZXMiOlsiaXNBcmd1bWVudEVsZW1lbnQiLCJpc0RhdGVFbGVtZW50IiwiaXNEYXRlVGltZVNrZWxldG9uIiwiaXNMaXRlcmFsRWxlbWVudCIsImlzTnVtYmVyRWxlbWVudCIsImlzTnVtYmVyU2tlbGV0b24iLCJpc1BsdXJhbEVsZW1lbnQiLCJpc1BvdW5kRWxlbWVudCIsImlzU2VsZWN0RWxlbWVudCIsImlzVGFnRWxlbWVudCIsImlzVGltZUVsZW1lbnQiLCJFcnJvckNvZGUiLCJGb3JtYXRFcnJvciIsIkludmFsaWRWYWx1ZUVycm9yIiwiSW52YWxpZFZhbHVlVHlwZUVycm9yIiwiTWlzc2luZ1ZhbHVlRXJyb3IiLCJQQVJUX1RZUEUiLCJtZXJnZUxpdGVyYWwiLCJwYXJ0cyIsImxlbmd0aCIsInJlZHVjZSIsImFsbCIsInBhcnQiLCJsYXN0UGFydCIsInR5cGUiLCJsaXRlcmFsIiwicHVzaCIsInZhbHVlIiwiaXNGb3JtYXRYTUxFbGVtZW50Rm4iLCJlbCIsImZvcm1hdFRvUGFydHMiLCJlbHMiLCJsb2NhbGVzIiwiZm9ybWF0dGVycyIsImZvcm1hdHMiLCJ2YWx1ZXMiLCJjdXJyZW50UGx1cmFsVmFsdWUiLCJvcmlnaW5hbE1lc3NhZ2UiLCJyZXN1bHQiLCJfaSIsImVsc18xIiwiZ2V0TnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwidmFyTmFtZSIsIlN0cmluZyIsIm9iamVjdCIsInN0eWxlIiwiZGF0ZSIsInBhcnNlZE9wdGlvbnMiLCJ1bmRlZmluZWQiLCJnZXREYXRlVGltZUZvcm1hdCIsInRpbWUiLCJtZWRpdW0iLCJudW1iZXIiLCJzY2FsZSIsImNoaWxkcmVuIiwidmFsdWVfMSIsImZvcm1hdEZuIiwiY2h1bmtzIiwibWFwIiwicCIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5IiwiYyIsIm9wdCIsIm9wdGlvbnMiLCJvdGhlciIsIk9iamVjdCIsImtleXMiLCJjb25jYXQiLCJJbnRsIiwiUGx1cmFsUnVsZXMiLCJNSVNTSU5HX0lOVExfQVBJIiwicnVsZSIsImdldFBsdXJhbFJ1bGVzIiwicGx1cmFsVHlwZSIsInNlbGVjdCIsIm9mZnNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/src/core.js":
/*!*********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/core.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n  return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n}\nfunction createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n  return {\n    getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.number),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.dateTime),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.pluralRules),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    })\n  };\n}\nvar IntlMessageFormat = /** @class */function () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n    var _this = this;\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n    this.format = function (values) {\n      var parts = _this.formatToParts(values);\n      // Hot path for straight simple msg translations\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n        return all;\n      }, []);\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n      return result;\n    };\n    this.formatToParts = function (values) {\n      return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n    this.resolvedOptions = function () {\n      var _a;\n      return {\n        locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n    this.getAst = function () {\n      return _this.ast;\n    };\n    // Defined first because it's used to build the format pattern.\n    this.locales = locales;\n    this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n    if (typeof message === 'string') {\n      this.message = message;\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      }\n      var _a = opts || {},\n        formatters = _a.formatters,\n        parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\"formatters\"]);\n      // Parse string messages into an AST.\n      this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n        locale: this.resolvedLocale\n      }));\n    } else {\n      this.ast = message;\n    }\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    }\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function () {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n  IntlMessageFormat.resolveLocale = function (locales) {\n    if (typeof Intl.Locale === 'undefined') {\n      return;\n    }\n    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n    if (supportedLocales.length > 0) {\n      return new Intl.Locale(supportedLocales[0]);\n    }\n    return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);\n  };\n  IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n  // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n  IntlMessageFormat.formats = {\n    number: {\n      integer: {\n        maximumFractionDigits: 0\n      },\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/src/error.js":
/*!**********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/error.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function (ErrorCode) {\n  // When we have a placeholder but no value to format\n  ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n  // When value supplied is invalid\n  ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n  // When we need specific Intl API but it's not available\n  ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n  function FormatError(msg, code, originalMessage) {\n    var _this = _super.call(this, msg) || this;\n    _this.code = code;\n    _this.originalMessage = originalMessage;\n    return _this;\n  }\n  FormatError.prototype.toString = function () {\n    return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n  };\n  return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n  function InvalidValueError(variableId, value, options, originalMessage) {\n    return _super.call(this, \"Invalid values for \\\"\".concat(variableId, \"\\\": \\\"\").concat(value, \"\\\". Options are \\\"\").concat(Object.keys(options).join('\", \"'), \"\\\"\"), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n  function InvalidValueTypeError(value, type, originalMessage) {\n    return _super.call(this, \"Value for \\\"\".concat(value, \"\\\" must be of type \").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n  function MissingValueError(variableId, originalMessage) {\n    return _super.call(this, \"The intl string context variable \\\"\".concat(variableId, \"\\\" was not provided to the string \\\"\").concat(originalMessage, \"\\\"\"), ErrorCode.MISSING_VALUE, originalMessage) || this;\n  }\n  return MissingValueError;\n}(FormatError);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQzNCLElBQUlDLFNBQVM7QUFDcEIsQ0FBQyxVQUFVQSxTQUFTLEVBQUU7RUFDbEI7RUFDQUEsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLGVBQWU7RUFDNUM7RUFDQUEsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLGVBQWU7RUFDNUM7RUFDQUEsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsa0JBQWtCO0FBQ3RELENBQUMsRUFBRUEsU0FBUyxLQUFLQSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxJQUFJQyxXQUFXLEdBQUcsYUFBZSxVQUFVQyxNQUFNLEVBQUU7RUFDL0NILGdEQUFTLENBQUNFLFdBQVcsRUFBRUMsTUFBTSxDQUFDO0VBQzlCLFNBQVNELFdBQVdBLENBQUNFLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUU7SUFDN0MsSUFBSUMsS0FBSyxHQUFHSixNQUFNLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVKLEdBQUcsQ0FBQyxJQUFJLElBQUk7SUFDMUNHLEtBQUssQ0FBQ0YsSUFBSSxHQUFHQSxJQUFJO0lBQ2pCRSxLQUFLLENBQUNELGVBQWUsR0FBR0EsZUFBZTtJQUN2QyxPQUFPQyxLQUFLO0VBQ2hCO0VBQ0FMLFdBQVcsQ0FBQ08sU0FBUyxDQUFDQyxRQUFRLEdBQUcsWUFBWTtJQUN6QyxPQUFPLG1CQUFtQixDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUNNLE1BQU0sQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQztFQUMzRSxDQUFDO0VBQ0QsT0FBT1YsV0FBVztBQUN0QixDQUFDLENBQUNXLEtBQUssQ0FBRTtBQUNjO0FBQ3ZCLElBQUlDLGlCQUFpQixHQUFHLGFBQWUsVUFBVVgsTUFBTSxFQUFFO0VBQ3JESCxnREFBUyxDQUFDYyxpQkFBaUIsRUFBRVgsTUFBTSxDQUFDO0VBQ3BDLFNBQVNXLGlCQUFpQkEsQ0FBQ0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRVgsZUFBZSxFQUFFO0lBQ3BFLE9BQU9ILE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQ0csTUFBTSxDQUFDSSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUNKLE1BQU0sQ0FBQ0ssS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUNMLE1BQU0sQ0FBQ08sTUFBTSxDQUFDQyxJQUFJLENBQUNGLE9BQU8sQ0FBQyxDQUFDRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUVuQixTQUFTLENBQUNvQixhQUFhLEVBQUVmLGVBQWUsQ0FBQyxJQUFJLElBQUk7RUFDeE47RUFDQSxPQUFPUSxpQkFBaUI7QUFDNUIsQ0FBQyxDQUFDWixXQUFXLENBQUU7QUFDYztBQUM3QixJQUFJb0IscUJBQXFCLEdBQUcsYUFBZSxVQUFVbkIsTUFBTSxFQUFFO0VBQ3pESCxnREFBUyxDQUFDc0IscUJBQXFCLEVBQUVuQixNQUFNLENBQUM7RUFDeEMsU0FBU21CLHFCQUFxQkEsQ0FBQ04sS0FBSyxFQUFFTyxJQUFJLEVBQUVqQixlQUFlLEVBQUU7SUFDekQsT0FBT0gsTUFBTSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQ0csTUFBTSxDQUFDSyxLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FBQ0wsTUFBTSxDQUFDWSxJQUFJLENBQUMsRUFBRXRCLFNBQVMsQ0FBQ29CLGFBQWEsRUFBRWYsZUFBZSxDQUFDLElBQUksSUFBSTtFQUNoSjtFQUNBLE9BQU9nQixxQkFBcUI7QUFDaEMsQ0FBQyxDQUFDcEIsV0FBVyxDQUFFO0FBQ2tCO0FBQ2pDLElBQUlzQixpQkFBaUIsR0FBRyxhQUFlLFVBQVVyQixNQUFNLEVBQUU7RUFDckRILGdEQUFTLENBQUN3QixpQkFBaUIsRUFBRXJCLE1BQU0sQ0FBQztFQUNwQyxTQUFTcUIsaUJBQWlCQSxDQUFDVCxVQUFVLEVBQUVULGVBQWUsRUFBRTtJQUNwRCxPQUFPSCxNQUFNLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUUscUNBQXFDLENBQUNHLE1BQU0sQ0FBQ0ksVUFBVSxFQUFFLHNDQUFzQyxDQUFDLENBQUNKLE1BQU0sQ0FBQ0wsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFTCxTQUFTLENBQUN3QixhQUFhLEVBQUVuQixlQUFlLENBQUMsSUFBSSxJQUFJO0VBQzlNO0VBQ0EsT0FBT2tCLGlCQUFpQjtBQUM1QixDQUFDLENBQUN0QixXQUFXLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvc3JjL2Vycm9yLmpzPzQyNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgLy8gV2hlbiB3ZSBoYXZlIGEgcGxhY2Vob2xkZXIgYnV0IG5vIHZhbHVlIHRvIGZvcm1hdFxuICAgIEVycm9yQ29kZVtcIk1JU1NJTkdfVkFMVUVcIl0gPSBcIk1JU1NJTkdfVkFMVUVcIjtcbiAgICAvLyBXaGVuIHZhbHVlIHN1cHBsaWVkIGlzIGludmFsaWRcbiAgICBFcnJvckNvZGVbXCJJTlZBTElEX1ZBTFVFXCJdID0gXCJJTlZBTElEX1ZBTFVFXCI7XG4gICAgLy8gV2hlbiB3ZSBuZWVkIHNwZWNpZmljIEludGwgQVBJIGJ1dCBpdCdzIG5vdCBhdmFpbGFibGVcbiAgICBFcnJvckNvZGVbXCJNSVNTSU5HX0lOVExfQVBJXCJdID0gXCJNSVNTSU5HX0lOVExfQVBJXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG52YXIgRm9ybWF0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcm1hdEVycm9yKG1zZywgY29kZSwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIF90aGlzLm9yaWdpbmFsTWVzc2FnZSA9IG9yaWdpbmFsTWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGb3JtYXRFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIltmb3JtYXRqcyBFcnJvcjogXCIuY29uY2F0KHRoaXMuY29kZSwgXCJdIFwiKS5jb25jYXQodGhpcy5tZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEZvcm1hdEVycm9yIH07XG52YXIgSW52YWxpZFZhbHVlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRWYWx1ZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRWYWx1ZUVycm9yKHZhcmlhYmxlSWQsIHZhbHVlLCBvcHRpb25zLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiSW52YWxpZCB2YWx1ZXMgZm9yIFxcXCJcIi5jb25jYXQodmFyaWFibGVJZCwgXCJcXFwiOiBcXFwiXCIpLmNvbmNhdCh2YWx1ZSwgXCJcXFwiLiBPcHRpb25zIGFyZSBcXFwiXCIpLmNvbmNhdChPYmplY3Qua2V5cyhvcHRpb25zKS5qb2luKCdcIiwgXCInKSwgXCJcXFwiXCIpLCBFcnJvckNvZGUuSU5WQUxJRF9WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFZhbHVlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBJbnZhbGlkVmFsdWVFcnJvciB9O1xudmFyIEludmFsaWRWYWx1ZVR5cGVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFZhbHVlVHlwZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRWYWx1ZVR5cGVFcnJvcih2YWx1ZSwgdHlwZSwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIlZhbHVlIGZvciBcXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCIgbXVzdCBiZSBvZiB0eXBlIFwiKS5jb25jYXQodHlwZSksIEVycm9yQ29kZS5JTlZBTElEX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkVmFsdWVUeXBlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBJbnZhbGlkVmFsdWVUeXBlRXJyb3IgfTtcbnZhciBNaXNzaW5nVmFsdWVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ1ZhbHVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWlzc2luZ1ZhbHVlRXJyb3IodmFyaWFibGVJZCwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIlRoZSBpbnRsIHN0cmluZyBjb250ZXh0IHZhcmlhYmxlIFxcXCJcIi5jb25jYXQodmFyaWFibGVJZCwgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQgdG8gdGhlIHN0cmluZyBcXFwiXCIpLmNvbmNhdChvcmlnaW5hbE1lc3NhZ2UsIFwiXFxcIlwiKSwgRXJyb3JDb2RlLk1JU1NJTkdfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdWYWx1ZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ1ZhbHVlRXJyb3IgfTtcbiJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJFcnJvckNvZGUiLCJGb3JtYXRFcnJvciIsIl9zdXBlciIsIm1zZyIsImNvZGUiLCJvcmlnaW5hbE1lc3NhZ2UiLCJfdGhpcyIsImNhbGwiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNvbmNhdCIsIm1lc3NhZ2UiLCJFcnJvciIsIkludmFsaWRWYWx1ZUVycm9yIiwidmFyaWFibGVJZCIsInZhbHVlIiwib3B0aW9ucyIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiSU5WQUxJRF9WQUxVRSIsIkludmFsaWRWYWx1ZVR5cGVFcnJvciIsInR5cGUiLCJNaXNzaW5nVmFsdWVFcnJvciIsIk1JU1NJTkdfVkFMVUUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js":
/*!***************************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/formatters.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function (PART_TYPE) {\n  PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n  PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n  if (parts.length < 2) {\n    return parts;\n  }\n  return parts.reduce(function (all, part) {\n    var lastPart = all[all.length - 1];\n    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n      all.push(part);\n    } else {\n      lastPart.value += part.value;\n    }\n    return all;\n  }, []);\n}\nfunction isFormatXMLElementFn(el) {\n  return typeof el === 'function';\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue,\n// For debugging\noriginalMessage) {\n  // Hot path for straight simple msg translations\n  if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n    return [{\n      type: PART_TYPE.literal,\n      value: els[0].value\n    }];\n  }\n  var result = [];\n  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n    var el = els_1[_i];\n    // Exit early for string parts.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n      result.push({\n        type: PART_TYPE.literal,\n        value: el.value\n      });\n      continue;\n    }\n    // TODO: should this part be literal type?\n    // Replace `#` in plural rules with the actual numeric value.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n      if (typeof currentPluralValue === 'number') {\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getNumberFormat(locales).format(currentPluralValue)\n        });\n      }\n      continue;\n    }\n    var varName = el.value;\n    // Enforce that all required values are provided by the caller.\n    if (!(values && varName in values)) {\n      throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n    }\n    var value = values[varName];\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n      if (!value || typeof value === 'string' || typeof value === 'number') {\n        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';\n      }\n      result.push({\n        type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n        value: value\n      });\n      continue;\n    }\n    // Recursively format plural and select parts' option — which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      if (style && style.scale) {\n        value = value * (style.scale || 1);\n      }\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getNumberFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      var children = el.children,\n        value_1 = el.value;\n      var formatFn = values[value_1];\n      if (!isFormatXMLElementFn(formatFn)) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, 'function', originalMessage);\n      }\n      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n      var chunks = formatFn(parts.map(function (p) {\n        return p.value;\n      }));\n      if (!Array.isArray(chunks)) {\n        chunks = [chunks];\n      }\n      result.push.apply(result, chunks.map(function (c) {\n        return {\n          type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n          value: c\n        };\n      }));\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      var opt = el.options[value] || el.options.other;\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n      var opt = el.options[\"=\".concat(value)];\n      if (!opt) {\n        if (!Intl.PluralRules) {\n          throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n        }\n        var rule = formatters.getPluralRules(locales, {\n          type: el.pluralType\n        }).select(value - (el.offset || 0));\n        opt = el.options[rule] || el.options.other;\n      }\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n      continue;\n    }\n  }\n  return mergeLiteral(result);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ })

};
;