"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancerArray: () => (/* binding */ EnhancerArray),\n/* harmony export */   MiddlewareArray: () => (/* binding */ MiddlewareArray),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   getDefaultMiddleware: () => (/* binding */ getDefaultMiddleware),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   isAction: () => (/* binding */ isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult)\n/* harmony export */ });\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.esm.mjs\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/es/redux.js\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/es/index.js\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/es/index.js\");\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = undefined && undefined.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function (obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function (a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\n    var prop = _c[_i];\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = function (a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __async = function (__this, __arguments, generator) {\n  return new Promise(function (resolve, reject) {\n    var fulfilled = function (value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = function (value) {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = function (x) {\n      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    };\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n// src/index.ts\n\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelector = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var selector = reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector.apply(void 0, args);\n  var wrappedSelector = function (value) {\n    var rest = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n    return selector.apply(void 0, __spreadArray([(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value], rest));\n  };\n  return wrappedSelector;\n};\n// src/configureStore.ts\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function () {\n  if (arguments.length === 0) return void 0;\n  if (typeof arguments[0] === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function () {\n  return function (noop2) {\n    return noop2;\n  };\n};\n// src/isPlainObject.ts\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) return false;\n  var proto = Object.getPrototypeOf(value);\n  if (proto === null) return true;\n  var baseProto = proto;\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n  return proto === baseProto;\n}\n// src/getDefaultMiddleware.ts\n\n// src/tsHelpers.ts\nvar hasMatchFunction = function (v) {\n  return v && typeof v.match === \"function\";\n};\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, args);\n      if (!prepared) {\n        throw new Error(\"prepareAction did not return an object\");\n      }\n      return __spreadValues(__spreadValues({\n        type: type,\n        payload: prepared.payload\n      }, \"meta\" in prepared && {\n        meta: prepared.meta\n      }), \"error\" in prepared && {\n        error: prepared.error\n      });\n    }\n    return {\n      type: type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = function () {\n    return \"\" + type;\n  };\n  actionCreator.type = type;\n  actionCreator.match = function (action) {\n    return action.type === type;\n  };\n  return actionCreator;\n}\nfunction isAction(action) {\n  return isPlainObject(action) && \"type\" in action;\n}\nfunction isActionCreator(action) {\n  return typeof action === \"function\" && \"type\" in action && hasMatchFunction(action);\n}\nfunction isFSA(action) {\n  return isAction(action) && typeof action.type === \"string\" && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\nfunction getType(actionCreator) {\n  return \"\" + actionCreator;\n}\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n  var splitType = type ? (\"\" + type).split(\"/\") : [];\n  var actionName = splitType[splitType.length - 1] || \"actionCreator\";\n  return \"Detected an action creator with type \\\"\" + (type || \"unknown\") + \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\" + actionName + \"())` instead of `dispatch(\" + actionName + \")`. This is necessary even if the action has no payload.\";\n}\nfunction createActionCreatorInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (false) {}\n  var _c = options.isActionCreator,\n    isActionCreator2 = _c === void 0 ? isActionCreator : _c;\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (isActionCreator2(action)) {\n          console.warn(getMessage(action.type));\n        }\n        return next(action);\n      };\n    };\n  };\n}\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function (fn) {\n      var started = Date.now();\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function () {\n      if (elapsed > maxDelay) {\n        console.warn(fnName + \" took \" + elapsed + \"ms, which is more than the warning threshold of \" + maxDelay + \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\");\n      }\n    }\n  };\n}\nvar MiddlewareArray = /** @class */function (_super) {\n  __extends(MiddlewareArray, _super);\n  function MiddlewareArray() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var _this = _super.apply(this, args) || this;\n    Object.setPrototypeOf(_this, MiddlewareArray.prototype);\n    return _this;\n  }\n  Object.defineProperty(MiddlewareArray, Symbol.species, {\n    get: function () {\n      return MiddlewareArray;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MiddlewareArray.prototype.concat = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    return _super.prototype.concat.apply(this, arr);\n  };\n  MiddlewareArray.prototype.prepend = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();\n    }\n    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();\n  };\n  return MiddlewareArray;\n}(Array);\nvar EnhancerArray = /** @class */function (_super) {\n  __extends(EnhancerArray, _super);\n  function EnhancerArray() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var _this = _super.apply(this, args) || this;\n    Object.setPrototypeOf(_this, EnhancerArray.prototype);\n    return _this;\n  }\n  Object.defineProperty(EnhancerArray, Symbol.species, {\n    get: function () {\n      return EnhancerArray;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EnhancerArray.prototype.concat = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    return _super.prototype.concat.apply(this, arr);\n  };\n  EnhancerArray.prototype.prepend = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr[0].concat(this))))();\n    }\n    return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr.concat(this))))();\n  };\n  return EnhancerArray;\n}(Array);\nfunction freezeDraftable(val) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(val, function () {}) : val;\n}\n// src/immutableStateInvariantMiddleware.ts\nvar isProduction = false;\nvar prefix = \"Invariant failed\";\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (isProduction) {\n    throw new Error(prefix);\n  }\n  throw new Error(prefix + \": \" + (message || \"\"));\n}\nfunction stringify(obj, serializer, indent, decycler) {\n  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n}\nfunction getSerialize(serializer, decycler) {\n  var stack = [],\n    keys = [];\n  if (!decycler) decycler = function (_, value) {\n    if (stack[0] === value) return \"[Circular ~]\";\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n  };\n  return function (key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n    } else stack.push(value);\n    return serializer == null ? value : serializer.call(this, key, value);\n  };\n}\nfunction isImmutableDefault(value) {\n  return typeof value !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function () {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable, ignorePaths, obj, path, checkedObjects) {\n  if (ignorePaths === void 0) {\n    ignorePaths = [];\n  }\n  if (path === void 0) {\n    path = \"\";\n  }\n  if (checkedObjects === void 0) {\n    checkedObjects = new Set();\n  }\n  var tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (var key in obj) {\n      var childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path) {\n  if (ignoredPaths === void 0) {\n    ignoredPaths = [];\n  }\n  if (sameParentRef === void 0) {\n    sameParentRef = false;\n  }\n  if (path === void 0) {\n    path = \"\";\n  }\n  var prevObj = trackedProperty ? trackedProperty.value : void 0;\n  var sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  var keysToDetect = {};\n  for (var key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (var key in obj) {\n    keysToDetect[key] = true;\n  }\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop_1 = function (key) {\n    var nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths) {\n      var hasMatches = ignoredPaths.some(function (ignored) {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        return \"continue\";\n      }\n    }\n    var result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n    if (result.wasMutated) {\n      return {\n        value: result\n      };\n    }\n  };\n  for (var key in keysToDetect) {\n    var state_1 = _loop_1(key);\n    if (typeof state_1 === \"object\") return state_1.value;\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (false) {}\n  var _c = options.isImmutable,\n    isImmutable = _c === void 0 ? isImmutableDefault : _c,\n    ignoredPaths = options.ignoredPaths,\n    _d = options.warnAfter,\n    warnAfter = _d === void 0 ? 32 : _d,\n    ignore = options.ignore;\n  ignoredPaths = ignoredPaths || ignore;\n  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n  return function (_c) {\n    var getState = _c.getState;\n    var state = getState();\n    var tracker = track(state);\n    var result;\n    return function (next) {\n      return function (action) {\n        var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          invariant(!result.wasMutated, \"A state mutation was detected between dispatches, in the path '\" + (result.path || \"\") + \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\n        });\n        var dispatchedAction = next(action);\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          result.wasMutated && invariant(!result.wasMutated, \"A state mutation was detected inside a dispatch, in the path: \" + (result.path || \"\") + \". Take a look at the reducer(s) handling the action \" + stringify(action) + \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  };\n}\n// src/serializableStateInvariantMiddleware.ts\nfunction isPlain(val) {\n  var type = typeof val;\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\n}\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths, cache) {\n  if (path === void 0) {\n    path = \"\";\n  }\n  if (isSerializable === void 0) {\n    isSerializable = isPlain;\n  }\n  if (ignoredPaths === void 0) {\n    ignoredPaths = [];\n  }\n  var foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value: value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  if (cache == null ? void 0 : cache.has(value)) return false;\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop_2 = function (key, nestedValue) {\n    var nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths) {\n      var hasMatches = ignoredPaths.some(function (ignored) {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        return \"continue\";\n      }\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        value: {\n          keyPath: nestedPath,\n          value: nestedValue\n        }\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n      if (foundNestedSerializable) {\n        return {\n          value: foundNestedSerializable\n        };\n      }\n    }\n  };\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _c = entries_1[_i],\n      key = _c[0],\n      nestedValue = _c[1];\n    var state_2 = _loop_2(key, nestedValue);\n    if (typeof state_2 === \"object\") return state_2.value;\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (var _i = 0, _c = Object.values(value); _i < _c.length; _i++) {\n    var nestedValue = _c[_i];\n    if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (false) {}\n  var _c = options.isSerializable,\n    isSerializable = _c === void 0 ? isPlain : _c,\n    getEntries = options.getEntries,\n    _d = options.ignoredActions,\n    ignoredActions = _d === void 0 ? [] : _d,\n    _e = options.ignoredActionPaths,\n    ignoredActionPaths = _e === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _e,\n    _f = options.ignoredPaths,\n    ignoredPaths = _f === void 0 ? [] : _f,\n    _g = options.warnAfter,\n    warnAfter = _g === void 0 ? 32 : _g,\n    _h = options.ignoreState,\n    ignoreState = _h === void 0 ? false : _h,\n    _j = options.ignoreActions,\n    ignoreActions = _j === void 0 ? false : _j,\n    _k = options.disableCache,\n    disableCache = _k === void 0 ? false : _k;\n  var cache = !disableCache && WeakSet ? new WeakSet() : void 0;\n  return function (storeAPI) {\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n        var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n          measureUtils.measureTime(function () {\n            var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n            if (foundActionNonSerializableValue) {\n              var keyPath = foundActionNonSerializableValue.keyPath,\n                value = foundActionNonSerializableValue.value;\n              console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n            }\n          });\n        }\n        if (!ignoreState) {\n          measureUtils.measureTime(function () {\n            var state = storeAPI.getState();\n            var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n            if (foundStateNonSerializableValue) {\n              var keyPath = foundStateNonSerializableValue.keyPath,\n                value = foundStateNonSerializableValue.value;\n              console.error(\"A non-serializable value was detected in the state, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\n            }\n          });\n          measureUtils.warnIfExceeded();\n        }\n        return result;\n      };\n    };\n  };\n}\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nfunction curryGetDefaultMiddleware() {\n  return function curriedGetDefaultMiddleware(options) {\n    return getDefaultMiddleware(options);\n  };\n}\nfunction getDefaultMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = options.thunk,\n    thunk = _c === void 0 ? true : _c,\n    _d = options.immutableCheck,\n    immutableCheck = _d === void 0 ? true : _d,\n    _e = options.serializableCheck,\n    serializableCheck = _e === void 0 ? true : _e,\n    _f = options.actionCreatorCheck,\n    actionCreatorCheck = _f === void 0 ? true : _f;\n  var middlewareArray = new MiddlewareArray();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n    } else {\n      middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__[\"default\"].withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (true) {\n    if (immutableCheck) {\n      var immutableOptions = {};\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n    }\n    if (serializableCheck) {\n      var serializableOptions = {};\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n    if (actionCreatorCheck) {\n      var actionCreatorOptions = {};\n      if (!isBoolean(actionCreatorCheck)) {\n        actionCreatorOptions = actionCreatorCheck;\n      }\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n    }\n  }\n  return middlewareArray;\n}\n// src/configureStore.ts\nvar IS_PRODUCTION = false;\nfunction configureStore(options) {\n  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();\n  var _c = options || {},\n    _d = _c.reducer,\n    reducer = _d === void 0 ? void 0 : _d,\n    _e = _c.middleware,\n    middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e,\n    _f = _c.devTools,\n    devTools = _f === void 0 ? true : _f,\n    _g = _c.preloadedState,\n    preloadedState = _g === void 0 ? void 0 : _g,\n    _h = _c.enhancers,\n    enhancers = _h === void 0 ? void 0 : _h;\n  var rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n  } else {\n    throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n  }\n  var finalMiddleware = middleware;\n  if (typeof finalMiddleware === \"function\") {\n    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);\n    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n      throw new Error(\"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  }\n  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error(\"each middleware provided to configureStore must be a function\");\n  }\n  var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware.apply(void 0, finalMiddleware);\n  var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  if (devTools) {\n    finalCompose = composeWithDevTools(__spreadValues({\n      trace: !IS_PRODUCTION\n    }, typeof devTools === \"object\" && devTools));\n  }\n  var defaultEnhancers = new EnhancerArray(middlewareEnhancer);\n  var storeEnhancers = defaultEnhancers;\n  if (Array.isArray(enhancers)) {\n    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);\n  } else if (typeof enhancers === \"function\") {\n    storeEnhancers = enhancers(defaultEnhancers);\n  }\n  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n// src/createReducer.ts\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var actionMatchers = [];\n  var defaultCaseReducer;\n  var builder = {\n    addCase: function (typeOrActionCreator, reducer) {\n      if (true) {\n        if (actionMatchers.length > 0) {\n          throw new Error(\"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error(\"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error(\"`builder.addCase` cannot be called with an empty action type\");\n      }\n      if (type in actionsMap) {\n        throw new Error(\"`builder.addCase` cannot be called with two reducers for the same action type\");\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher: function (matcher, reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error(\"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher: matcher,\n        reducer: reducer\n      });\n      return builder;\n    },\n    addDefaultCase: function (reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error(\"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nvar hasWarnedAboutObjectNotation = false;\nfunction createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {\n  if (actionMatchers === void 0) {\n    actionMatchers = [];\n  }\n  if (true) {\n    if (typeof mapOrBuilderCallback === \"object\") {\n      if (!hasWarnedAboutObjectNotation) {\n        hasWarnedAboutObjectNotation = true;\n        console.warn(\"The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n      }\n    }\n  }\n  var _c = typeof mapOrBuilderCallback === \"function\" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],\n    actionsMap = _c[0],\n    finalActionMatchers = _c[1],\n    finalDefaultCaseReducer = _c[2];\n  var getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = function () {\n      return freezeDraftable(initialState());\n    };\n  } else {\n    var frozenInitialState_1 = freezeDraftable(initialState);\n    getInitialState = function () {\n      return frozenInitialState_1;\n    };\n  }\n  function reducer(state, action) {\n    if (state === void 0) {\n      state = getInitialState();\n    }\n    var caseReducers = __spreadArray([actionsMap[action.type]], finalActionMatchers.filter(function (_c) {\n      var matcher = _c.matcher;\n      return matcher(action);\n    }).map(function (_c) {\n      var reducer2 = _c.reducer;\n      return reducer2;\n    }));\n    if (caseReducers.filter(function (cr) {\n      return !!cr;\n    }).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce(function (previousState, caseReducer) {\n      if (caseReducer) {\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n          var draft = previousState;\n          var result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n          var result = caseReducer(previousState, action);\n          if (result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return result;\n        } else {\n          return (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(previousState, function (draft) {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n// src/createSlice.ts\nvar hasWarnedAboutObjectNotation2 = false;\nfunction getType2(slice, actionKey) {\n  return slice + \"/\" + actionKey;\n}\nfunction createSlice(options) {\n  var name = options.name;\n  if (!name) {\n    throw new Error(\"`name` is a required option for createSlice\");\n  }\n  if (typeof process !== \"undefined\" && true) {\n    if (options.initialState === void 0) {\n      console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n    }\n  }\n  var initialState = typeof options.initialState == \"function\" ? options.initialState : freezeDraftable(options.initialState);\n  var reducers = options.reducers || {};\n  var reducerNames = Object.keys(reducers);\n  var sliceCaseReducersByName = {};\n  var sliceCaseReducersByType = {};\n  var actionCreators = {};\n  reducerNames.forEach(function (reducerName) {\n    var maybeReducerWithPrepare = reducers[reducerName];\n    var type = getType2(name, reducerName);\n    var caseReducer;\n    var prepareCallback;\n    if (\"reducer\" in maybeReducerWithPrepare) {\n      caseReducer = maybeReducerWithPrepare.reducer;\n      prepareCallback = maybeReducerWithPrepare.prepare;\n    } else {\n      caseReducer = maybeReducerWithPrepare;\n    }\n    sliceCaseReducersByName[reducerName] = caseReducer;\n    sliceCaseReducersByType[type] = caseReducer;\n    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\n  });\n  function buildReducer() {\n    if (true) {\n      if (typeof options.extraReducers === \"object\") {\n        if (!hasWarnedAboutObjectNotation2) {\n          hasWarnedAboutObjectNotation2 = true;\n          console.warn(\"The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n    }\n    var _c = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],\n      _d = _c[0],\n      extraReducers = _d === void 0 ? {} : _d,\n      _e = _c[1],\n      actionMatchers = _e === void 0 ? [] : _e,\n      _f = _c[2],\n      defaultCaseReducer = _f === void 0 ? void 0 : _f;\n    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);\n    return createReducer(initialState, function (builder) {\n      for (var key in finalCaseReducers) {\n        builder.addCase(key, finalCaseReducers[key]);\n      }\n      for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {\n        var m = actionMatchers_1[_i];\n        builder.addMatcher(m.matcher, m.reducer);\n      }\n      if (defaultCaseReducer) {\n        builder.addDefaultCase(defaultCaseReducer);\n      }\n    });\n  }\n  var _reducer;\n  return {\n    name: name,\n    reducer: function (state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    },\n    actions: actionCreators,\n    caseReducers: sliceCaseReducersByName,\n    getInitialState: function () {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n  };\n}\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory() {\n  function getInitialState(additionalState) {\n    if (additionalState === void 0) {\n      additionalState = {};\n    }\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n  return {\n    getInitialState: getInitialState\n  };\n}\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var selectIds = function (state) {\n      return state.ids;\n    };\n    var selectEntities = function (state) {\n      return state.entities;\n    };\n    var selectAll = createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n    var selectId = function (_, id) {\n      return id;\n    };\n    var selectById = function (entities, id) {\n      return entities[id];\n    };\n    var selectTotal = createDraftSafeSelector(selectIds, function (ids) {\n      return ids.length;\n    });\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createDraftSafeSelector(selectEntities, selectId, selectById)\n      };\n    }\n    var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);\n    return {\n      selectIds: createDraftSafeSelector(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createDraftSafeSelector(selectState, selectAll),\n      selectTotal: createDraftSafeSelector(selectState, selectTotal),\n      selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors: getSelectors\n  };\n}\n// src/entities/state_adapter.ts\n\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    var runMutator = function (draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(state)) {\n      runMutator(state);\n      return state;\n    } else {\n      return (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, runMutator);\n    }\n  };\n}\n// src/entities/utils.ts\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n  if ( true && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  var added = [];\n  var updated = [];\n  for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {\n    var entity = newEntities_1[_i];\n    var id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      updated.push({\n        id: id,\n        changes: entity\n      });\n    } else {\n      added.push(entity);\n    }\n  }\n  return [added, updated];\n}\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {\n      var entity = newEntities_2[_i];\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {\n      var entity = newEntities_3[_i];\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    var original2 = state.entities[update.id];\n    var updated = Object.assign({}, original2, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      if (update.id in state.entities) {\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.keys(state.entities);\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),\n      added = _c[0],\n      updated = _c[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n// src/entities/sorted_state_adapter.ts\nfunction createSortedStateAdapter(selectId, sort) {\n  var _c = createUnsortedStateAdapter(selectId),\n    removeOne = _c.removeOne,\n    removeMany = _c.removeMany,\n    removeAll = _c.removeAll;\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var models = newEntities.filter(function (model) {\n      return !(selectIdValue(model, selectId) in state.entities);\n    });\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      merge(newEntities, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var appliedUpdates = false;\n    for (var _i = 0, updates_1 = updates; _i < updates_1.length; _i++) {\n      var update = updates_1[_i];\n      var entity = state.entities[update.id];\n      if (!entity) {\n        continue;\n      }\n      appliedUpdates = true;\n      Object.assign(entity, update.changes);\n      var newId = selectId(entity);\n      if (update.id !== newId) {\n        delete state.entities[update.id];\n        state.entities[newId] = entity;\n      }\n    }\n    if (appliedUpdates) {\n      resortEntities(state);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),\n      added = _c[0],\n      updated = _c[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length && i < b.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  function merge(models, state) {\n    models.forEach(function (model) {\n      state.entities[selectId(model)] = model;\n    });\n    resortEntities(state);\n  }\n  function resortEntities(state) {\n    var allEntities = Object.values(state.entities);\n    allEntities.sort(sort);\n    var newSortedIds = allEntities.map(selectId);\n    var ids = state.ids;\n    if (!areArraysEqual(ids, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  }\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = __spreadValues({\n      sortComparer: false,\n      selectId: function (instance) {\n        return instance.id;\n      }\n    }, options),\n    selectId = _c.selectId,\n    sortComparer = _c.sortComparer;\n  var stateFactory = createInitialStateFactory();\n  var selectorsFactory = createSelectorsFactory();\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  return __spreadValues(__spreadValues(__spreadValues({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory), selectorsFactory), stateAdapter);\n}\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = function (size) {\n  if (size === void 0) {\n    size = 21;\n  }\n  var id = \"\";\n  var i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = /** @class */function () {\n  function RejectWithValue(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  return RejectWithValue;\n}();\nvar FulfillWithMeta = /** @class */function () {\n  function FulfillWithMeta(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  return FulfillWithMeta;\n}();\nvar miniSerializeError = function (value) {\n  if (typeof value === \"object\" && value !== null) {\n    var simpleError = {};\n    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {\n      var property = commonProperties_1[_i];\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar createAsyncThunk = function () {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) {\n      return {\n        payload: payload,\n        meta: __spreadProps(__spreadValues({}, meta || {}), {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"fulfilled\"\n        })\n      };\n    });\n    var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) {\n      return {\n        payload: void 0,\n        meta: __spreadProps(__spreadValues({}, meta || {}), {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"pending\"\n        })\n      };\n    });\n    var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) {\n      return {\n        payload: payload,\n        error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n        meta: __spreadProps(__spreadValues({}, meta || {}), {\n          arg: arg,\n          requestId: requestId,\n          rejectedWithValue: !!payload,\n          requestStatus: \"rejected\",\n          aborted: (error == null ? void 0 : error.name) === \"AbortError\",\n          condition: (error == null ? void 0 : error.name) === \"ConditionError\"\n        })\n      };\n    });\n    var displayedWarning = false;\n    var AC = typeof AbortController !== \"undefined\" ? AbortController : /** @class */function () {\n      function class_1() {\n        this.signal = {\n          aborted: false,\n          addEventListener: function () {},\n          dispatchEvent: function () {\n            return false;\n          },\n          onabort: function () {},\n          removeEventListener: function () {},\n          reason: void 0,\n          throwIfAborted: function () {}\n        };\n      }\n      class_1.prototype.abort = function () {\n        if (true) {\n          if (!displayedWarning) {\n            displayedWarning = true;\n            console.info(\"This platform does not implement AbortController. \\nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.\");\n          }\n        }\n      };\n      return class_1;\n    }();\n    function actionCreator(arg) {\n      return function (dispatch, getState, extra) {\n        var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();\n        var abortController = new AC();\n        var abortReason;\n        var started = false;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        var promise2 = function () {\n          return __async(this, null, function () {\n            var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;\n            return __generator(this, function (_c) {\n              switch (_c.label) {\n                case 0:\n                  _c.trys.push([0, 4,, 5]);\n                  conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {\n                    getState: getState,\n                    extra: extra\n                  });\n                  if (!isThenable(conditionResult)) return [3 /*break*/, 2];\n                  return [4 /*yield*/, conditionResult];\n                case 1:\n                  conditionResult = _c.sent();\n                  _c.label = 2;\n                case 2:\n                  if (conditionResult === false || abortController.signal.aborted) {\n                    throw {\n                      name: \"ConditionError\",\n                      message: \"Aborted due to condition callback returning false.\"\n                    };\n                  }\n                  started = true;\n                  abortedPromise = new Promise(function (_, reject) {\n                    return abortController.signal.addEventListener(\"abort\", function () {\n                      return reject({\n                        name: \"AbortError\",\n                        message: abortReason || \"Aborted\"\n                      });\n                    });\n                  });\n                  dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {\n                    requestId: requestId,\n                    arg: arg\n                  }, {\n                    getState: getState,\n                    extra: extra\n                  })));\n                  return [4 /*yield*/, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n                    dispatch: dispatch,\n                    getState: getState,\n                    extra: extra,\n                    requestId: requestId,\n                    signal: abortController.signal,\n                    abort: abort,\n                    rejectWithValue: function (value, meta) {\n                      return new RejectWithValue(value, meta);\n                    },\n                    fulfillWithValue: function (value, meta) {\n                      return new FulfillWithMeta(value, meta);\n                    }\n                  })).then(function (result) {\n                    if (result instanceof RejectWithValue) {\n                      throw result;\n                    }\n                    if (result instanceof FulfillWithMeta) {\n                      return fulfilled(result.payload, requestId, arg, result.meta);\n                    }\n                    return fulfilled(result, requestId, arg);\n                  })])];\n                case 3:\n                  finalAction = _c.sent();\n                  return [3 /*break*/, 5];\n                case 4:\n                  err_1 = _c.sent();\n                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);\n                  return [3 /*break*/, 5];\n                case 5:\n                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                  if (!skipDispatch) {\n                    dispatch(finalAction);\n                  }\n                  return [2 /*return*/, finalAction];\n              }\n            });\n          });\n        }();\n        return Object.assign(promise2, {\n          abort: abort,\n          requestId: requestId,\n          arg: arg,\n          unwrap: function () {\n            return promise2.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending: pending,\n      rejected: rejected,\n      fulfilled: fulfilled,\n      typePrefix: typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = function () {\n    return createAsyncThunk2;\n  };\n  return createAsyncThunk2;\n}();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n// src/matchers.ts\nvar matches = function (matcher, action) {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf() {\n  var matchers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    matchers[_i] = arguments[_i];\n  }\n  return function (action) {\n    return matchers.some(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction isAllOf() {\n  var matchers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    matchers[_i] = arguments[_i];\n  }\n  return function (action) {\n    return matchers.every(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  var hasValidRequestId = typeof action.meta.requestId === \"string\";\n  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.pending;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isRejected() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.rejected;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isRejectedWithValue() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  var hasFlag = function (action) {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n      return combinedMatcher(action);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return function (action) {\n    var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n    return combinedMatcher(action);\n  };\n}\nfunction isFulfilled() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.fulfilled;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isAsyncThunkAction() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = [];\n    for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {\n      var asyncThunk = asyncThunks_1[_i];\n      matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\n    }\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function (func, expected) {\n  if (typeof func !== \"function\") {\n    throw new TypeError(expected + \" is not a function\");\n  }\n};\nvar noop = function () {};\nvar catchRejection = function (promise2, onError) {\n  if (onError === void 0) {\n    onError = noop;\n  }\n  promise2.catch(onError);\n  return promise2;\n};\nvar addAbortSignalListener = function (abortSignal, callback) {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n  return function () {\n    return abortSignal.removeEventListener(\"abort\", callback);\n  };\n};\nvar abortControllerWithReason = function (abortController, reason) {\n  var signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = \"task-\" + cancelled;\nvar taskCompleted = \"task-\" + completed;\nvar listenerCancelled = listener + \"-\" + cancelled;\nvar listenerCompleted = listener + \"-\" + completed;\nvar TaskAbortError = /** @class */function () {\n  function TaskAbortError(code) {\n    this.code = code;\n    this.name = \"TaskAbortError\";\n    this.message = task + \" \" + cancelled + \" (reason: \" + code + \")\";\n  }\n  return TaskAbortError;\n}();\n// src/listenerMiddleware/task.ts\nvar validateActive = function (signal) {\n  if (signal.aborted) {\n    throw new TaskAbortError(signal.reason);\n  }\n};\nfunction raceWithSignal(signal, promise2) {\n  var cleanup = noop;\n  return new Promise(function (resolve, reject) {\n    var notifyRejection = function () {\n      return reject(new TaskAbortError(signal.reason));\n    };\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise2.finally(function () {\n      return cleanup();\n    }).then(resolve, reject);\n  }).finally(function () {\n    cleanup = noop;\n  });\n}\nvar runTask = function (task2, cleanUp) {\n  return __async(void 0, null, function () {\n    var value, error_1;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _c.trys.push([0, 3, 4, 5]);\n          return [4 /*yield*/, Promise.resolve()];\n        case 1:\n          _c.sent();\n          return [4 /*yield*/, task2()];\n        case 2:\n          value = _c.sent();\n          return [2 /*return*/, {\n            status: \"ok\",\n            value: value\n          }];\n        case 3:\n          error_1 = _c.sent();\n          return [2 /*return*/, {\n            status: error_1 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error: error_1\n          }];\n        case 4:\n          cleanUp == null ? void 0 : cleanUp();\n          return [7 /*endfinally*/];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n};\n\nvar createPause = function (signal) {\n  return function (promise2) {\n    return catchRejection(raceWithSignal(signal, promise2).then(function (output) {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = function (signal) {\n  var pause = createPause(signal);\n  return function (timeoutMs) {\n    return pause(new Promise(function (resolve) {\n      return setTimeout(resolve, timeoutMs);\n    }));\n  };\n};\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = function (parentAbortSignal, parentBlockingPromises) {\n  var linkControllers = function (controller) {\n    return addAbortSignalListener(parentAbortSignal, function () {\n      return abortControllerWithReason(controller, parentAbortSignal.reason);\n    });\n  };\n  return function (taskExecutor, opts) {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    var childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    var result = runTask(function () {\n      return __async(void 0, null, function () {\n        var result2;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              validateActive(parentAbortSignal);\n              validateActive(childAbortController.signal);\n              return [4 /*yield*/, taskExecutor({\n                pause: createPause(childAbortController.signal),\n                delay: createDelay(childAbortController.signal),\n                signal: childAbortController.signal\n              })];\n            case 1:\n              result2 = _c.sent();\n              validateActive(childAbortController.signal);\n              return [2 /*return*/, result2];\n          }\n        });\n      });\n    }, function () {\n      return abortControllerWithReason(childAbortController, taskCompleted);\n    });\n    if (opts == null ? void 0 : opts.autoJoin) {\n      parentBlockingPromises.push(result);\n    }\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel: function () {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = function (startListening, signal) {\n  var take = function (predicate, timeout) {\n    return __async(void 0, null, function () {\n      var unsubscribe, tuplePromise, promises, output;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            validateActive(signal);\n            unsubscribe = function () {};\n            tuplePromise = new Promise(function (resolve, reject) {\n              var stopListening = startListening({\n                predicate: predicate,\n                effect: function (action, listenerApi) {\n                  listenerApi.unsubscribe();\n                  resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n                }\n              });\n              unsubscribe = function () {\n                stopListening();\n                reject();\n              };\n            });\n            promises = [tuplePromise];\n            if (timeout != null) {\n              promises.push(new Promise(function (resolve) {\n                return setTimeout(resolve, timeout, null);\n              }));\n            }\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, raceWithSignal(signal, Promise.race(promises))];\n          case 2:\n            output = _c.sent();\n            validateActive(signal);\n            return [2 /*return*/, output];\n          case 3:\n            unsubscribe();\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return function (predicate, timeout) {\n    return catchRejection(take(predicate, timeout));\n  };\n};\nvar getListenerEntryPropsFrom = function (options) {\n  var type = options.type,\n    actionCreator = options.actionCreator,\n    matcher = options.matcher,\n    predicate = options.predicate,\n    effect = options.effect;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error(\"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate: predicate,\n    type: type,\n    effect: effect\n  };\n};\nvar createListenerEntry = function (options) {\n  var _c = getListenerEntryPropsFrom(options),\n    type = _c.type,\n    predicate = _c.predicate,\n    effect = _c.effect;\n  var id = nanoid();\n  var entry = {\n    id: id,\n    effect: effect,\n    type: type,\n    predicate: predicate,\n    pending: new Set(),\n    unsubscribe: function () {\n      throw new Error(\"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n};\nvar cancelActiveListeners = function (entry) {\n  entry.pending.forEach(function (controller) {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = function (listenerMap) {\n  return function () {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = function (errorHandler, errorToNotify, errorInfo) {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(function () {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = createAction(alm + \"/add\");\nvar clearAllListeners = createAction(alm + \"/removeAll\");\nvar removeListener = createAction(alm + \"/remove\");\nvar defaultErrorHandler = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  console.error.apply(console, __spreadArray([alm + \"/error\"], args));\n};\nfunction createListenerMiddleware(middlewareOptions) {\n  var _this = this;\n  if (middlewareOptions === void 0) {\n    middlewareOptions = {};\n  }\n  var listenerMap = new Map();\n  var extra = middlewareOptions.extra,\n    _c = middlewareOptions.onError,\n    onError = _c === void 0 ? defaultErrorHandler : _c;\n  assertFunction(onError, \"onError\");\n  var insertEntry = function (entry) {\n    entry.unsubscribe = function () {\n      return listenerMap.delete(entry.id);\n    };\n    listenerMap.set(entry.id, entry);\n    return function (cancelOptions) {\n      entry.unsubscribe();\n      if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  var findListenerEntry = function (comparator) {\n    for (var _i = 0, _c = Array.from(listenerMap.values()); _i < _c.length; _i++) {\n      var entry = _c[_i];\n      if (comparator(entry)) {\n        return entry;\n      }\n    }\n    return void 0;\n  };\n  var startListening = function (options) {\n    var entry = findListenerEntry(function (existingEntry) {\n      return existingEntry.effect === options.effect;\n    });\n    if (!entry) {\n      entry = createListenerEntry(options);\n    }\n    return insertEntry(entry);\n  };\n  var stopListening = function (options) {\n    var _c = getListenerEntryPropsFrom(options),\n      type = _c.type,\n      effect = _c.effect,\n      predicate = _c.predicate;\n    var entry = findListenerEntry(function (entry2) {\n      var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\n      return matchPredicateOrType && entry2.effect === effect;\n    });\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  var notifyListener = function (entry, action, api, getOriginalState) {\n    return __async(_this, null, function () {\n      var internalTaskController, take, autoJoinPromises, listenerError_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            internalTaskController = new AbortController();\n            take = createTakePattern(startListening, internalTaskController.signal);\n            autoJoinPromises = [];\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3, 4, 6]);\n            entry.pending.add(internalTaskController);\n            return [4 /*yield*/, Promise.resolve(entry.effect(action, assign({}, api, {\n              getOriginalState: getOriginalState,\n              condition: function (predicate, timeout) {\n                return take(predicate, timeout).then(Boolean);\n              },\n              take: take,\n              delay: createDelay(internalTaskController.signal),\n              pause: createPause(internalTaskController.signal),\n              extra: extra,\n              signal: internalTaskController.signal,\n              fork: createFork(internalTaskController.signal, autoJoinPromises),\n              unsubscribe: entry.unsubscribe,\n              subscribe: function () {\n                listenerMap.set(entry.id, entry);\n              },\n              cancelActiveListeners: function () {\n                entry.pending.forEach(function (controller, _, set) {\n                  if (controller !== internalTaskController) {\n                    abortControllerWithReason(controller, listenerCancelled);\n                    set.delete(controller);\n                  }\n                });\n              }\n            })))];\n          case 2:\n            _c.sent();\n            return [3 /*break*/, 6];\n          case 3:\n            listenerError_1 = _c.sent();\n            if (!(listenerError_1 instanceof TaskAbortError)) {\n              safelyNotifyError(onError, listenerError_1, {\n                raisedBy: \"effect\"\n              });\n            }\n            return [3 /*break*/, 6];\n          case 4:\n            return [4 /*yield*/, Promise.allSettled(autoJoinPromises)];\n          case 5:\n            _c.sent();\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending.delete(internalTaskController);\n            return [7 /*endfinally*/];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  var middleware = function (api) {\n    return function (next) {\n      return function (action) {\n        if (!isAction(action)) {\n          return next(action);\n        }\n        if (addListener.match(action)) {\n          return startListening(action.payload);\n        }\n        if (clearAllListeners.match(action)) {\n          clearListenerMiddleware();\n          return;\n        }\n        if (removeListener.match(action)) {\n          return stopListening(action.payload);\n        }\n        var originalState = api.getState();\n        var getOriginalState = function () {\n          if (originalState === INTERNAL_NIL_TOKEN) {\n            throw new Error(alm + \": getOriginalState can only be called synchronously\");\n          }\n          return originalState;\n        };\n        var result;\n        try {\n          result = next(action);\n          if (listenerMap.size > 0) {\n            var currentState = api.getState();\n            var listenerEntries = Array.from(listenerMap.values());\n            for (var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++) {\n              var entry = listenerEntries_1[_i];\n              var runListener = false;\n              try {\n                runListener = entry.predicate(action, currentState, originalState);\n              } catch (predicateError) {\n                runListener = false;\n                safelyNotifyError(onError, predicateError, {\n                  raisedBy: \"predicate\"\n                });\n              }\n              if (!runListener) {\n                continue;\n              }\n              notifyListener(entry, action, api, getOriginalState);\n            }\n          }\n        } finally {\n          originalState = INTERNAL_NIL_TOKEN;\n        }\n        return result;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    startListening: startListening,\n    stopListening: stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n}\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = function () {\n  return function (payload) {\n    var _c;\n    return {\n      payload: payload,\n      meta: (_c = {}, _c[SHOULD_AUTOBATCH] = true, _c)\n    };\n  };\n};\nvar promise;\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind( false ? 0 : typeof global !== \"undefined\" ? global : globalThis) : function (cb) {\n  return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) {\n    return setTimeout(function () {\n      throw err;\n    }, 0);\n  });\n};\nvar createQueueWithTimer = function (timeout) {\n  return function (notify) {\n    setTimeout(notify, timeout);\n  };\n};\nvar rAF =  false ? 0 : createQueueWithTimer(10);\nvar autoBatchEnhancer = function (options) {\n  if (options === void 0) {\n    options = {\n      type: \"raf\"\n    };\n  }\n  return function (next) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var store = next.apply(void 0, args);\n      var notifying = true;\n      var shouldNotifyAtEndOfTick = false;\n      var notificationQueued = false;\n      var listeners = new Set();\n      var queueCallback = options.type === \"tick\" ? queueMicrotaskShim : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n      var notifyListeners = function () {\n        notificationQueued = false;\n        if (shouldNotifyAtEndOfTick) {\n          shouldNotifyAtEndOfTick = false;\n          listeners.forEach(function (l) {\n            return l();\n          });\n        }\n      };\n      return Object.assign({}, store, {\n        subscribe: function (listener2) {\n          var wrappedListener = function () {\n            return notifying && listener2();\n          };\n          var unsubscribe = store.subscribe(wrappedListener);\n          listeners.add(listener2);\n          return function () {\n            unsubscribe();\n            listeners.delete(listener2);\n          };\n        },\n        dispatch: function (action) {\n          var _a;\n          try {\n            notifying = !((_a = action == null ? void 0 : action.meta) == null ? void 0 : _a[SHOULD_AUTOBATCH]);\n            shouldNotifyAtEndOfTick = !notifying;\n            if (shouldNotifyAtEndOfTick) {\n              if (!notificationQueued) {\n                notificationQueued = true;\n                queueCallback(notifyListeners);\n              }\n            }\n            return store.dispatch(action);\n          } finally {\n            notifying = true;\n          }\n        }\n      });\n    };\n  };\n};\n// src/index.ts\n(0,immer__WEBPACK_IMPORTED_MODULE_2__.enableES5)();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\n");

/***/ })

};
;