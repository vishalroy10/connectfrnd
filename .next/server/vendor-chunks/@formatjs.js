"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@formatjs";
exports.ids = ["vendor-chunks/@formatjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoize: () => (/* binding */ memoize),\n/* harmony export */   strategies: () => (/* binding */ strategies)\n/* harmony export */ });\n//\n// Main\n//\nfunction memoize(fn, options) {\n  var cache = options && options.cache ? options.cache : cacheDefault;\n  var serializer = options && options.serializer ? options.serializer : serializerDefault;\n  var strategy = options && options.strategy ? options.strategy : strategyDefault;\n  return strategy(fn, {\n    cache: cache,\n    serializer: serializer\n  });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic(fn, cache, serializer, arg) {\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.call(this, arg);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n  var args = Array.prototype.slice.call(arguments, 3);\n  var cacheKey = serializer(args);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.apply(this, args);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n  return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n  var strategy = fn.length === 1 ? monadic : variadic;\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n  return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n  return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n  return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nvar ObjectWithoutPrototypeCache = /** @class */function () {\n  function ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n  }\n  ObjectWithoutPrototypeCache.prototype.get = function (key) {\n    return this.cache[key];\n  };\n  ObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n    this.cache[key] = value;\n  };\n  return ObjectWithoutPrototypeCache;\n}();\nvar cacheDefault = {\n  create: function create() {\n    return new ObjectWithoutPrototypeCache();\n  }\n};\nvar strategies = {\n  variadic: strategyVariadic,\n  monadic: strategyMonadic\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)\n/* harmony export */ });\n/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\");\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */\nfunction getBestPattern(skeleton, locale) {\n  var skeletonCopy = '';\n  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {\n    var patternChar = skeleton.charAt(patternPos);\n    if (patternChar === 'j') {\n      var extraLength = 0;\n      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {\n        extraLength++;\n        patternPos++;\n      }\n      var hourLen = 1 + (extraLength & 1);\n      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n      var dayPeriodChar = 'a';\n      var hourChar = getDefaultHourSymbolFromLocale(locale);\n      if (hourChar == 'H' || hourChar == 'k') {\n        dayPeriodLen = 0;\n      }\n      while (dayPeriodLen-- > 0) {\n        skeletonCopy += dayPeriodChar;\n      }\n      while (hourLen-- > 0) {\n        skeletonCopy = hourChar + skeletonCopy;\n      }\n    } else if (patternChar === 'J') {\n      skeletonCopy += 'H';\n    } else {\n      skeletonCopy += patternChar;\n    }\n  }\n  return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */\nfunction getDefaultHourSymbolFromLocale(locale) {\n  var hourCycle = locale.hourCycle;\n  if (hourCycle === undefined &&\n  // @ts-ignore hourCycle(s) is not identified yet\n  locale.hourCycles &&\n  // @ts-ignore\n  locale.hourCycles.length) {\n    // @ts-ignore\n    hourCycle = locale.hourCycles[0];\n  }\n  if (hourCycle) {\n    switch (hourCycle) {\n      case 'h24':\n        return 'k';\n      case 'h23':\n        return 'H';\n      case 'h12':\n        return 'h';\n      case 'h11':\n        return 'K';\n      default:\n        throw new Error('Invalid hourCycle');\n    }\n  }\n  // TODO: Once hourCycle is fully supported remove the following with data generation\n  var languageTag = locale.language;\n  var regionTag;\n  if (languageTag !== 'root') {\n    regionTag = locale.maximize().region;\n  }\n  var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"\".concat(languageTag, \"-001\")] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData['001'];\n  return hourCycles[0];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsY0FBY0EsQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLEVBQUU7RUFDN0MsSUFBSUMsWUFBWSxHQUFHLEVBQUU7RUFDckIsS0FBSyxJQUFJQyxVQUFVLEdBQUcsQ0FBQyxFQUFFQSxVQUFVLEdBQUdILFFBQVEsQ0FBQ0ksTUFBTSxFQUFFRCxVQUFVLEVBQUUsRUFBRTtJQUNqRSxJQUFJRSxXQUFXLEdBQUdMLFFBQVEsQ0FBQ00sTUFBTSxDQUFDSCxVQUFVLENBQUM7SUFDN0MsSUFBSUUsV0FBVyxLQUFLLEdBQUcsRUFBRTtNQUNyQixJQUFJRSxXQUFXLEdBQUcsQ0FBQztNQUNuQixPQUFPSixVQUFVLEdBQUcsQ0FBQyxHQUFHSCxRQUFRLENBQUNJLE1BQU0sSUFDbkNKLFFBQVEsQ0FBQ00sTUFBTSxDQUFDSCxVQUFVLEdBQUcsQ0FBQyxDQUFDLEtBQUtFLFdBQVcsRUFBRTtRQUNqREUsV0FBVyxFQUFFO1FBQ2JKLFVBQVUsRUFBRTtNQUNoQjtNQUNBLElBQUlLLE9BQU8sR0FBRyxDQUFDLElBQUlELFdBQVcsR0FBRyxDQUFDLENBQUM7TUFDbkMsSUFBSUUsWUFBWSxHQUFHRixXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUlBLFdBQVcsSUFBSSxDQUFDLENBQUM7TUFDL0QsSUFBSUcsYUFBYSxHQUFHLEdBQUc7TUFDdkIsSUFBSUMsUUFBUSxHQUFHQyw4QkFBOEIsQ0FBQ1gsTUFBTSxDQUFDO01BQ3JELElBQUlVLFFBQVEsSUFBSSxHQUFHLElBQUlBLFFBQVEsSUFBSSxHQUFHLEVBQUU7UUFDcENGLFlBQVksR0FBRyxDQUFDO01BQ3BCO01BQ0EsT0FBT0EsWUFBWSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCUCxZQUFZLElBQUlRLGFBQWE7TUFDakM7TUFDQSxPQUFPRixPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDbEJOLFlBQVksR0FBR1MsUUFBUSxHQUFHVCxZQUFZO01BQzFDO0lBQ0osQ0FBQyxNQUNJLElBQUlHLFdBQVcsS0FBSyxHQUFHLEVBQUU7TUFDMUJILFlBQVksSUFBSSxHQUFHO0lBQ3ZCLENBQUMsTUFDSTtNQUNEQSxZQUFZLElBQUlHLFdBQVc7SUFDL0I7RUFDSjtFQUNBLE9BQU9ILFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1UsOEJBQThCQSxDQUFDWCxNQUFNLEVBQUU7RUFDNUMsSUFBSVksU0FBUyxHQUFHWixNQUFNLENBQUNZLFNBQVM7RUFDaEMsSUFBSUEsU0FBUyxLQUFLQyxTQUFTO0VBQ3ZCO0VBQ0FiLE1BQU0sQ0FBQ2MsVUFBVTtFQUNqQjtFQUNBZCxNQUFNLENBQUNjLFVBQVUsQ0FBQ1gsTUFBTSxFQUFFO0lBQzFCO0lBQ0FTLFNBQVMsR0FBR1osTUFBTSxDQUFDYyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3BDO0VBQ0EsSUFBSUYsU0FBUyxFQUFFO0lBQ1gsUUFBUUEsU0FBUztNQUNiLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkO1FBQ0ksTUFBTSxJQUFJRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7SUFDNUM7RUFDSjtFQUNBO0VBQ0EsSUFBSUMsV0FBVyxHQUFHaEIsTUFBTSxDQUFDaUIsUUFBUTtFQUNqQyxJQUFJQyxTQUFTO0VBQ2IsSUFBSUYsV0FBVyxLQUFLLE1BQU0sRUFBRTtJQUN4QkUsU0FBUyxHQUFHbEIsTUFBTSxDQUFDbUIsUUFBUSxDQUFDLENBQUMsQ0FBQ0MsTUFBTTtFQUN4QztFQUNBLElBQUlOLFVBQVUsR0FBR2pCLDBEQUFRLENBQUNxQixTQUFTLElBQUksRUFBRSxDQUFDLElBQ3RDckIsMERBQVEsQ0FBQ21CLFdBQVcsSUFBSSxFQUFFLENBQUMsSUFDM0JuQiwwREFBUSxDQUFDLEVBQUUsQ0FBQ3dCLE1BQU0sQ0FBQ0wsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQ3hDbkIsMERBQVEsQ0FBQyxLQUFLLENBQUM7RUFDbkIsT0FBT2lCLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2RhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvci5qcz9mN2VjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRpbWVEYXRhIH0gZnJvbSAnLi90aW1lLWRhdGEuZ2VuZXJhdGVkJztcbi8qKlxuICogUmV0dXJucyB0aGUgYmVzdCBtYXRjaGluZyBkYXRlIHRpbWUgcGF0dGVybiBpZiBhIGRhdGUgdGltZSBza2VsZXRvblxuICogcGF0dGVybiBpcyBwcm92aWRlZCB3aXRoIGEgbG9jYWxlLiBGb2xsb3dzIHRoZSBVbmljb2RlIHNwZWNpZmljYXRpb246XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI3RhYmxlLW1hcHBpbmctcmVxdWVzdGVkLXRpbWUtc2tlbGV0b25zLXRvLXBhdHRlcm5zXG4gKiBAcGFyYW0gc2tlbGV0b24gZGF0ZSB0aW1lIHNrZWxldG9uIHBhdHRlcm4gdGhhdCBwb3NzaWJseSBpbmNsdWRlcyBqLCBKIG9yIENcbiAqIEBwYXJhbSBsb2NhbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RQYXR0ZXJuKHNrZWxldG9uLCBsb2NhbGUpIHtcbiAgICB2YXIgc2tlbGV0b25Db3B5ID0gJyc7XG4gICAgZm9yICh2YXIgcGF0dGVyblBvcyA9IDA7IHBhdHRlcm5Qb3MgPCBza2VsZXRvbi5sZW5ndGg7IHBhdHRlcm5Qb3MrKykge1xuICAgICAgICB2YXIgcGF0dGVybkNoYXIgPSBza2VsZXRvbi5jaGFyQXQocGF0dGVyblBvcyk7XG4gICAgICAgIGlmIChwYXR0ZXJuQ2hhciA9PT0gJ2onKSB7XG4gICAgICAgICAgICB2YXIgZXh0cmFMZW5ndGggPSAwO1xuICAgICAgICAgICAgd2hpbGUgKHBhdHRlcm5Qb3MgKyAxIDwgc2tlbGV0b24ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgc2tlbGV0b24uY2hhckF0KHBhdHRlcm5Qb3MgKyAxKSA9PT0gcGF0dGVybkNoYXIpIHtcbiAgICAgICAgICAgICAgICBleHRyYUxlbmd0aCsrO1xuICAgICAgICAgICAgICAgIHBhdHRlcm5Qb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBob3VyTGVuID0gMSArIChleHRyYUxlbmd0aCAmIDEpO1xuICAgICAgICAgICAgdmFyIGRheVBlcmlvZExlbiA9IGV4dHJhTGVuZ3RoIDwgMiA/IDEgOiAzICsgKGV4dHJhTGVuZ3RoID4+IDEpO1xuICAgICAgICAgICAgdmFyIGRheVBlcmlvZENoYXIgPSAnYSc7XG4gICAgICAgICAgICB2YXIgaG91ckNoYXIgPSBnZXREZWZhdWx0SG91clN5bWJvbEZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICAgICAgICAgIGlmIChob3VyQ2hhciA9PSAnSCcgfHwgaG91ckNoYXIgPT0gJ2snKSB7XG4gICAgICAgICAgICAgICAgZGF5UGVyaW9kTGVuID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChkYXlQZXJpb2RMZW4tLSA+IDApIHtcbiAgICAgICAgICAgICAgICBza2VsZXRvbkNvcHkgKz0gZGF5UGVyaW9kQ2hhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChob3VyTGVuLS0gPiAwKSB7XG4gICAgICAgICAgICAgICAgc2tlbGV0b25Db3B5ID0gaG91ckNoYXIgKyBza2VsZXRvbkNvcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGF0dGVybkNoYXIgPT09ICdKJykge1xuICAgICAgICAgICAgc2tlbGV0b25Db3B5ICs9ICdIJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNrZWxldG9uQ29weSArPSBwYXR0ZXJuQ2hhcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2tlbGV0b25Db3B5O1xufVxuLyoqXG4gKiBNYXBzIHRoZSBbaG91ciBjeWNsZSB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0xvY2FsZS9ob3VyQ3ljbGUpXG4gKiBvZiB0aGUgZ2l2ZW4gYGxvY2FsZWAgdG8gdGhlIGNvcnJlc3BvbmRpbmcgdGltZSBwYXR0ZXJuLlxuICogQHBhcmFtIGxvY2FsZVxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0SG91clN5bWJvbEZyb21Mb2NhbGUobG9jYWxlKSB7XG4gICAgdmFyIGhvdXJDeWNsZSA9IGxvY2FsZS5ob3VyQ3ljbGU7XG4gICAgaWYgKGhvdXJDeWNsZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgaG91ckN5Y2xlKHMpIGlzIG5vdCBpZGVudGlmaWVkIHlldFxuICAgICAgICBsb2NhbGUuaG91ckN5Y2xlcyAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxvY2FsZS5ob3VyQ3ljbGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGhvdXJDeWNsZSA9IGxvY2FsZS5ob3VyQ3ljbGVzWzBdO1xuICAgIH1cbiAgICBpZiAoaG91ckN5Y2xlKSB7XG4gICAgICAgIHN3aXRjaCAoaG91ckN5Y2xlKSB7XG4gICAgICAgICAgICBjYXNlICdoMjQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnayc7XG4gICAgICAgICAgICBjYXNlICdoMjMnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSCc7XG4gICAgICAgICAgICBjYXNlICdoMTInOlxuICAgICAgICAgICAgICAgIHJldHVybiAnaCc7XG4gICAgICAgICAgICBjYXNlICdoMTEnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSyc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBob3VyQ3ljbGUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUT0RPOiBPbmNlIGhvdXJDeWNsZSBpcyBmdWxseSBzdXBwb3J0ZWQgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgd2l0aCBkYXRhIGdlbmVyYXRpb25cbiAgICB2YXIgbGFuZ3VhZ2VUYWcgPSBsb2NhbGUubGFuZ3VhZ2U7XG4gICAgdmFyIHJlZ2lvblRhZztcbiAgICBpZiAobGFuZ3VhZ2VUYWcgIT09ICdyb290Jykge1xuICAgICAgICByZWdpb25UYWcgPSBsb2NhbGUubWF4aW1pemUoKS5yZWdpb247XG4gICAgfVxuICAgIHZhciBob3VyQ3ljbGVzID0gdGltZURhdGFbcmVnaW9uVGFnIHx8ICcnXSB8fFxuICAgICAgICB0aW1lRGF0YVtsYW5ndWFnZVRhZyB8fCAnJ10gfHxcbiAgICAgICAgdGltZURhdGFbXCJcIi5jb25jYXQobGFuZ3VhZ2VUYWcsIFwiLTAwMVwiKV0gfHxcbiAgICAgICAgdGltZURhdGFbJzAwMSddO1xuICAgIHJldHVybiBob3VyQ3ljbGVzWzBdO1xufVxuIl0sIm5hbWVzIjpbInRpbWVEYXRhIiwiZ2V0QmVzdFBhdHRlcm4iLCJza2VsZXRvbiIsImxvY2FsZSIsInNrZWxldG9uQ29weSIsInBhdHRlcm5Qb3MiLCJsZW5ndGgiLCJwYXR0ZXJuQ2hhciIsImNoYXJBdCIsImV4dHJhTGVuZ3RoIiwiaG91ckxlbiIsImRheVBlcmlvZExlbiIsImRheVBlcmlvZENoYXIiLCJob3VyQ2hhciIsImdldERlZmF1bHRIb3VyU3ltYm9sRnJvbUxvY2FsZSIsImhvdXJDeWNsZSIsInVuZGVmaW5lZCIsImhvdXJDeWNsZXMiLCJFcnJvciIsImxhbmd1YWdlVGFnIiwibGFuZ3VhZ2UiLCJyZWdpb25UYWciLCJtYXhpbWl6ZSIsInJlZ2lvbiIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)\n/* harmony export */ });\nvar ErrorKind;\n(function (ErrorKind) {\n  /** Argument is unclosed (e.g. `{0`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n  /** Argument is empty (e.g. `{}`). */\n  ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n  /** Argument is malformed (e.g. `{foo!}``) */\n  ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n  /** Expect an argument type (e.g. `{foo,}`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n  /** Unsupported argument type (e.g. `{foo,foo}`) */\n  ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n  /** Expect an argument style (e.g. `{foo, number, }`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n  /** The number skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n  /** The date time skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n  /** Missing select argument options (e.g. `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n  /**\n   * Expecting a message fragment after the `plural` or `selectordinal` selector\n   * (e.g. `{foo, plural, one}`)\n   */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n  /**\n   * Duplicate selectors in `plural` or `selectordinal` argument.\n   * (e.g. {foo, plural, one {#} one {#}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n  /** Duplicate selectors in `select` argument.\n   * (e.g. {foo, select, apple {apple} apple {apple}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n  /** Plural or select argument option must have `other` clause. */\n  ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n  ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n  /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n  ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n  ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUlBLFNBQVM7QUFDcEIsQ0FBQyxVQUFVQSxTQUFTLEVBQUU7RUFDbEI7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsK0JBQStCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRywrQkFBK0I7RUFDM0Y7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxnQkFBZ0I7RUFDN0Q7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxvQkFBb0I7RUFDckU7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxzQkFBc0I7RUFDekU7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyx1QkFBdUI7RUFDM0U7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyx1QkFBdUI7RUFDM0U7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMseUJBQXlCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyx5QkFBeUI7RUFDL0U7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyw0QkFBNEI7RUFDckY7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyx3QkFBd0I7RUFDN0U7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsMkJBQTJCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRywyQkFBMkI7RUFDcEY7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsa0NBQWtDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxrQ0FBa0M7RUFDbEc7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsZ0NBQWdDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxnQ0FBZ0M7RUFDOUY7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMscUNBQXFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxxQ0FBcUM7RUFDeEc7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsc0NBQXNDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxzQ0FBc0M7RUFDMUc7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsaUNBQWlDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxpQ0FBaUM7RUFDaEc7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsaUNBQWlDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxpQ0FBaUM7RUFDaEc7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsMENBQTBDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRywwQ0FBMEM7RUFDbEg7QUFDSjtBQUNBO0FBQ0E7RUFDSUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsMENBQTBDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRywwQ0FBMEM7RUFDbEg7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsa0NBQWtDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxrQ0FBa0M7RUFDbEc7QUFDSjtBQUNBO0FBQ0E7RUFDSUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsb0NBQW9DLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxvQ0FBb0M7RUFDdEc7QUFDSjtBQUNBO0VBQ0lBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLG9DQUFvQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsb0NBQW9DO0VBQ3RHO0VBQ0FBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsc0JBQXNCO0VBQzFFO0VBQ0FBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLGFBQWE7RUFDeEQ7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxrQkFBa0I7RUFDbEU7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyx1QkFBdUI7RUFDNUU7RUFDQUEsU0FBUyxDQUFDQSxTQUFTLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsY0FBYztBQUM5RCxDQUFDLEVBQUVBLFNBQVMsS0FBS0EsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2Vycm9yLmpzPzhhOGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBFcnJvcktpbmQ7XG4oZnVuY3Rpb24gKEVycm9yS2luZCkge1xuICAgIC8qKiBBcmd1bWVudCBpcyB1bmNsb3NlZCAoZS5nLiBgezBgKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJFWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRVwiXSA9IDFdID0gXCJFWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRVwiO1xuICAgIC8qKiBBcmd1bWVudCBpcyBlbXB0eSAoZS5nLiBge31gKS4gKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRU1QVFlfQVJHVU1FTlRcIl0gPSAyXSA9IFwiRU1QVFlfQVJHVU1FTlRcIjtcbiAgICAvKiogQXJndW1lbnQgaXMgbWFsZm9ybWVkIChlLmcuIGB7Zm9vIX1gYCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiTUFMRk9STUVEX0FSR1VNRU5UXCJdID0gM10gPSBcIk1BTEZPUk1FRF9BUkdVTUVOVFwiO1xuICAgIC8qKiBFeHBlY3QgYW4gYXJndW1lbnQgdHlwZSAoZS5nLiBge2Zvbyx9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX0FSR1VNRU5UX1RZUEVcIl0gPSA0XSA9IFwiRVhQRUNUX0FSR1VNRU5UX1RZUEVcIjtcbiAgICAvKiogVW5zdXBwb3J0ZWQgYXJndW1lbnQgdHlwZSAoZS5nLiBge2Zvbyxmb299YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiSU5WQUxJRF9BUkdVTUVOVF9UWVBFXCJdID0gNV0gPSBcIklOVkFMSURfQVJHVU1FTlRfVFlQRVwiO1xuICAgIC8qKiBFeHBlY3QgYW4gYXJndW1lbnQgc3R5bGUgKGUuZy4gYHtmb28sIG51bWJlciwgfWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9BUkdVTUVOVF9TVFlMRVwiXSA9IDZdID0gXCJFWFBFQ1RfQVJHVU1FTlRfU1RZTEVcIjtcbiAgICAvKiogVGhlIG51bWJlciBza2VsZXRvbiBpcyBpbnZhbGlkLiAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJJTlZBTElEX05VTUJFUl9TS0VMRVRPTlwiXSA9IDddID0gXCJJTlZBTElEX05VTUJFUl9TS0VMRVRPTlwiO1xuICAgIC8qKiBUaGUgZGF0ZSB0aW1lIHNrZWxldG9uIGlzIGludmFsaWQuICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIklOVkFMSURfREFURV9USU1FX1NLRUxFVE9OXCJdID0gOF0gPSBcIklOVkFMSURfREFURV9USU1FX1NLRUxFVE9OXCI7XG4gICAgLyoqIEV4ZXBjdCBhIG51bWJlciBza2VsZXRvbiBmb2xsb3dpbmcgdGhlIGA6OmAgKGUuZy4gYHtmb28sIG51bWJlciwgOjp9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX05VTUJFUl9TS0VMRVRPTlwiXSA9IDldID0gXCJFWFBFQ1RfTlVNQkVSX1NLRUxFVE9OXCI7XG4gICAgLyoqIEV4ZXBjdCBhIGRhdGUgdGltZSBza2VsZXRvbiBmb2xsb3dpbmcgdGhlIGA6OmAgKGUuZy4gYHtmb28sIGRhdGUsIDo6fWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9EQVRFX1RJTUVfU0tFTEVUT05cIl0gPSAxMF0gPSBcIkVYUEVDVF9EQVRFX1RJTUVfU0tFTEVUT05cIjtcbiAgICAvKiogVW5tYXRjaGVkIGFwb3N0cm9waGVzIGluIHRoZSBhcmd1bWVudCBzdHlsZSAoZS5nLiBge2ZvbywgbnVtYmVyLCAndGVzdGApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIlVOQ0xPU0VEX1FVT1RFX0lOX0FSR1VNRU5UX1NUWUxFXCJdID0gMTFdID0gXCJVTkNMT1NFRF9RVU9URV9JTl9BUkdVTUVOVF9TVFlMRVwiO1xuICAgIC8qKiBNaXNzaW5nIHNlbGVjdCBhcmd1bWVudCBvcHRpb25zIChlLmcuIGB7Zm9vLCBzZWxlY3R9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX1NFTEVDVF9BUkdVTUVOVF9PUFRJT05TXCJdID0gMTJdID0gXCJFWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX09QVElPTlNcIjtcbiAgICAvKiogRXhwZWN0aW5nIGFuIG9mZnNldCB2YWx1ZSBpbiBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgYXJndW1lbnQgKGUuZyBge2ZvbywgcGx1cmFsLCBvZmZzZXR9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUVcIl0gPSAxM10gPSBcIkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFXCI7XG4gICAgLyoqIE9mZnNldCB2YWx1ZSBpbiBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgaXMgaW52YWxpZCAoZS5nLiBge2ZvbywgcGx1cmFsLCBvZmZzZXQ6IHh9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiSU5WQUxJRF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFXCJdID0gMTRdID0gXCJJTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUVcIjtcbiAgICAvKiogRXhwZWN0aW5nIGEgc2VsZWN0b3IgaW4gYHNlbGVjdGAgYXJndW1lbnQgKGUuZyBge2Zvbywgc2VsZWN0fWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIl0gPSAxNV0gPSBcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKiogRXhwZWN0aW5nIGEgc2VsZWN0b3IgaW4gYHBsdXJhbGAgb3IgYHNlbGVjdG9yZGluYWxgIGFyZ3VtZW50IChlLmcgYHtmb28sIHBsdXJhbH1gKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJFWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SXCJdID0gMTZdID0gXCJFWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SXCI7XG4gICAgLyoqIEV4cGVjdGluZyBhIG1lc3NhZ2UgZnJhZ21lbnQgYWZ0ZXIgdGhlIGBzZWxlY3RgIHNlbGVjdG9yIChlLmcuIGB7Zm9vLCBzZWxlY3QsIGFwcGxlfWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JfRlJBR01FTlRcIl0gPSAxN10gPSBcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JfRlJBR01FTlRcIjtcbiAgICAvKipcbiAgICAgKiBFeHBlY3RpbmcgYSBtZXNzYWdlIGZyYWdtZW50IGFmdGVyIHRoZSBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgc2VsZWN0b3JcbiAgICAgKiAoZS5nLiBge2ZvbywgcGx1cmFsLCBvbmV9YClcbiAgICAgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVFwiXSA9IDE4XSA9IFwiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVFwiO1xuICAgIC8qKiBTZWxlY3RvciBpbiBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgaXMgbWFsZm9ybWVkIChlLmcuIGB7Zm9vLCBwbHVyYWwsID14IHsjfX1gKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJJTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUlwiXSA9IDE5XSA9IFwiSU5WQUxJRF9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKipcbiAgICAgKiBEdXBsaWNhdGUgc2VsZWN0b3JzIGluIGBwbHVyYWxgIG9yIGBzZWxlY3RvcmRpbmFsYCBhcmd1bWVudC5cbiAgICAgKiAoZS5nLiB7Zm9vLCBwbHVyYWwsIG9uZSB7I30gb25lIHsjfX0pXG4gICAgICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkRVUExJQ0FURV9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JcIl0gPSAyMF0gPSBcIkRVUExJQ0FURV9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKiogRHVwbGljYXRlIHNlbGVjdG9ycyBpbiBgc2VsZWN0YCBhcmd1bWVudC5cbiAgICAgKiAoZS5nLiB7Zm9vLCBzZWxlY3QsIGFwcGxlIHthcHBsZX0gYXBwbGUge2FwcGxlfX0pXG4gICAgICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkRVUExJQ0FURV9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIl0gPSAyMV0gPSBcIkRVUExJQ0FURV9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKiogUGx1cmFsIG9yIHNlbGVjdCBhcmd1bWVudCBvcHRpb24gbXVzdCBoYXZlIGBvdGhlcmAgY2xhdXNlLiAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJNSVNTSU5HX09USEVSX0NMQVVTRVwiXSA9IDIyXSA9IFwiTUlTU0lOR19PVEhFUl9DTEFVU0VcIjtcbiAgICAvKiogVGhlIHRhZyBpcyBtYWxmb3JtZWQuIChlLmcuIGA8Ym9sZCE+Zm9vPC9ib2xkIT4pICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIklOVkFMSURfVEFHXCJdID0gMjNdID0gXCJJTlZBTElEX1RBR1wiO1xuICAgIC8qKiBUaGUgdGFnIG5hbWUgaXMgaW52YWxpZC4gKGUuZy4gYDwxMjM+Zm9vPC8xMjM+YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiSU5WQUxJRF9UQUdfTkFNRVwiXSA9IDI1XSA9IFwiSU5WQUxJRF9UQUdfTkFNRVwiO1xuICAgIC8qKiBUaGUgY2xvc2luZyB0YWcgZG9lcyBub3QgbWF0Y2ggdGhlIG9wZW5pbmcgdGFnLiAoZS5nLiBgPGJvbGQ+Zm9vPC9pdGFsaWM+YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiVU5NQVRDSEVEX0NMT1NJTkdfVEFHXCJdID0gMjZdID0gXCJVTk1BVENIRURfQ0xPU0lOR19UQUdcIjtcbiAgICAvKiogVGhlIG9wZW5pbmcgdGFnIGhhcyB1bm1hdGNoZWQgY2xvc2luZyB0YWcuIChlLmcuIGA8Ym9sZD5mb29gKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJVTkNMT1NFRF9UQUdcIl0gPSAyN10gPSBcIlVOQ0xPU0VEX1RBR1wiO1xufSkoRXJyb3JLaW5kIHx8IChFcnJvcktpbmQgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIkVycm9yS2luZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),\n/* harmony export */   _Parser: () => (/* binding */ _Parser),\n/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),\n/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),\n/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),\n/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),\n/* harmony export */   isStructurallySame: () => (/* reexport safe */ _manipulator__WEBPACK_IMPORTED_MODULE_4__.isStructurallySame),\n/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),\n/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _manipulator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./manipulator */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\");\n\n\n\n\nfunction pruneLocation(els) {\n  els.forEach(function (el) {\n    delete el.location;\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {\n      for (var k in el.options) {\n        delete el.options[k].location;\n        pruneLocation(el.options[k].value);\n      }\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {\n      pruneLocation(el.children);\n    }\n  });\n}\nfunction parse(message, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n    shouldParseSkeletons: true,\n    requiresOtherClause: true\n  }, opts);\n  var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();\n  if (result.err) {\n    var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);\n    // @ts-expect-error Assign to error object\n    error.location = result.err.location;\n    // @ts-expect-error Assign to error object\n    error.originalMessage = result.err.message;\n    throw error;\n  }\n  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n    pruneLocation(result.val);\n  }\n  return result.val;\n}\n\n// only for testing\nvar _Parser = _parser__WEBPACK_IMPORTED_MODULE_1__.Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNGO0FBQzZIO0FBQy9KLFNBQVNXLGFBQWFBLENBQUNDLEdBQUcsRUFBRTtFQUN4QkEsR0FBRyxDQUFDQyxPQUFPLENBQUMsVUFBVUMsRUFBRSxFQUFFO0lBQ3RCLE9BQU9BLEVBQUUsQ0FBQ0MsUUFBUTtJQUNsQixJQUFJUCx1REFBZSxDQUFDTSxFQUFFLENBQUMsSUFBSVAsdURBQWUsQ0FBQ08sRUFBRSxDQUFDLEVBQUU7TUFDNUMsS0FBSyxJQUFJRSxDQUFDLElBQUlGLEVBQUUsQ0FBQ0csT0FBTyxFQUFFO1FBQ3RCLE9BQU9ILEVBQUUsQ0FBQ0csT0FBTyxDQUFDRCxDQUFDLENBQUMsQ0FBQ0QsUUFBUTtRQUM3QkosYUFBYSxDQUFDRyxFQUFFLENBQUNHLE9BQU8sQ0FBQ0QsQ0FBQyxDQUFDLENBQUNFLEtBQUssQ0FBQztNQUN0QztJQUNKLENBQUMsTUFDSSxJQUFJYix1REFBZSxDQUFDUyxFQUFFLENBQUMsSUFBSVIsd0RBQWdCLENBQUNRLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7TUFDeEQsT0FBT0wsRUFBRSxDQUFDSyxLQUFLLENBQUNKLFFBQVE7SUFDNUIsQ0FBQyxNQUNJLElBQUksQ0FBQ1oscURBQWEsQ0FBQ1csRUFBRSxDQUFDLElBQUlKLHFEQUFhLENBQUNJLEVBQUUsQ0FBQyxLQUM1Q1YsMERBQWtCLENBQUNVLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7TUFDOUIsT0FBT0wsRUFBRSxDQUFDSyxLQUFLLENBQUNKLFFBQVE7SUFDNUIsQ0FBQyxNQUNJLElBQUlOLG9EQUFZLENBQUNLLEVBQUUsQ0FBQyxFQUFFO01BQ3ZCSCxhQUFhLENBQUNHLEVBQUUsQ0FBQ00sUUFBUSxDQUFDO0lBQzlCO0VBQ0osQ0FBQyxDQUFDO0FBQ047QUFDTyxTQUFTQyxLQUFLQSxDQUFDQyxPQUFPLEVBQUVDLElBQUksRUFBRTtFQUNqQyxJQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7SUFBRUEsSUFBSSxHQUFHLENBQUMsQ0FBQztFQUFFO0VBQ2xDQSxJQUFJLEdBQUd2QiwrQ0FBUSxDQUFDO0lBQUV3QixvQkFBb0IsRUFBRSxJQUFJO0lBQUVDLG1CQUFtQixFQUFFO0VBQUssQ0FBQyxFQUFFRixJQUFJLENBQUM7RUFDaEYsSUFBSUcsTUFBTSxHQUFHLElBQUl4QiwyQ0FBTSxDQUFDb0IsT0FBTyxFQUFFQyxJQUFJLENBQUMsQ0FBQ0YsS0FBSyxDQUFDLENBQUM7RUFDOUMsSUFBSUssTUFBTSxDQUFDQyxHQUFHLEVBQUU7SUFDWixJQUFJQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQzVCLDZDQUFTLENBQUN5QixNQUFNLENBQUNDLEdBQUcsQ0FBQ0csSUFBSSxDQUFDLENBQUM7SUFDbkQ7SUFDQUYsS0FBSyxDQUFDYixRQUFRLEdBQUdXLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDWixRQUFRO0lBQ3BDO0lBQ0FhLEtBQUssQ0FBQ0csZUFBZSxHQUFHTCxNQUFNLENBQUNDLEdBQUcsQ0FBQ0wsT0FBTztJQUMxQyxNQUFNTSxLQUFLO0VBQ2Y7RUFDQSxJQUFJLEVBQUVMLElBQUksS0FBSyxJQUFJLElBQUlBLElBQUksS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsSUFBSSxDQUFDUyxlQUFlLENBQUMsRUFBRTtJQUNyRXJCLGFBQWEsQ0FBQ2UsTUFBTSxDQUFDTyxHQUFHLENBQUM7RUFDN0I7RUFDQSxPQUFPUCxNQUFNLENBQUNPLEdBQUc7QUFDckI7QUFDd0I7QUFDeEI7QUFDTyxJQUFJQyxPQUFPLEdBQUdoQywyQ0FBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRiYWJlLW5leHRqcy1taWdyYXRpb24vLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanM/MzYxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRXJyb3JLaW5kIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgeyBpc0RhdGVFbGVtZW50LCBpc0RhdGVUaW1lU2tlbGV0b24sIGlzTnVtYmVyRWxlbWVudCwgaXNOdW1iZXJTa2VsZXRvbiwgaXNQbHVyYWxFbGVtZW50LCBpc1NlbGVjdEVsZW1lbnQsIGlzVGFnRWxlbWVudCwgaXNUaW1lRWxlbWVudCwgfSBmcm9tICcuL3R5cGVzJztcbmZ1bmN0aW9uIHBydW5lTG9jYXRpb24oZWxzKSB7XG4gICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGRlbGV0ZSBlbC5sb2NhdGlvbjtcbiAgICAgICAgaWYgKGlzU2VsZWN0RWxlbWVudChlbCkgfHwgaXNQbHVyYWxFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBlbC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVsLm9wdGlvbnNba10ubG9jYXRpb247XG4gICAgICAgICAgICAgICAgcHJ1bmVMb2NhdGlvbihlbC5vcHRpb25zW2tdLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bWJlckVsZW1lbnQoZWwpICYmIGlzTnVtYmVyU2tlbGV0b24oZWwuc3R5bGUpKSB7XG4gICAgICAgICAgICBkZWxldGUgZWwuc3R5bGUubG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGlzRGF0ZUVsZW1lbnQoZWwpIHx8IGlzVGltZUVsZW1lbnQoZWwpKSAmJlxuICAgICAgICAgICAgaXNEYXRlVGltZVNrZWxldG9uKGVsLnN0eWxlKSkge1xuICAgICAgICAgICAgZGVsZXRlIGVsLnN0eWxlLmxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVGFnRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHBydW5lTG9jYXRpb24oZWwuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2UobWVzc2FnZSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IHt9OyB9XG4gICAgb3B0cyA9IF9fYXNzaWduKHsgc2hvdWxkUGFyc2VTa2VsZXRvbnM6IHRydWUsIHJlcXVpcmVzT3RoZXJDbGF1c2U6IHRydWUgfSwgb3B0cyk7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBQYXJzZXIobWVzc2FnZSwgb3B0cykucGFyc2UoKTtcbiAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICB2YXIgZXJyb3IgPSBTeW50YXhFcnJvcihFcnJvcktpbmRbcmVzdWx0LmVyci5raW5kXSk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgQXNzaWduIHRvIGVycm9yIG9iamVjdFxuICAgICAgICBlcnJvci5sb2NhdGlvbiA9IHJlc3VsdC5lcnIubG9jYXRpb247XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgQXNzaWduIHRvIGVycm9yIG9iamVjdFxuICAgICAgICBlcnJvci5vcmlnaW5hbE1lc3NhZ2UgPSByZXN1bHQuZXJyLm1lc3NhZ2U7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAoIShvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuY2FwdHVyZUxvY2F0aW9uKSkge1xuICAgICAgICBwcnVuZUxvY2F0aW9uKHJlc3VsdC52YWwpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnZhbDtcbn1cbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuLy8gb25seSBmb3IgdGVzdGluZ1xuZXhwb3J0IHZhciBfUGFyc2VyID0gUGFyc2VyO1xuZXhwb3J0IHsgaXNTdHJ1Y3R1cmFsbHlTYW1lIH0gZnJvbSAnLi9tYW5pcHVsYXRvcic7XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJFcnJvcktpbmQiLCJQYXJzZXIiLCJpc0RhdGVFbGVtZW50IiwiaXNEYXRlVGltZVNrZWxldG9uIiwiaXNOdW1iZXJFbGVtZW50IiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzUGx1cmFsRWxlbWVudCIsImlzU2VsZWN0RWxlbWVudCIsImlzVGFnRWxlbWVudCIsImlzVGltZUVsZW1lbnQiLCJwcnVuZUxvY2F0aW9uIiwiZWxzIiwiZm9yRWFjaCIsImVsIiwibG9jYXRpb24iLCJrIiwib3B0aW9ucyIsInZhbHVlIiwic3R5bGUiLCJjaGlsZHJlbiIsInBhcnNlIiwibWVzc2FnZSIsIm9wdHMiLCJzaG91bGRQYXJzZVNrZWxldG9ucyIsInJlcXVpcmVzT3RoZXJDbGF1c2UiLCJyZXN1bHQiLCJlcnIiLCJlcnJvciIsIlN5bnRheEVycm9yIiwia2luZCIsIm9yaWdpbmFsTWVzc2FnZSIsImNhcHR1cmVMb2NhdGlvbiIsInZhbCIsIl9QYXJzZXIiLCJpc1N0cnVjdHVyYWxseVNhbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hoistSelectors: () => (/* binding */ hoistSelectors),\n/* harmony export */   isStructurallySame: () => (/* binding */ isStructurallySame)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n\n\nfunction cloneDeep(obj) {\n  if (Array.isArray(obj)) {\n    // @ts-expect-error meh\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], obj.map(cloneDeep), true);\n  }\n  if (obj !== null && typeof obj === 'object') {\n    // @ts-expect-error meh\n    return Object.keys(obj).reduce(function (cloned, k) {\n      // @ts-expect-error meh\n      cloned[k] = cloneDeep(obj[k]);\n      return cloned;\n    }, {});\n  }\n  return obj;\n}\nfunction hoistPluralOrSelectElement(ast, el, positionToInject) {\n  // pull this out of the ast and move it to the top\n  var cloned = cloneDeep(el);\n  var options = cloned.options;\n  cloned.options = Object.keys(options).reduce(function (all, k) {\n    var newValue = hoistSelectors((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], ast.slice(0, positionToInject), true), options[k].value, true), ast.slice(positionToInject + 1), true));\n    all[k] = {\n      value: newValue\n    };\n    return all;\n  }, {});\n  return cloned;\n}\nfunction isPluralOrSelectElement(el) {\n  return (0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el);\n}\nfunction findPluralOrSelectElement(ast) {\n  return !!ast.find(function (el) {\n    if (isPluralOrSelectElement(el)) {\n      return true;\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      return findPluralOrSelectElement(el.children);\n    }\n    return false;\n  });\n}\n/**\n * Hoist all selectors to the beginning of the AST & flatten the\n * resulting options. E.g:\n * \"I have {count, plural, one{a dog} other{many dogs}}\"\n * becomes \"{count, plural, one{I have a dog} other{I have many dogs}}\".\n * If there are multiple selectors, the order of which one is hoisted 1st\n * is non-deterministic.\n * The goal is to provide as many full sentences as possible since fragmented\n * sentences are not translator-friendly\n * @param ast AST\n */\nfunction hoistSelectors(ast) {\n  for (var i = 0; i < ast.length; i++) {\n    var el = ast[i];\n    if (isPluralOrSelectElement(el)) {\n      return [hoistPluralOrSelectElement(ast, el, i)];\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el) && findPluralOrSelectElement([el])) {\n      throw new Error('Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option');\n    }\n  }\n  return ast;\n}\n/**\n * Collect all variables in an AST to Record<string, TYPE>\n * @param ast AST to collect variables from\n * @param vars Record of variable name to variable type\n */\nfunction collectVariables(ast, vars) {\n  if (vars === void 0) {\n    vars = new Map();\n  }\n  ast.forEach(function (el) {\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      if (el.value in vars && vars.get(el.value) !== el.type) {\n        throw new Error(\"Variable \".concat(el.value, \" has conflicting types\"));\n      }\n      vars.set(el.value, el.type);\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      vars.set(el.value, el.type);\n      Object.keys(el.options).forEach(function (k) {\n        collectVariables(el.options[k].value, vars);\n      });\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      vars.set(el.value, el.type);\n      collectVariables(el.children, vars);\n    }\n  });\n}\n/**\n * Check if 2 ASTs are structurally the same. This primarily means that\n * they have the same variables with the same type\n * @param a\n * @param b\n * @returns\n */\nfunction isStructurallySame(a, b) {\n  var aVars = new Map();\n  var bVars = new Map();\n  collectVariables(a, aVars);\n  collectVariables(b, bVars);\n  if (aVars.size !== bVars.size) {\n    return {\n      success: false,\n      error: new Error(\"Different number of variables: [\".concat(Array.from(aVars.keys()).join(', '), \"] vs [\").concat(Array.from(bVars.keys()).join(', '), \"]\"))\n    };\n  }\n  return Array.from(aVars.entries()).reduce(function (result, _a) {\n    var key = _a[0],\n      type = _a[1];\n    if (!result.success) {\n      return result;\n    }\n    var bType = bVars.get(key);\n    if (bType == null) {\n      return {\n        success: false,\n        error: new Error(\"Missing variable \".concat(key, \" in message\"))\n      };\n    }\n    if (bType !== type) {\n      return {\n        success: false,\n        error: new Error(\"Variable \".concat(key, \" has conflicting types: \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[type], \" vs \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[bType]))\n      };\n    }\n    return result;\n  }, {\n    success: true\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\");\n/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\");\n/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\");\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith && '_a'.startsWith('a', 1);\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function (n) {\n  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n};\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n  var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  /**\n   * legacy Edge or Xbox One browser\n   * Unicode flag support: supported\n   * Pattern_Syntax support: not supported\n   * See https://github.com/formatjs/formatjs/issues/2822\n   */\n  REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n} catch (_) {\n  REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith ?\n// Native\nfunction startsWith(s, search, position) {\n  return s.startsWith(search, position);\n} :\n// For IE11\nfunction startsWith(s, search, position) {\n  return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint :\n// IE11\nfunction fromCodePoint() {\n  var codePoints = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    codePoints[_i] = arguments[_i];\n  }\n  var elements = '';\n  var length = codePoints.length;\n  var i = 0;\n  var code;\n  while (length > i) {\n    code = codePoints[i++];\n    if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');\n    elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n  }\n  return elements;\n};\nvar fromEntries =\n// native\nhasNativeFromEntries ? Object.fromEntries :\n// Ponyfill\nfunction fromEntries(entries) {\n  var obj = {};\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a = entries_1[_i],\n      k = _a[0],\n      v = _a[1];\n    obj[k] = v;\n  }\n  return obj;\n};\nvar codePointAt = hasNativeCodePointAt ?\n// Native\nfunction codePointAt(s, index) {\n  return s.codePointAt(index);\n} :\n// IE 11\nfunction codePointAt(s, index) {\n  var size = s.length;\n  if (index < 0 || index >= size) {\n    return undefined;\n  }\n  var first = s.charCodeAt(index);\n  var second;\n  return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ?\n// Native\nfunction trimStart(s) {\n  return s.trimStart();\n} :\n// Ponyfill\nfunction trimStart(s) {\n  return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n};\nvar trimEnd = hasTrimEnd ?\n// Native\nfunction trimEnd(s) {\n  return s.trimEnd();\n} :\n// Ponyfill\nfunction trimEnd(s) {\n  return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n};\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n  return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n  // Native\n  var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var _a;\n    IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n    var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n    return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n  };\n} else {\n  // IE11\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var match = [];\n    while (true) {\n      var c = codePointAt(s, index);\n      if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n        break;\n      }\n      match.push(c);\n      index += c >= 0x10000 ? 2 : 1;\n    }\n    return fromCodePoint.apply(void 0, match);\n  };\n}\nvar Parser = /** @class */function () {\n  function Parser(message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.message = message;\n    this.position = {\n      offset: 0,\n      line: 1,\n      column: 1\n    };\n    this.ignoreTag = !!options.ignoreTag;\n    this.locale = options.locale;\n    this.requiresOtherClause = !!options.requiresOtherClause;\n    this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n  }\n  Parser.prototype.parse = function () {\n    if (this.offset() !== 0) {\n      throw Error('parser can only be used once');\n    }\n    return this.parseMessage(0, '', false);\n  };\n  Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n    var elements = [];\n    while (!this.isEOF()) {\n      var char = this.char();\n      if (char === 123 /* `{` */) {\n        var result = this.parseArgument(nestingLevel, expectingCloseTag);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else if (char === 125 /* `}` */ && nestingLevel > 0) {\n        break;\n      } else if (char === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n        var position = this.clonePosition();\n        this.bump();\n        elements.push({\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,\n          location: createLocation(position, this.clonePosition())\n        });\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && this.peek() === 47 // char code for '/'\n      ) {\n        if (expectingCloseTag) {\n          break;\n        } else {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n        var result = this.parseTag(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else {\n        var result = this.parseLiteral(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      }\n    }\n    return {\n      val: elements,\n      err: null\n    };\n  };\n  /**\n   * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n   * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n   * are accepted:\n   *\n   * ```\n   * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n   * tagName ::= [a-z] (PENChar)*\n   * PENChar ::=\n   *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n   *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n   *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n   * ```\n   *\n   * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n   * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n   * since other tag-based engines like React allow it\n   */\n  Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n    var startPosition = this.clonePosition();\n    this.bump(); // `<`\n    var tagName = this.parseTagName();\n    this.bumpSpace();\n    if (this.bumpIf('/>')) {\n      // Self closing tag\n      return {\n        val: {\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n          value: \"<\".concat(tagName, \"/>\"),\n          location: createLocation(startPosition, this.clonePosition())\n        },\n        err: null\n      };\n    } else if (this.bumpIf('>')) {\n      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n      if (childrenResult.err) {\n        return childrenResult;\n      }\n      var children = childrenResult.val;\n      // Expecting a close tag\n      var endTagStartPosition = this.clonePosition();\n      if (this.bumpIf('</')) {\n        if (this.isEOF() || !_isAlpha(this.char())) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        var closingTagNameStartPosition = this.clonePosition();\n        var closingTagName = this.parseTagName();\n        if (tagName !== closingTagName) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (!this.bumpIf('>')) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        return {\n          val: {\n            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,\n            value: tagName,\n            children: children,\n            location: createLocation(startPosition, this.clonePosition())\n          },\n          err: null\n        };\n      } else {\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n      }\n    } else {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n    }\n  };\n  /**\n   * This method assumes that the caller has peeked ahead for the first tag character.\n   */\n  Parser.prototype.parseTagName = function () {\n    var startOffset = this.offset();\n    this.bump(); // the first tag name character\n    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n      this.bump();\n    }\n    return this.message.slice(startOffset, this.offset());\n  };\n  Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n    var start = this.clonePosition();\n    var value = '';\n    while (true) {\n      var parseQuoteResult = this.tryParseQuote(parentArgType);\n      if (parseQuoteResult) {\n        value += parseQuoteResult;\n        continue;\n      }\n      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n      if (parseUnquotedResult) {\n        value += parseUnquotedResult;\n        continue;\n      }\n      var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n      if (parseLeftAngleResult) {\n        value += parseLeftAngleResult;\n        continue;\n      }\n      break;\n    }\n    var location = createLocation(start, this.clonePosition());\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n        value: value,\n        location: location\n      },\n      err: null\n    };\n  };\n  Parser.prototype.tryParseLeftAngleBracket = function () {\n    if (!this.isEOF() && this.char() === 60 /* `<` */ && (this.ignoreTag ||\n    // If at the opening tag or closing tag position, bail.\n    !_isAlphaOrSlash(this.peek() || 0))) {\n      this.bump(); // `<`\n      return '<';\n    }\n    return null;\n  };\n  /**\n   * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n   * a character that requires quoting (that is, \"only where needed\"), and works the same in\n   * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n   */\n  Parser.prototype.tryParseQuote = function (parentArgType) {\n    if (this.isEOF() || this.char() !== 39 /* `'` */) {\n      return null;\n    }\n    // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n    // Check if is valid escaped character\n    switch (this.peek()) {\n      case 39 /* `'` */:\n        // double quote, should return as a single quote.\n        this.bump();\n        this.bump();\n        return \"'\";\n      // '{', '<', '>', '}'\n      case 123:\n      case 60:\n      case 62:\n      case 125:\n        break;\n      case 35:\n        // '#'\n        if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n          break;\n        }\n        return null;\n      default:\n        return null;\n    }\n    this.bump(); // apostrophe\n    var codePoints = [this.char()]; // escaped char\n    this.bump();\n    // read chars until the optional closing apostrophe is found\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch === 39 /* `'` */) {\n        if (this.peek() === 39 /* `'` */) {\n          codePoints.push(39);\n          // Bump one more time because we need to skip 2 characters.\n          this.bump();\n        } else {\n          // Optional closing apostrophe.\n          this.bump();\n          break;\n        }\n      } else {\n        codePoints.push(ch);\n      }\n      this.bump();\n    }\n    return fromCodePoint.apply(void 0, codePoints);\n  };\n  Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n    if (this.isEOF()) {\n      return null;\n    }\n    var ch = this.char();\n    if (ch === 60 /* `<` */ || ch === 123 /* `{` */ || ch === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125 /* `}` */ && nestingLevel > 0) {\n      return null;\n    } else {\n      this.bump();\n      return fromCodePoint(ch);\n    }\n  };\n  Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n    var openingBracePosition = this.clonePosition();\n    this.bump(); // `{`\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    if (this.char() === 125 /* `}` */) {\n      this.bump();\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    // argument name\n    var value = this.parseIdentifierIfPossible().value;\n    if (!value) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    switch (this.char()) {\n      // Simple argument: `{name}`\n      case 125 /* `}` */:\n        {\n          this.bump(); // `}`\n          return {\n            val: {\n              type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,\n              // value does not include the opening and closing braces.\n              value: value,\n              location: createLocation(openingBracePosition, this.clonePosition())\n            },\n            err: null\n          };\n        }\n      // Argument with options: `{name, format, ...}`\n      case 44 /* `,` */:\n        {\n          this.bump(); // `,`\n          this.bumpSpace();\n          if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n          }\n          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n  };\n  /**\n   * Advance the parser until the end of the identifier, if it is currently on\n   * an identifier character. Return an empty string otherwise.\n   */\n  Parser.prototype.parseIdentifierIfPossible = function () {\n    var startingPosition = this.clonePosition();\n    var startOffset = this.offset();\n    var value = matchIdentifierAtIndex(this.message, startOffset);\n    var endOffset = startOffset + value.length;\n    this.bumpTo(endOffset);\n    var endPosition = this.clonePosition();\n    var location = createLocation(startingPosition, endPosition);\n    return {\n      value: value,\n      location: location\n    };\n  };\n  Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n    var _a;\n    // Parse this range:\n    // {name, type, style}\n    //        ^---^\n    var typeStartPosition = this.clonePosition();\n    var argType = this.parseIdentifierIfPossible().value;\n    var typeEndPosition = this.clonePosition();\n    switch (argType) {\n      case '':\n        // Expecting a style string number, date, time, plural, selectordinal, or select.\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n      case 'number':\n      case 'date':\n      case 'time':\n        {\n          // Parse this range:\n          // {name, number, style}\n          //              ^-------^\n          this.bumpSpace();\n          var styleAndLocation = null;\n          if (this.bumpIf(',')) {\n            this.bumpSpace();\n            var styleStartPosition = this.clonePosition();\n            var result = this.parseSimpleArgStyleIfPossible();\n            if (result.err) {\n              return result;\n            }\n            var style = trimEnd(result.val);\n            if (style.length === 0) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n            styleAndLocation = {\n              style: style,\n              styleLocation: styleLocation\n            };\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_1 = createLocation(openingBracePosition, this.clonePosition());\n          // Extract style or skeleton\n          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n            // Skeleton starts with `::`.\n            var skeleton = trimStart(styleAndLocation.style.slice(2));\n            if (argType === 'number') {\n              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n              if (result.err) {\n                return result;\n              }\n              return {\n                val: {\n                  type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number,\n                  value: value,\n                  location: location_1,\n                  style: result.val\n                },\n                err: null\n              };\n            } else {\n              if (skeleton.length === 0) {\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n              }\n              var dateTimePattern = skeleton;\n              // Get \"best match\" pattern only if locale is passed, if not, let it\n              // pass as-is where `parseDateTimeSkeleton()` will throw an error\n              // for unsupported patterns.\n              if (this.locale) {\n                dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);\n              }\n              var style = {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,\n                pattern: dateTimePattern,\n                location: styleAndLocation.styleLocation,\n                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern) : {}\n              };\n              var type = argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;\n              return {\n                val: {\n                  type: type,\n                  value: value,\n                  location: location_1,\n                  style: style\n                },\n                err: null\n              };\n            }\n          }\n          // Regular style or no style.\n          return {\n            val: {\n              type: argType === 'number' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number : argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,\n              value: value,\n              location: location_1,\n              style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n            },\n            err: null\n          };\n        }\n      case 'plural':\n      case 'selectordinal':\n      case 'select':\n        {\n          // Parse this range:\n          // {name, plural, options}\n          //              ^---------^\n          var typeEndPosition_1 = this.clonePosition();\n          this.bumpSpace();\n          if (!this.bumpIf(',')) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));\n          }\n          this.bumpSpace();\n          // Parse offset:\n          // {name, plural, offset:1, options}\n          //                ^-----^\n          //\n          // or the first option:\n          //\n          // {name, plural, one {...} other {...}}\n          //                ^--^\n          var identifierAndLocation = this.parseIdentifierIfPossible();\n          var pluralOffset = 0;\n          if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n            if (!this.bumpIf(':')) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            this.bumpSpace();\n            var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n            if (result.err) {\n              return result;\n            }\n            // Parse another identifier for option parsing\n            this.bumpSpace();\n            identifierAndLocation = this.parseIdentifierIfPossible();\n            pluralOffset = result.val;\n          }\n          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n          if (optionsResult.err) {\n            return optionsResult;\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_2 = createLocation(openingBracePosition, this.clonePosition());\n          if (argType === 'select') {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                location: location_2\n              },\n              err: null\n            };\n          } else {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                offset: pluralOffset,\n                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                location: location_2\n              },\n              err: null\n            };\n          }\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n    }\n  };\n  Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n    // Parse: {value, number, ::currency/GBP }\n    //\n    if (this.isEOF() || this.char() !== 125 /* `}` */) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bump(); // `}`\n    return {\n      val: true,\n      err: null\n    };\n  };\n  /**\n   * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n   */\n  Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n    var nestedBraces = 0;\n    var startPosition = this.clonePosition();\n    while (!this.isEOF()) {\n      var ch = this.char();\n      switch (ch) {\n        case 39 /* `'` */:\n          {\n            // Treat apostrophe as quoting but include it in the style part.\n            // Find the end of the quoted literal text.\n            this.bump();\n            var apostrophePosition = this.clonePosition();\n            if (!this.bumpUntil(\"'\")) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n            }\n            this.bump();\n            break;\n          }\n        case 123 /* `{` */:\n          {\n            nestedBraces += 1;\n            this.bump();\n            break;\n          }\n        case 125 /* `}` */:\n          {\n            if (nestedBraces > 0) {\n              nestedBraces -= 1;\n            } else {\n              return {\n                val: this.message.slice(startPosition.offset, this.offset()),\n                err: null\n              };\n            }\n            break;\n          }\n        default:\n          this.bump();\n          break;\n      }\n    }\n    return {\n      val: this.message.slice(startPosition.offset, this.offset()),\n      err: null\n    };\n  };\n  Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n    var tokens = [];\n    try {\n      tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);\n    } catch (e) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);\n    }\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,\n        tokens: tokens,\n        location: location,\n        parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens) : {}\n      },\n      err: null\n    };\n  };\n  /**\n   * @param nesting_level The current nesting level of messages.\n   *     This can be positive when parsing message fragment in select or plural argument options.\n   * @param parent_arg_type The parent argument's type.\n   * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n   *     the argument. It is a by-product of a previous parsing attempt.\n   * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n   *     between a pair of opening and closing tags. The nested message will not parse beyond\n   *     the closing tag boundary.\n   */\n  Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n    var _a;\n    var hasOtherClause = false;\n    var options = [];\n    var parsedSelectors = new Set();\n    var selector = parsedFirstIdentifier.value,\n      selectorLocation = parsedFirstIdentifier.location;\n    // Parse:\n    // one {one apple}\n    // ^--^\n    while (true) {\n      if (selector.length === 0) {\n        var startPosition = this.clonePosition();\n        if (parentArgType !== 'select' && this.bumpIf('=')) {\n          // Try parse `={number}` selector\n          var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n          if (result.err) {\n            return result;\n          }\n          selectorLocation = createLocation(startPosition, this.clonePosition());\n          selector = this.message.slice(startPosition.offset, this.offset());\n        } else {\n          break;\n        }\n      }\n      // Duplicate selector clauses\n      if (parsedSelectors.has(selector)) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n      }\n      if (selector === 'other') {\n        hasOtherClause = true;\n      }\n      // Parse:\n      // one {one apple}\n      //     ^----------^\n      this.bumpSpace();\n      var openingBracePosition = this.clonePosition();\n      if (!this.bumpIf('{')) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n      }\n      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n      if (fragmentResult.err) {\n        return fragmentResult;\n      }\n      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n      if (argCloseResult.err) {\n        return argCloseResult;\n      }\n      options.push([selector, {\n        value: fragmentResult.val,\n        location: createLocation(openingBracePosition, this.clonePosition())\n      }]);\n      // Keep track of the existing selectors\n      parsedSelectors.add(selector);\n      // Prep next selector clause.\n      this.bumpSpace();\n      _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n    }\n    if (options.length === 0) {\n      return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    if (this.requiresOtherClause && !hasOtherClause) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    return {\n      val: options,\n      err: null\n    };\n  };\n  Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n    var sign = 1;\n    var startingPosition = this.clonePosition();\n    if (this.bumpIf('+')) {} else if (this.bumpIf('-')) {\n      sign = -1;\n    }\n    var hasDigits = false;\n    var decimal = 0;\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n        hasDigits = true;\n        decimal = decimal * 10 + (ch - 48);\n        this.bump();\n      } else {\n        break;\n      }\n    }\n    var location = createLocation(startingPosition, this.clonePosition());\n    if (!hasDigits) {\n      return this.error(expectNumberError, location);\n    }\n    decimal *= sign;\n    if (!isSafeInteger(decimal)) {\n      return this.error(invalidNumberError, location);\n    }\n    return {\n      val: decimal,\n      err: null\n    };\n  };\n  Parser.prototype.offset = function () {\n    return this.position.offset;\n  };\n  Parser.prototype.isEOF = function () {\n    return this.offset() === this.message.length;\n  };\n  Parser.prototype.clonePosition = function () {\n    // This is much faster than `Object.assign` or spread.\n    return {\n      offset: this.position.offset,\n      line: this.position.line,\n      column: this.position.column\n    };\n  };\n  /**\n   * Return the code point at the current position of the parser.\n   * Throws if the index is out of bound.\n   */\n  Parser.prototype.char = function () {\n    var offset = this.position.offset;\n    if (offset >= this.message.length) {\n      throw Error('out of bound');\n    }\n    var code = codePointAt(this.message, offset);\n    if (code === undefined) {\n      throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n    }\n    return code;\n  };\n  Parser.prototype.error = function (kind, location) {\n    return {\n      val: null,\n      err: {\n        kind: kind,\n        message: this.message,\n        location: location\n      }\n    };\n  };\n  /** Bump the parser to the next UTF-16 code unit. */\n  Parser.prototype.bump = function () {\n    if (this.isEOF()) {\n      return;\n    }\n    var code = this.char();\n    if (code === 10 /* '\\n' */) {\n      this.position.line += 1;\n      this.position.column = 1;\n      this.position.offset += 1;\n    } else {\n      this.position.column += 1;\n      // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n      this.position.offset += code < 0x10000 ? 1 : 2;\n    }\n  };\n  /**\n   * If the substring starting at the current position of the parser has\n   * the given prefix, then bump the parser to the character immediately\n   * following the prefix and return true. Otherwise, don't bump the parser\n   * and return false.\n   */\n  Parser.prototype.bumpIf = function (prefix) {\n    if (startsWith(this.message, prefix, this.offset())) {\n      for (var i = 0; i < prefix.length; i++) {\n        this.bump();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Bump the parser until the pattern character is found and return `true`.\n   * Otherwise bump to the end of the file and return `false`.\n   */\n  Parser.prototype.bumpUntil = function (pattern) {\n    var currentOffset = this.offset();\n    var index = this.message.indexOf(pattern, currentOffset);\n    if (index >= 0) {\n      this.bumpTo(index);\n      return true;\n    } else {\n      this.bumpTo(this.message.length);\n      return false;\n    }\n  };\n  /**\n   * Bump the parser to the target offset.\n   * If target offset is beyond the end of the input, bump the parser to the end of the input.\n   */\n  Parser.prototype.bumpTo = function (targetOffset) {\n    if (this.offset() > targetOffset) {\n      throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n    }\n    targetOffset = Math.min(targetOffset, this.message.length);\n    while (true) {\n      var offset = this.offset();\n      if (offset === targetOffset) {\n        break;\n      }\n      if (offset > targetOffset) {\n        throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n      }\n      this.bump();\n      if (this.isEOF()) {\n        break;\n      }\n    }\n  };\n  /** advance the parser through all whitespace to the next non-whitespace code unit. */\n  Parser.prototype.bumpSpace = function () {\n    while (!this.isEOF() && _isWhiteSpace(this.char())) {\n      this.bump();\n    }\n  };\n  /**\n   * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n   * If the input has been exhausted, then this returns null.\n   */\n  Parser.prototype.peek = function () {\n    if (this.isEOF()) {\n      return null;\n    }\n    var code = this.char();\n    var offset = this.offset();\n    var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n    return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n  };\n  return Parser;\n}();\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\nfunction _isAlphaOrSlash(codepoint) {\n  return _isAlpha(codepoint) || codepoint === 47; /* '/' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n  return c === 45 /* '-' */ || c === 46 /* '.' */ || c >= 48 && c <= 57 /* 0..9 */ || c === 95 /* '_' */ || c >= 97 && c <= 122 /** a..z */ || c >= 65 && c <= 90 /* A..Z */ || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n  return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n  return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxFQUFFO0FBQzJCO0FBQ0c7QUFDVztBQUNXO0FBQ2lFO0FBQzVEO0FBQy9ELElBQUlVLDJCQUEyQixHQUFHLElBQUlDLE1BQU0sQ0FBQyxHQUFHLENBQUNDLE1BQU0sQ0FBQ1AsbUVBQXFCLENBQUNRLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMzRixJQUFJQyx5QkFBeUIsR0FBRyxJQUFJSCxNQUFNLENBQUMsRUFBRSxDQUFDQyxNQUFNLENBQUNQLG1FQUFxQixDQUFDUSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekYsU0FBU0UsY0FBY0EsQ0FBQ0MsS0FBSyxFQUFFQyxHQUFHLEVBQUU7RUFDaEMsT0FBTztJQUFFRCxLQUFLLEVBQUVBLEtBQUs7SUFBRUMsR0FBRyxFQUFFQTtFQUFJLENBQUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsVUFBVSxJQUFJLElBQUksQ0FBQ0EsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDbEYsSUFBSUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDSCxNQUFNLENBQUNJLGFBQWE7QUFDbkQsSUFBSUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDQyxNQUFNLENBQUNDLFdBQVc7QUFDL0MsSUFBSUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDUixNQUFNLENBQUNDLFNBQVMsQ0FBQ1EsV0FBVztBQUN6RCxJQUFJQyxZQUFZLEdBQUcsQ0FBQyxDQUFDVixNQUFNLENBQUNDLFNBQVMsQ0FBQ1UsU0FBUztBQUMvQyxJQUFJQyxVQUFVLEdBQUcsQ0FBQyxDQUFDWixNQUFNLENBQUNDLFNBQVMsQ0FBQ1ksT0FBTztBQUMzQyxJQUFJQyxzQkFBc0IsR0FBRyxD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TSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9wYXJzZXIuanM/ZTdiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2E7XG5pbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRXJyb3JLaW5kIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBTS0VMRVRPTl9UWVBFLCBUWVBFLCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU1BBQ0VfU0VQQVJBVE9SX1JFR0VYIH0gZnJvbSAnLi9yZWdleC5nZW5lcmF0ZWQnO1xuaW1wb3J0IHsgcGFyc2VOdW1iZXJTa2VsZXRvbiwgcGFyc2VOdW1iZXJTa2VsZXRvbkZyb21TdHJpbmcsIHBhcnNlRGF0ZVRpbWVTa2VsZXRvbiwgfSBmcm9tICdAZm9ybWF0anMvaWN1LXNrZWxldG9uLXBhcnNlcic7XG5pbXBvcnQgeyBnZXRCZXN0UGF0dGVybiB9IGZyb20gJy4vZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yJztcbnZhciBTUEFDRV9TRVBBUkFUT1JfU1RBUlRfUkVHRVggPSBuZXcgUmVnRXhwKFwiXlwiLmNvbmNhdChTUEFDRV9TRVBBUkFUT1JfUkVHRVguc291cmNlLCBcIipcIikpO1xudmFyIFNQQUNFX1NFUEFSQVRPUl9FTkRfUkVHRVggPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KFNQQUNFX1NFUEFSQVRPUl9SRUdFWC5zb3VyY2UsIFwiKiRcIikpO1xuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbn1cbi8vICNyZWdpb24gUG9ueWZpbGxzXG4vLyBDb25zb2xpZGF0ZSB0aGVzZSB2YXJpYWJsZXMgdXAgdG9wIGZvciBlYXNpZXIgdG9nZ2xpbmcgZHVyaW5nIGRlYnVnZ2luZ1xudmFyIGhhc05hdGl2ZVN0YXJ0c1dpdGggPSAhIVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCAmJiAnX2EnLnN0YXJ0c1dpdGgoJ2EnLCAxKTtcbnZhciBoYXNOYXRpdmVGcm9tQ29kZVBvaW50ID0gISFTdHJpbmcuZnJvbUNvZGVQb2ludDtcbnZhciBoYXNOYXRpdmVGcm9tRW50cmllcyA9ICEhT2JqZWN0LmZyb21FbnRyaWVzO1xudmFyIGhhc05hdGl2ZUNvZGVQb2ludEF0ID0gISFTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0O1xudmFyIGhhc1RyaW1TdGFydCA9ICEhU3RyaW5nLnByb3RvdHlwZS50cmltU3RhcnQ7XG52YXIgaGFzVHJpbUVuZCA9ICEhU3RyaW5nLnByb3RvdHlwZS50cmltRW5kO1xudmFyIGhhc05hdGl2ZUlzU2FmZUludGVnZXIgPSAhIU51bWJlci5pc1NhZmVJbnRlZ2VyO1xudmFyIGlzU2FmZUludGVnZXIgPSBoYXNOYXRpdmVJc1NhZmVJbnRlZ2VyXG4gICAgPyBOdW1iZXIuaXNTYWZlSW50ZWdlclxuICAgIDogZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgbiA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgIGlzRmluaXRlKG4pICYmXG4gICAgICAgICAgICBNYXRoLmZsb29yKG4pID09PSBuICYmXG4gICAgICAgICAgICBNYXRoLmFicyhuKSA8PSAweDFmZmZmZmZmZmZmZmZmKTtcbiAgICB9O1xuLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHkgYW5kIHUuXG52YXIgUkVHRVhfU1VQUE9SVFNfVV9BTkRfWSA9IHRydWU7XG50cnkge1xuICAgIHZhciByZSA9IFJFKCcoW15cXFxccHtXaGl0ZV9TcGFjZX1cXFxccHtQYXR0ZXJuX1N5bnRheH1dKiknLCAneXUnKTtcbiAgICAvKipcbiAgICAgKiBsZWdhY3kgRWRnZSBvciBYYm94IE9uZSBicm93c2VyXG4gICAgICogVW5pY29kZSBmbGFnIHN1cHBvcnQ6IHN1cHBvcnRlZFxuICAgICAqIFBhdHRlcm5fU3ludGF4IHN1cHBvcnQ6IG5vdCBzdXBwb3J0ZWRcbiAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2Zvcm1hdGpzL2Zvcm1hdGpzL2lzc3Vlcy8yODIyXG4gICAgICovXG4gICAgUkVHRVhfU1VQUE9SVFNfVV9BTkRfWSA9ICgoX2EgPSByZS5leGVjKCdhJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXSkgPT09ICdhJztcbn1cbmNhdGNoIChfKSB7XG4gICAgUkVHRVhfU1VQUE9SVFNfVV9BTkRfWSA9IGZhbHNlO1xufVxudmFyIHN0YXJ0c1dpdGggPSBoYXNOYXRpdmVTdGFydHNXaXRoXG4gICAgPyAvLyBOYXRpdmVcbiAgICAgICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzLCBzZWFyY2gsIHBvc2l0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5zdGFydHNXaXRoKHNlYXJjaCwgcG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgOiAvLyBGb3IgSUUxMVxuICAgICAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHMsIHNlYXJjaCwgcG9zaXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBzLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gICAgICAgIH07XG52YXIgZnJvbUNvZGVQb2ludCA9IGhhc05hdGl2ZUZyb21Db2RlUG9pbnRcbiAgICA/IFN0cmluZy5mcm9tQ29kZVBvaW50XG4gICAgOiAvLyBJRTExXG4gICAgICAgIGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoKSB7XG4gICAgICAgICAgICB2YXIgY29kZVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSAnJztcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBjb2RlO1xuICAgICAgICAgICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZVBvaW50c1tpKytdO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID4gMHgxMGZmZmYpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzICs9XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPCAweDEwMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCAoY29kZSAlIDB4NDAwKSArIDB4ZGMwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH07XG52YXIgZnJvbUVudHJpZXMgPSBcbi8vIG5hdGl2ZVxuaGFzTmF0aXZlRnJvbUVudHJpZXNcbiAgICA/IE9iamVjdC5mcm9tRW50cmllc1xuICAgIDogLy8gUG9ueWZpbGxcbiAgICAgICAgZnVuY3Rpb24gZnJvbUVudHJpZXMoZW50cmllcykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBlbnRyaWVzXzFbX2ldLCBrID0gX2FbMF0sIHYgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICBvYmpba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfTtcbnZhciBjb2RlUG9pbnRBdCA9IGhhc05hdGl2ZUNvZGVQb2ludEF0XG4gICAgPyAvLyBOYXRpdmVcbiAgICAgICAgZnVuY3Rpb24gY29kZVBvaW50QXQocywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmNvZGVQb2ludEF0KGluZGV4KTtcbiAgICAgICAgfVxuICAgIDogLy8gSUUgMTFcbiAgICAgICAgZnVuY3Rpb24gY29kZVBvaW50QXQocywgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzaXplID0gcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpcnN0ID0gcy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgIHZhciBzZWNvbmQ7XG4gICAgICAgICAgICByZXR1cm4gZmlyc3QgPCAweGQ4MDAgfHxcbiAgICAgICAgICAgICAgICBmaXJzdCA+IDB4ZGJmZiB8fFxuICAgICAgICAgICAgICAgIGluZGV4ICsgMSA9PT0gc2l6ZSB8fFxuICAgICAgICAgICAgICAgIChzZWNvbmQgPSBzLmNoYXJDb2RlQXQoaW5kZXggKyAxKSkgPCAweGRjMDAgfHxcbiAgICAgICAgICAgICAgICBzZWNvbmQgPiAweGRmZmZcbiAgICAgICAgICAgICAgICA/IGZpcnN0XG4gICAgICAgICAgICAgICAgOiAoKGZpcnN0IC0gMHhkODAwKSA8PCAxMCkgKyAoc2Vjb25kIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gICAgICAgIH07XG52YXIgdHJpbVN0YXJ0ID0gaGFzVHJpbVN0YXJ0XG4gICAgPyAvLyBOYXRpdmVcbiAgICAgICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnRyaW1TdGFydCgpO1xuICAgICAgICB9XG4gICAgOiAvLyBQb255ZmlsbFxuICAgICAgICBmdW5jdGlvbiB0cmltU3RhcnQocykge1xuICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZShTUEFDRV9TRVBBUkFUT1JfU1RBUlRfUkVHRVgsICcnKTtcbiAgICAgICAgfTtcbnZhciB0cmltRW5kID0gaGFzVHJpbUVuZFxuICAgID8gLy8gTmF0aXZlXG4gICAgICAgIGZ1bmN0aW9uIHRyaW1FbmQocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudHJpbUVuZCgpO1xuICAgICAgICB9XG4gICAgOiAvLyBQb255ZmlsbFxuICAgICAgICBmdW5jdGlvbiB0cmltRW5kKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoU1BBQ0VfU0VQQVJBVE9SX0VORF9SRUdFWCwgJycpO1xuICAgICAgICB9O1xuLy8gUHJldmVudCBtaW5pZmllciB0byB0cmFuc2xhdGUgbmV3IFJlZ0V4cCB0byBsaXRlcmFsIGZvcm0gdGhhdCBtaWdodCBjYXVzZSBzeW50YXggZXJyb3Igb24gSUUxMS5cbmZ1bmN0aW9uIFJFKHMsIGZsYWcpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzLCBmbGFnKTtcbn1cbi8vICNlbmRyZWdpb25cbnZhciBtYXRjaElkZW50aWZpZXJBdEluZGV4O1xuaWYgKFJFR0VYX1NVUFBPUlRTX1VfQU5EX1kpIHtcbiAgICAvLyBOYXRpdmVcbiAgICB2YXIgSURFTlRJRklFUl9QUkVGSVhfUkVfMSA9IFJFKCcoW15cXFxccHtXaGl0ZV9TcGFjZX1cXFxccHtQYXR0ZXJuX1N5bnRheH1dKiknLCAneXUnKTtcbiAgICBtYXRjaElkZW50aWZpZXJBdEluZGV4ID0gZnVuY3Rpb24gbWF0Y2hJZGVudGlmaWVyQXRJbmRleChzLCBpbmRleCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIElERU5USUZJRVJfUFJFRklYX1JFXzEubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIHZhciBtYXRjaCA9IElERU5USUZJRVJfUFJFRklYX1JFXzEuZXhlYyhzKTtcbiAgICAgICAgcmV0dXJuIChfYSA9IG1hdGNoWzFdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICB9O1xufVxuZWxzZSB7XG4gICAgLy8gSUUxMVxuICAgIG1hdGNoSWRlbnRpZmllckF0SW5kZXggPSBmdW5jdGlvbiBtYXRjaElkZW50aWZpZXJBdEluZGV4KHMsIGluZGV4KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IFtdO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGMgPSBjb2RlUG9pbnRBdChzLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gdW5kZWZpbmVkIHx8IF9pc1doaXRlU3BhY2UoYykgfHwgX2lzUGF0dGVyblN5bnRheChjKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF0Y2gucHVzaChjKTtcbiAgICAgICAgICAgIGluZGV4ICs9IGMgPj0gMHgxMDAwMCA/IDIgOiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcm9tQ29kZVBvaW50LmFwcGx5KHZvaWQgMCwgbWF0Y2gpO1xuICAgIH07XG59XG52YXIgUGFyc2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcnNlcihtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7IG9mZnNldDogMCwgbGluZTogMSwgY29sdW1uOiAxIH07XG4gICAgICAgIHRoaXMuaWdub3JlVGFnID0gISFvcHRpb25zLmlnbm9yZVRhZztcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgICAgICAgdGhpcy5yZXF1aXJlc090aGVyQ2xhdXNlID0gISFvcHRpb25zLnJlcXVpcmVzT3RoZXJDbGF1c2U7XG4gICAgICAgIHRoaXMuc2hvdWxkUGFyc2VTa2VsZXRvbnMgPSAhIW9wdGlvbnMuc2hvdWxkUGFyc2VTa2VsZXRvbnM7XG4gICAgfVxuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCgpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcigncGFyc2VyIGNhbiBvbmx5IGJlIHVzZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlTWVzc2FnZSgwLCAnJywgZmFsc2UpO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU1lc3NhZ2UgPSBmdW5jdGlvbiAobmVzdGluZ0xldmVsLCBwYXJlbnRBcmdUeXBlLCBleHBlY3RpbmdDbG9zZVRhZykge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgIHZhciBjaGFyID0gdGhpcy5jaGFyKCk7XG4gICAgICAgICAgICBpZiAoY2hhciA9PT0gMTIzIC8qIGB7YCAqLykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlQXJndW1lbnQobmVzdGluZ0xldmVsLCBleHBlY3RpbmdDbG9zZVRhZyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChyZXN1bHQudmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IDEyNSAvKiBgfWAgKi8gJiYgbmVzdGluZ0xldmVsID4gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gMzUgLyogYCNgICovICYmXG4gICAgICAgICAgICAgICAgKHBhcmVudEFyZ1R5cGUgPT09ICdwbHVyYWwnIHx8IHBhcmVudEFyZ1R5cGUgPT09ICdzZWxlY3RvcmRpbmFsJykpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVFlQRS5wb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKHBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSA2MCAvKiBgPGAgKi8gJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5pZ25vcmVUYWcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnBlZWsoKSA9PT0gNDcgLy8gY2hhciBjb2RlIGZvciAnLydcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmIChleHBlY3RpbmdDbG9zZVRhZykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5VTk1BVENIRURfQ0xPU0lOR19UQUcsIGNyZWF0ZUxvY2F0aW9uKHRoaXMuY2xvbmVQb3NpdGlvbigpLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IDYwIC8qIGA8YCAqLyAmJlxuICAgICAgICAgICAgICAgICF0aGlzLmlnbm9yZVRhZyAmJlxuICAgICAgICAgICAgICAgIF9pc0FscGhhKHRoaXMucGVlaygpIHx8IDApKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VUYWcobmVzdGluZ0xldmVsLCBwYXJlbnRBcmdUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHJlc3VsdC52YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VMaXRlcmFsKG5lc3RpbmdMZXZlbCwgcGFyZW50QXJnVHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChyZXN1bHQudmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWw6IGVsZW1lbnRzLCBlcnI6IG51bGwgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEEgdGFnIG5hbWUgbXVzdCBzdGFydCB3aXRoIGFuIEFTQ0lJIGxvd2VyL3VwcGVyIGNhc2UgbGV0dGVyLiBUaGUgZ3JhbW1hciBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbY3VzdG9tIGVsZW1lbnQgbmFtZV1bXSBleGNlcHQgdGhhdCBhIGRhc2ggaXMgTk9UIGFsd2F5cyBtYW5kYXRvcnkgYW5kIHVwcGVyY2FzZSBsZXR0ZXJzXG4gICAgICogYXJlIGFjY2VwdGVkOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogdGFnIDo6PSBcIjxcIiB0YWdOYW1lICh3aGl0ZXNwYWNlKSogXCIvPlwiIHwgXCI8XCIgdGFnTmFtZSAod2hpdGVzcGFjZSkqIFwiPlwiIG1lc3NhZ2UgXCI8L1wiIHRhZ05hbWUgKHdoaXRlc3BhY2UpKiBcIj5cIlxuICAgICAqIHRhZ05hbWUgOjo9IFthLXpdIChQRU5DaGFyKSpcbiAgICAgKiBQRU5DaGFyIDo6PVxuICAgICAqICAgICBcIi1cIiB8IFwiLlwiIHwgWzAtOV0gfCBcIl9cIiB8IFthLXpdIHwgW0EtWl0gfCAjeEI3IHwgWyN4QzAtI3hENl0gfCBbI3hEOC0jeEY2XSB8IFsjeEY4LSN4MzdEXSB8XG4gICAgICogICAgIFsjeDM3Ri0jeDFGRkZdIHwgWyN4MjAwQy0jeDIwMERdIHwgWyN4MjAzRi0jeDIwNDBdIHwgWyN4MjA3MC0jeDIxOEZdIHwgWyN4MkMwMC0jeDJGRUZdIHxcbiAgICAgKiAgICAgWyN4MzAwMS0jeEQ3RkZdIHwgWyN4RjkwMC0jeEZEQ0ZdIHwgWyN4RkRGMC0jeEZGRkRdIHwgWyN4MTAwMDAtI3hFRkZGRl1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtjdXN0b20gZWxlbWVudCBuYW1lXTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvY3VzdG9tLWVsZW1lbnRzLmh0bWwjdmFsaWQtY3VzdG9tLWVsZW1lbnQtbmFtZVxuICAgICAqIE5PVEU6IFdlJ3JlIGEgYml0IG1vcmUgbGF4IGhlcmUgc2luY2UgSFRNTCB0ZWNobmljYWxseSBkb2VzIG5vdCBhbGxvdyB1cHBlcmNhc2UgSFRNTCBlbGVtZW50IGJ1dCB3ZSBkb1xuICAgICAqIHNpbmNlIG90aGVyIHRhZy1iYXNlZCBlbmdpbmVzIGxpa2UgUmVhY3QgYWxsb3cgaXRcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVGFnID0gZnVuY3Rpb24gKG5lc3RpbmdMZXZlbCwgcGFyZW50QXJnVHlwZSkge1xuICAgICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYDxgXG4gICAgICAgIHZhciB0YWdOYW1lID0gdGhpcy5wYXJzZVRhZ05hbWUoKTtcbiAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuYnVtcElmKCcvPicpKSB7XG4gICAgICAgICAgICAvLyBTZWxmIGNsb3NpbmcgdGFnXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBUWVBFLmxpdGVyYWwsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIjxcIi5jb25jYXQodGFnTmFtZSwgXCIvPlwiKSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKHN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycjogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5idW1wSWYoJz4nKSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuUmVzdWx0ID0gdGhpcy5wYXJzZU1lc3NhZ2UobmVzdGluZ0xldmVsICsgMSwgcGFyZW50QXJnVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5SZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gY2hpbGRyZW5SZXN1bHQudmFsO1xuICAgICAgICAgICAgLy8gRXhwZWN0aW5nIGEgY2xvc2UgdGFnXG4gICAgICAgICAgICB2YXIgZW5kVGFnU3RhcnRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVtcElmKCc8LycpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSB8fCAhX2lzQWxwaGEodGhpcy5jaGFyKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5JTlZBTElEX1RBRywgY3JlYXRlTG9jYXRpb24oZW5kVGFnU3RhcnRQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNsb3NpbmdUYWdOYW1lU3RhcnRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIHZhciBjbG9zaW5nVGFnTmFtZSA9IHRoaXMucGFyc2VUYWdOYW1lKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUgIT09IGNsb3NpbmdUYWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5VTk1BVENIRURfQ0xPU0lOR19UQUcsIGNyZWF0ZUxvY2F0aW9uKGNsb3NpbmdUYWdOYW1lU3RhcnRQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYnVtcElmKCc+JykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLklOVkFMSURfVEFHLCBjcmVhdGVMb2NhdGlvbihlbmRUYWdTdGFydFBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEUudGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRhZ05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oc3RhcnRQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5VTkNMT1NFRF9UQUcsIGNyZWF0ZUxvY2F0aW9uKHN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuSU5WQUxJRF9UQUcsIGNyZWF0ZUxvY2F0aW9uKHN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGFzc3VtZXMgdGhhdCB0aGUgY2FsbGVyIGhhcyBwZWVrZWQgYWhlYWQgZm9yIHRoZSBmaXJzdCB0YWcgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VUYWdOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnRPZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gdGhlIGZpcnN0IHRhZyBuYW1lIGNoYXJhY3RlclxuICAgICAgICB3aGlsZSAoIXRoaXMuaXNFT0YoKSAmJiBfaXNQb3RlbnRpYWxFbGVtZW50TmFtZUNoYXIodGhpcy5jaGFyKCkpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlLnNsaWNlKHN0YXJ0T2Zmc2V0LCB0aGlzLm9mZnNldCgpKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VMaXRlcmFsID0gZnVuY3Rpb24gKG5lc3RpbmdMZXZlbCwgcGFyZW50QXJnVHlwZSkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VRdW90ZVJlc3VsdCA9IHRoaXMudHJ5UGFyc2VRdW90ZShwYXJlbnRBcmdUeXBlKTtcbiAgICAgICAgICAgIGlmIChwYXJzZVF1b3RlUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gcGFyc2VRdW90ZVJlc3VsdDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXJzZVVucXVvdGVkUmVzdWx0ID0gdGhpcy50cnlQYXJzZVVucXVvdGVkKG5lc3RpbmdMZXZlbCwgcGFyZW50QXJnVHlwZSk7XG4gICAgICAgICAgICBpZiAocGFyc2VVbnF1b3RlZFJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IHBhcnNlVW5xdW90ZWRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFyc2VMZWZ0QW5nbGVSZXN1bHQgPSB0aGlzLnRyeVBhcnNlTGVmdEFuZ2xlQnJhY2tldCgpO1xuICAgICAgICAgICAgaWYgKHBhcnNlTGVmdEFuZ2xlUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gcGFyc2VMZWZ0QW5nbGVSZXN1bHQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGFydCwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsOiB7IHR5cGU6IFRZUEUubGl0ZXJhbCwgdmFsdWU6IHZhbHVlLCBsb2NhdGlvbjogbG9jYXRpb24gfSxcbiAgICAgICAgICAgIGVycjogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUudHJ5UGFyc2VMZWZ0QW5nbGVCcmFja2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFT0YoKSAmJlxuICAgICAgICAgICAgdGhpcy5jaGFyKCkgPT09IDYwIC8qIGA8YCAqLyAmJlxuICAgICAgICAgICAgKHRoaXMuaWdub3JlVGFnIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgYXQgdGhlIG9wZW5pbmcgdGFnIG9yIGNsb3NpbmcgdGFnIHBvc2l0aW9uLCBiYWlsLlxuICAgICAgICAgICAgICAgICFfaXNBbHBoYU9yU2xhc2godGhpcy5wZWVrKCkgfHwgMCkpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYDxgXG4gICAgICAgICAgICByZXR1cm4gJzwnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnRpbmcgd2l0aCBJQ1UgNC44LCBhbiBBU0NJSSBhcG9zdHJvcGhlIG9ubHkgc3RhcnRzIHF1b3RlZCB0ZXh0IGlmIGl0IGltbWVkaWF0ZWx5IHByZWNlZGVzXG4gICAgICogYSBjaGFyYWN0ZXIgdGhhdCByZXF1aXJlcyBxdW90aW5nICh0aGF0IGlzLCBcIm9ubHkgd2hlcmUgbmVlZGVkXCIpLCBhbmQgd29ya3MgdGhlIHNhbWUgaW5cbiAgICAgKiBuZXN0ZWQgbWVzc2FnZXMgYXMgb24gdGhlIHRvcCBsZXZlbCBvZiB0aGUgcGF0dGVybi4gVGhlIG5ldyBiZWhhdmlvciBpcyBvdGhlcndpc2UgY29tcGF0aWJsZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnRyeVBhcnNlUXVvdGUgPSBmdW5jdGlvbiAocGFyZW50QXJnVHlwZSkge1xuICAgICAgICBpZiAodGhpcy5pc0VPRigpIHx8IHRoaXMuY2hhcigpICE9PSAzOSAvKiBgJ2AgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIGVzY2FwZWQgY2hhciBmb2xsb3dpbmcgdGhlIGFwb3N0cm9waGUsIG9yIGVhcmx5IHJldHVybiBpZiB0aGVyZSBpcyBubyBlc2NhcGVkIGNoYXIuXG4gICAgICAgIC8vIENoZWNrIGlmIGlzIHZhbGlkIGVzY2FwZWQgY2hhcmFjdGVyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wZWVrKCkpIHtcbiAgICAgICAgICAgIGNhc2UgMzkgLyogYCdgICovOlxuICAgICAgICAgICAgICAgIC8vIGRvdWJsZSBxdW90ZSwgc2hvdWxkIHJldHVybiBhcyBhIHNpbmdsZSBxdW90ZS5cbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCInXCI7XG4gICAgICAgICAgICAvLyAneycsICc8JywgJz4nLCAnfSdcbiAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgY2FzZSA2MDpcbiAgICAgICAgICAgIGNhc2UgNjI6XG4gICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzU6IC8vICcjJ1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRBcmdUeXBlID09PSAncGx1cmFsJyB8fCBwYXJlbnRBcmdUeXBlID09PSAnc2VsZWN0b3JkaW5hbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYXBvc3Ryb3BoZVxuICAgICAgICB2YXIgY29kZVBvaW50cyA9IFt0aGlzLmNoYXIoKV07IC8vIGVzY2FwZWQgY2hhclxuICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgLy8gcmVhZCBjaGFycyB1bnRpbCB0aGUgb3B0aW9uYWwgY2xvc2luZyBhcG9zdHJvcGhlIGlzIGZvdW5kXG4gICAgICAgIHdoaWxlICghdGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSB0aGlzLmNoYXIoKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gMzkgLyogYCdgICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGVlaygpID09PSAzOSAvKiBgJ2AgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50cy5wdXNoKDM5KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnVtcCBvbmUgbW9yZSB0aW1lIGJlY2F1c2Ugd2UgbmVlZCB0byBza2lwIDIgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBPcHRpb25hbCBjbG9zaW5nIGFwb3N0cm9waGUuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnRzLnB1c2goY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyb21Db2RlUG9pbnQuYXBwbHkodm9pZCAwLCBjb2RlUG9pbnRzKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUudHJ5UGFyc2VVbnF1b3RlZCA9IGZ1bmN0aW9uIChuZXN0aW5nTGV2ZWwsIHBhcmVudEFyZ1R5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoID0gdGhpcy5jaGFyKCk7XG4gICAgICAgIGlmIChjaCA9PT0gNjAgLyogYDxgICovIHx8XG4gICAgICAgICAgICBjaCA9PT0gMTIzIC8qIGB7YCAqLyB8fFxuICAgICAgICAgICAgKGNoID09PSAzNSAvKiBgI2AgKi8gJiZcbiAgICAgICAgICAgICAgICAocGFyZW50QXJnVHlwZSA9PT0gJ3BsdXJhbCcgfHwgcGFyZW50QXJnVHlwZSA9PT0gJ3NlbGVjdG9yZGluYWwnKSkgfHxcbiAgICAgICAgICAgIChjaCA9PT0gMTI1IC8qIGB9YCAqLyAmJiBuZXN0aW5nTGV2ZWwgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQ29kZVBvaW50KGNoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFyZ3VtZW50ID0gZnVuY3Rpb24gKG5lc3RpbmdMZXZlbCwgZXhwZWN0aW5nQ2xvc2VUYWcpIHtcbiAgICAgICAgdmFyIG9wZW5pbmdCcmFjZVBvc2l0aW9uID0gdGhpcy5jbG9uZVBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuYnVtcCgpOyAvLyBge2BcbiAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVYUEVDVF9BUkdVTUVOVF9DTE9TSU5HX0JSQUNFLCBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGFyKCkgPT09IDEyNSAvKiBgfWAgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVNUFRZX0FSR1VNRU5ULCBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcmd1bWVudCBuYW1lXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucGFyc2VJZGVudGlmaWVySWZQb3NzaWJsZSgpLnZhbHVlO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuTUFMRk9STUVEX0FSR1VNRU5ULCBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICBpZiAodGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuRVhQRUNUX0FSR1VNRU5UX0NMT1NJTkdfQlJBQ0UsIGNyZWF0ZUxvY2F0aW9uKG9wZW5pbmdCcmFjZVBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5jaGFyKCkpIHtcbiAgICAgICAgICAgIC8vIFNpbXBsZSBhcmd1bWVudDogYHtuYW1lfWBcbiAgICAgICAgICAgIGNhc2UgMTI1IC8qIGB9YCAqLzoge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpOyAvLyBgfWBcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEUuYXJndW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZSBkb2VzIG5vdCBpbmNsdWRlIHRoZSBvcGVuaW5nIGFuZCBjbG9zaW5nIGJyYWNlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFyZ3VtZW50IHdpdGggb3B0aW9uczogYHtuYW1lLCBmb3JtYXQsIC4uLn1gXG4gICAgICAgICAgICBjYXNlIDQ0IC8qIGAsYCAqLzoge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpOyAvLyBgLGBcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVYUEVDVF9BUkdVTUVOVF9DTE9TSU5HX0JSQUNFLCBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VBcmd1bWVudE9wdGlvbnMobmVzdGluZ0xldmVsLCBleHBlY3RpbmdDbG9zZVRhZywgdmFsdWUsIG9wZW5pbmdCcmFjZVBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLk1BTEZPUk1FRF9BUkdVTUVOVCwgY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkdmFuY2UgdGhlIHBhcnNlciB1bnRpbCB0aGUgZW5kIG9mIHRoZSBpZGVudGlmaWVyLCBpZiBpdCBpcyBjdXJyZW50bHkgb25cbiAgICAgKiBhbiBpZGVudGlmaWVyIGNoYXJhY3Rlci4gUmV0dXJuIGFuIGVtcHR5IHN0cmluZyBvdGhlcndpc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUlkZW50aWZpZXJJZlBvc3NpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnRpbmdQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICB2YXIgc3RhcnRPZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuICAgICAgICB2YXIgdmFsdWUgPSBtYXRjaElkZW50aWZpZXJBdEluZGV4KHRoaXMubWVzc2FnZSwgc3RhcnRPZmZzZXQpO1xuICAgICAgICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuYnVtcFRvKGVuZE9mZnNldCk7XG4gICAgICAgIHZhciBlbmRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGFydGluZ1Bvc2l0aW9uLCBlbmRQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgbG9jYXRpb246IGxvY2F0aW9uIH07XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXJndW1lbnRPcHRpb25zID0gZnVuY3Rpb24gKG5lc3RpbmdMZXZlbCwgZXhwZWN0aW5nQ2xvc2VUYWcsIHZhbHVlLCBvcGVuaW5nQnJhY2VQb3NpdGlvbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFBhcnNlIHRoaXMgcmFuZ2U6XG4gICAgICAgIC8vIHtuYW1lLCB0eXBlLCBzdHlsZX1cbiAgICAgICAgLy8gICAgICAgIF4tLS1eXG4gICAgICAgIHZhciB0eXBlU3RhcnRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICB2YXIgYXJnVHlwZSA9IHRoaXMucGFyc2VJZGVudGlmaWVySWZQb3NzaWJsZSgpLnZhbHVlO1xuICAgICAgICB2YXIgdHlwZUVuZFBvc2l0aW9uID0gdGhpcy5jbG9uZVBvc2l0aW9uKCk7XG4gICAgICAgIHN3aXRjaCAoYXJnVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgICAgICAgICAvLyBFeHBlY3RpbmcgYSBzdHlsZSBzdHJpbmcgbnVtYmVyLCBkYXRlLCB0aW1lLCBwbHVyYWwsIHNlbGVjdG9yZGluYWwsIG9yIHNlbGVjdC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuRVhQRUNUX0FSR1VNRU5UX1RZUEUsIGNyZWF0ZUxvY2F0aW9uKHR5cGVTdGFydFBvc2l0aW9uLCB0eXBlRW5kUG9zaXRpb24pKTtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgIGNhc2UgJ3RpbWUnOiB7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhpcyByYW5nZTpcbiAgICAgICAgICAgICAgICAvLyB7bmFtZSwgbnVtYmVyLCBzdHlsZX1cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgXi0tLS0tLS1eXG4gICAgICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGVBbmRMb2NhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYnVtcElmKCcsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlU3RhcnRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZVNpbXBsZUFyZ1N0eWxlSWZQb3NzaWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSB0cmltRW5kKHJlc3VsdC52YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuRVhQRUNUX0FSR1VNRU5UX1NUWUxFLCBjcmVhdGVMb2NhdGlvbih0aGlzLmNsb25lUG9zaXRpb24oKSwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0eWxlU3RhcnRQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZUFuZExvY2F0aW9uID0geyBzdHlsZTogc3R5bGUsIHN0eWxlTG9jYXRpb246IHN0eWxlTG9jYXRpb24gfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFyZ0Nsb3NlUmVzdWx0ID0gdGhpcy50cnlQYXJzZUFyZ3VtZW50Q2xvc2Uob3BlbmluZ0JyYWNlUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChhcmdDbG9zZVJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ0Nsb3NlUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25fMSA9IGNyZWF0ZUxvY2F0aW9uKG9wZW5pbmdCcmFjZVBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzdHlsZSBvciBza2VsZXRvblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZUFuZExvY2F0aW9uICYmIHN0YXJ0c1dpdGgoc3R5bGVBbmRMb2NhdGlvbiA9PT0gbnVsbCB8fCBzdHlsZUFuZExvY2F0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHlsZUFuZExvY2F0aW9uLnN0eWxlLCAnOjonLCAwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTa2VsZXRvbiBzdGFydHMgd2l0aCBgOjpgLlxuICAgICAgICAgICAgICAgICAgICB2YXIgc2tlbGV0b24gPSB0cmltU3RhcnQoc3R5bGVBbmRMb2NhdGlvbi5zdHlsZS5zbGljZSgyKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdUeXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VOdW1iZXJTa2VsZXRvbkZyb21TdHJpbmcoc2tlbGV0b24sIHN0eWxlQW5kTG9jYXRpb24uc3R5bGVMb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogeyB0eXBlOiBUWVBFLm51bWJlciwgdmFsdWU6IHZhbHVlLCBsb2NhdGlvbjogbG9jYXRpb25fMSwgc3R5bGU6IHJlc3VsdC52YWwgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNrZWxldG9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FWFBFQ1RfREFURV9USU1FX1NLRUxFVE9OLCBsb2NhdGlvbl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlVGltZVBhdHRlcm4gPSBza2VsZXRvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBcImJlc3QgbWF0Y2hcIiBwYXR0ZXJuIG9ubHkgaWYgbG9jYWxlIGlzIHBhc3NlZCwgaWYgbm90LCBsZXQgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgYXMtaXMgd2hlcmUgYHBhcnNlRGF0ZVRpbWVTa2VsZXRvbigpYCB3aWxsIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdW5zdXBwb3J0ZWQgcGF0dGVybnMuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGltZVBhdHRlcm4gPSBnZXRCZXN0UGF0dGVybihza2VsZXRvbiwgdGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFNLRUxFVE9OX1RZUEUuZGF0ZVRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogZGF0ZVRpbWVQYXR0ZXJuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBzdHlsZUFuZExvY2F0aW9uLnN0eWxlTG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkT3B0aW9uczogdGhpcy5zaG91bGRQYXJzZVNrZWxldG9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlRGF0ZVRpbWVTa2VsZXRvbihkYXRlVGltZVBhdHRlcm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBhcmdUeXBlID09PSAnZGF0ZScgPyBUWVBFLmRhdGUgOiBUWVBFLnRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogeyB0eXBlOiB0eXBlLCB2YWx1ZTogdmFsdWUsIGxvY2F0aW9uOiBsb2NhdGlvbl8xLCBzdHlsZTogc3R5bGUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlZ3VsYXIgc3R5bGUgb3Igbm8gc3R5bGUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcmdUeXBlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gVFlQRS5udW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFyZ1R5cGUgPT09ICdkYXRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFRZUEUuZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFRZUEUudGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbl8xLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IChfYSA9IHN0eWxlQW5kTG9jYXRpb24gPT09IG51bGwgfHwgc3R5bGVBbmRMb2NhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3R5bGVBbmRMb2NhdGlvbi5zdHlsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdwbHVyYWwnOlxuICAgICAgICAgICAgY2FzZSAnc2VsZWN0b3JkaW5hbCc6XG4gICAgICAgICAgICBjYXNlICdzZWxlY3QnOiB7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhpcyByYW5nZTpcbiAgICAgICAgICAgICAgICAvLyB7bmFtZSwgcGx1cmFsLCBvcHRpb25zfVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICBeLS0tLS0tLS0tXlxuICAgICAgICAgICAgICAgIHZhciB0eXBlRW5kUG9zaXRpb25fMSA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJ1bXBJZignLCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX09QVElPTlMsIGNyZWF0ZUxvY2F0aW9uKHR5cGVFbmRQb3NpdGlvbl8xLCBfX2Fzc2lnbih7fSwgdHlwZUVuZFBvc2l0aW9uXzEpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2Ugb2Zmc2V0OlxuICAgICAgICAgICAgICAgIC8vIHtuYW1lLCBwbHVyYWwsIG9mZnNldDoxLCBvcHRpb25zfVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIF4tLS0tLV5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIG9yIHRoZSBmaXJzdCBvcHRpb246XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyB7bmFtZSwgcGx1cmFsLCBvbmUgey4uLn0gb3RoZXIgey4uLn19XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgXi0tXlxuICAgICAgICAgICAgICAgIHZhciBpZGVudGlmaWVyQW5kTG9jYXRpb24gPSB0aGlzLnBhcnNlSWRlbnRpZmllcklmUG9zc2libGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGx1cmFsT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZSAhPT0gJ3NlbGVjdCcgJiYgaWRlbnRpZmllckFuZExvY2F0aW9uLnZhbHVlID09PSAnb2Zmc2V0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYnVtcElmKCc6JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FWFBFQ1RfUExVUkFMX0FSR1VNRU5UX09GRlNFVF9WQUxVRSwgY3JlYXRlTG9jYXRpb24odGhpcy5jbG9uZVBvc2l0aW9uKCksIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMudHJ5UGFyc2VEZWNpbWFsSW50ZWdlcihFcnJvcktpbmQuRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUUsIEVycm9yS2luZC5JTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBhbm90aGVyIGlkZW50aWZpZXIgZm9yIG9wdGlvbiBwYXJzaW5nXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXJBbmRMb2NhdGlvbiA9IHRoaXMucGFyc2VJZGVudGlmaWVySWZQb3NzaWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICBwbHVyYWxPZmZzZXQgPSByZXN1bHQudmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uc1Jlc3VsdCA9IHRoaXMudHJ5UGFyc2VQbHVyYWxPclNlbGVjdE9wdGlvbnMobmVzdGluZ0xldmVsLCBhcmdUeXBlLCBleHBlY3RpbmdDbG9zZVRhZywgaWRlbnRpZmllckFuZExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1Jlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnNSZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhcmdDbG9zZVJlc3VsdCA9IHRoaXMudHJ5UGFyc2VBcmd1bWVudENsb3NlKG9wZW5pbmdCcmFjZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJnQ2xvc2VSZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdDbG9zZVJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uXzIgPSBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgIGlmIChhcmdUeXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVFlQRS5zZWxlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZyb21FbnRyaWVzKG9wdGlvbnNSZXN1bHQudmFsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25fMixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVFlQRS5wbHVyYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZyb21FbnRyaWVzKG9wdGlvbnNSZXN1bHQudmFsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHBsdXJhbE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVyYWxUeXBlOiBhcmdUeXBlID09PSAncGx1cmFsJyA/ICdjYXJkaW5hbCcgOiAnb3JkaW5hbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLklOVkFMSURfQVJHVU1FTlRfVFlQRSwgY3JlYXRlTG9jYXRpb24odHlwZVN0YXJ0UG9zaXRpb24sIHR5cGVFbmRQb3NpdGlvbikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLnRyeVBhcnNlQXJndW1lbnRDbG9zZSA9IGZ1bmN0aW9uIChvcGVuaW5nQnJhY2VQb3NpdGlvbikge1xuICAgICAgICAvLyBQYXJzZToge3ZhbHVlLCBudW1iZXIsIDo6Y3VycmVuY3kvR0JQIH1cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSB8fCB0aGlzLmNoYXIoKSAhPT0gMTI1IC8qIGB9YCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVYUEVDVF9BUkdVTUVOVF9DTE9TSU5HX0JSQUNFLCBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYH1gXG4gICAgICAgIHJldHVybiB7IHZhbDogdHJ1ZSwgZXJyOiBudWxsIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS91bmljb2RlLW9yZy9pY3UvYmxvYi9hZjdlZDFmNmQyMjk4MDEzZGMzMDM2Mjg0MzhlYzRhYmUxZjE2NDc5L2ljdTRjL3NvdXJjZS9jb21tb24vbWVzc2FnZXBhdHRlcm4uY3BwI0w2NTlcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU2ltcGxlQXJnU3R5bGVJZlBvc3NpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmVzdGVkQnJhY2VzID0gMDtcbiAgICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuY2hhcigpO1xuICAgICAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMzkgLyogYCdgICovOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyZWF0IGFwb3N0cm9waGUgYXMgcXVvdGluZyBidXQgaW5jbHVkZSBpdCBpbiB0aGUgc3R5bGUgcGFydC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgZW5kIG9mIHRoZSBxdW90ZWQgbGl0ZXJhbCB0ZXh0LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFwb3N0cm9waGVQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYnVtcFVudGlsKFwiJ1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLlVOQ0xPU0VEX1FVT1RFX0lOX0FSR1VNRU5UX1NUWUxFLCBjcmVhdGVMb2NhdGlvbihhcG9zdHJvcGhlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDEyMyAvKiBge2AgKi86IHtcbiAgICAgICAgICAgICAgICAgICAgbmVzdGVkQnJhY2VzICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAxMjUgLyogYH1gICovOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRCcmFjZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWRCcmFjZXMgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB0aGlzLm1lc3NhZ2Uuc2xpY2Uoc3RhcnRQb3NpdGlvbi5vZmZzZXQsIHRoaXMub2Zmc2V0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsOiB0aGlzLm1lc3NhZ2Uuc2xpY2Uoc3RhcnRQb3NpdGlvbi5vZmZzZXQsIHRoaXMub2Zmc2V0KCkpLFxuICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU51bWJlclNrZWxldG9uRnJvbVN0cmluZyA9IGZ1bmN0aW9uIChza2VsZXRvbiwgbG9jYXRpb24pIHtcbiAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdG9rZW5zID0gcGFyc2VOdW1iZXJTa2VsZXRvbkZyb21TdHJpbmcoc2tlbGV0b24pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuSU5WQUxJRF9OVU1CRVJfU0tFTEVUT04sIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU0tFTEVUT05fVFlQRS5udW1iZXIsXG4gICAgICAgICAgICAgICAgdG9rZW5zOiB0b2tlbnMsXG4gICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIHBhcnNlZE9wdGlvbnM6IHRoaXMuc2hvdWxkUGFyc2VTa2VsZXRvbnNcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJzZU51bWJlclNrZWxldG9uKHRva2VucylcbiAgICAgICAgICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbmVzdGluZ19sZXZlbCBUaGUgY3VycmVudCBuZXN0aW5nIGxldmVsIG9mIG1lc3NhZ2VzLlxuICAgICAqICAgICBUaGlzIGNhbiBiZSBwb3NpdGl2ZSB3aGVuIHBhcnNpbmcgbWVzc2FnZSBmcmFnbWVudCBpbiBzZWxlY3Qgb3IgcGx1cmFsIGFyZ3VtZW50IG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHBhcmVudF9hcmdfdHlwZSBUaGUgcGFyZW50IGFyZ3VtZW50J3MgdHlwZS5cbiAgICAgKiBAcGFyYW0gcGFyc2VkX2ZpcnN0X2lkZW50aWZpZXIgSWYgcHJvdmlkZWQsIHRoaXMgaXMgdGhlIGZpcnN0IGlkZW50aWZpZXItbGlrZSBzZWxlY3RvciBvZlxuICAgICAqICAgICB0aGUgYXJndW1lbnQuIEl0IGlzIGEgYnktcHJvZHVjdCBvZiBhIHByZXZpb3VzIHBhcnNpbmcgYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gZXhwZWN0aW5nX2Nsb3NlX3RhZyBJZiB0cnVlLCB0aGlzIG1lc3NhZ2UgaXMgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBuZXN0ZWQgaW5zaWRlXG4gICAgICogICAgIGJldHdlZW4gYSBwYWlyIG9mIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncy4gVGhlIG5lc3RlZCBtZXNzYWdlIHdpbGwgbm90IHBhcnNlIGJleW9uZFxuICAgICAqICAgICB0aGUgY2xvc2luZyB0YWcgYm91bmRhcnkuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS50cnlQYXJzZVBsdXJhbE9yU2VsZWN0T3B0aW9ucyA9IGZ1bmN0aW9uIChuZXN0aW5nTGV2ZWwsIHBhcmVudEFyZ1R5cGUsIGV4cGVjdENsb3NlVGFnLCBwYXJzZWRGaXJzdElkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgaGFzT3RoZXJDbGF1c2UgPSBmYWxzZTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHBhcnNlZFNlbGVjdG9ycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcGFyc2VkRmlyc3RJZGVudGlmaWVyLnZhbHVlLCBzZWxlY3RvckxvY2F0aW9uID0gcGFyc2VkRmlyc3RJZGVudGlmaWVyLmxvY2F0aW9uO1xuICAgICAgICAvLyBQYXJzZTpcbiAgICAgICAgLy8gb25lIHtvbmUgYXBwbGV9XG4gICAgICAgIC8vIF4tLV5cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRBcmdUeXBlICE9PSAnc2VsZWN0JyAmJiB0aGlzLmJ1bXBJZignPScpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyeSBwYXJzZSBgPXtudW1iZXJ9YCBzZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy50cnlQYXJzZURlY2ltYWxJbnRlZ2VyKEVycm9yS2luZC5FWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SLCBFcnJvcktpbmQuSU5WQUxJRF9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvckxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhcnRQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHRoaXMubWVzc2FnZS5zbGljZShzdGFydFBvc2l0aW9uLm9mZnNldCwgdGhpcy5vZmZzZXQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEdXBsaWNhdGUgc2VsZWN0b3IgY2xhdXNlc1xuICAgICAgICAgICAgaWYgKHBhcnNlZFNlbGVjdG9ycy5oYXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IocGFyZW50QXJnVHlwZSA9PT0gJ3NlbGVjdCdcbiAgICAgICAgICAgICAgICAgICAgPyBFcnJvcktpbmQuRFVQTElDQVRFX1NFTEVDVF9BUkdVTUVOVF9TRUxFQ1RPUlxuICAgICAgICAgICAgICAgICAgICA6IEVycm9yS2luZC5EVVBMSUNBVEVfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SLCBzZWxlY3RvckxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RvciA9PT0gJ290aGVyJykge1xuICAgICAgICAgICAgICAgIGhhc090aGVyQ2xhdXNlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBhcnNlOlxuICAgICAgICAgICAgLy8gb25lIHtvbmUgYXBwbGV9XG4gICAgICAgICAgICAvLyAgICAgXi0tLS0tLS0tLS1eXG4gICAgICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICAgICAgdmFyIG9wZW5pbmdCcmFjZVBvc2l0aW9uID0gdGhpcy5jbG9uZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYnVtcElmKCd7JykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihwYXJlbnRBcmdUeXBlID09PSAnc2VsZWN0J1xuICAgICAgICAgICAgICAgICAgICA/IEVycm9yS2luZC5FWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX1NFTEVDVE9SX0ZSQUdNRU5UXG4gICAgICAgICAgICAgICAgICAgIDogRXJyb3JLaW5kLkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JfRlJBR01FTlQsIGNyZWF0ZUxvY2F0aW9uKHRoaXMuY2xvbmVQb3NpdGlvbigpLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZyYWdtZW50UmVzdWx0ID0gdGhpcy5wYXJzZU1lc3NhZ2UobmVzdGluZ0xldmVsICsgMSwgcGFyZW50QXJnVHlwZSwgZXhwZWN0Q2xvc2VUYWcpO1xuICAgICAgICAgICAgaWYgKGZyYWdtZW50UmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmcmFnbWVudFJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhcmdDbG9zZVJlc3VsdCA9IHRoaXMudHJ5UGFyc2VBcmd1bWVudENsb3NlKG9wZW5pbmdCcmFjZVBvc2l0aW9uKTtcbiAgICAgICAgICAgIGlmIChhcmdDbG9zZVJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnQ2xvc2VSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goW1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZyYWdtZW50UmVzdWx0LnZhbCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKG9wZW5pbmdCcmFjZVBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiB0aGUgZXhpc3Rpbmcgc2VsZWN0b3JzXG4gICAgICAgICAgICBwYXJzZWRTZWxlY3RvcnMuYWRkKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIC8vIFByZXAgbmV4dCBzZWxlY3RvciBjbGF1c2UuXG4gICAgICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5wYXJzZUlkZW50aWZpZXJJZlBvc3NpYmxlKCksIHNlbGVjdG9yID0gX2EudmFsdWUsIHNlbGVjdG9yTG9jYXRpb24gPSBfYS5sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihwYXJlbnRBcmdUeXBlID09PSAnc2VsZWN0J1xuICAgICAgICAgICAgICAgID8gRXJyb3JLaW5kLkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcbiAgICAgICAgICAgICAgICA6IEVycm9yS2luZC5FWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SLCBjcmVhdGVMb2NhdGlvbih0aGlzLmNsb25lUG9zaXRpb24oKSwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXF1aXJlc090aGVyQ2xhdXNlICYmICFoYXNPdGhlckNsYXVzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLk1JU1NJTkdfT1RIRVJfQ0xBVVNFLCBjcmVhdGVMb2NhdGlvbih0aGlzLmNsb25lUG9zaXRpb24oKSwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWw6IG9wdGlvbnMsIGVycjogbnVsbCB9O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS50cnlQYXJzZURlY2ltYWxJbnRlZ2VyID0gZnVuY3Rpb24gKGV4cGVjdE51bWJlckVycm9yLCBpbnZhbGlkTnVtYmVyRXJyb3IpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAxO1xuICAgICAgICB2YXIgc3RhcnRpbmdQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5idW1wSWYoJysnKSkge1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYnVtcElmKCctJykpIHtcbiAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzRGlnaXRzID0gZmFsc2U7XG4gICAgICAgIHZhciBkZWNpbWFsID0gMDtcbiAgICAgICAgd2hpbGUgKCF0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuY2hhcigpO1xuICAgICAgICAgICAgaWYgKGNoID49IDQ4IC8qIGAwYCAqLyAmJiBjaCA8PSA1NyAvKiBgOWAgKi8pIHtcbiAgICAgICAgICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGRlY2ltYWwgPSBkZWNpbWFsICogMTAgKyAoY2ggLSA0OCk7XG4gICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGFydGluZ1Bvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSk7XG4gICAgICAgIGlmICghaGFzRGlnaXRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihleHBlY3ROdW1iZXJFcnJvciwgbG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGRlY2ltYWwgKj0gc2lnbjtcbiAgICAgICAgaWYgKCFpc1NhZmVJbnRlZ2VyKGRlY2ltYWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihpbnZhbGlkTnVtYmVyRXJyb3IsIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWw6IGRlY2ltYWwsIGVycjogbnVsbCB9O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLm9mZnNldDtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuaXNFT0YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldCgpID09PSB0aGlzLm1lc3NhZ2UubGVuZ3RoO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5jbG9uZVBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGlzIGlzIG11Y2ggZmFzdGVyIHRoYW4gYE9iamVjdC5hc3NpZ25gIG9yIHNwcmVhZC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5wb3NpdGlvbi5vZmZzZXQsXG4gICAgICAgICAgICBsaW5lOiB0aGlzLnBvc2l0aW9uLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IHRoaXMucG9zaXRpb24uY29sdW1uLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBjb2RlIHBvaW50IGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBwYXJzZXIuXG4gICAgICogVGhyb3dzIGlmIHRoZSBpbmRleCBpcyBvdXQgb2YgYm91bmQuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5jaGFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5wb3NpdGlvbi5vZmZzZXQ7XG4gICAgICAgIGlmIChvZmZzZXQgPj0gdGhpcy5tZXNzYWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ291dCBvZiBib3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2RlID0gY29kZVBvaW50QXQodGhpcy5tZXNzYWdlLCBvZmZzZXQpO1xuICAgICAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk9mZnNldCBcIi5jb25jYXQob2Zmc2V0LCBcIiBpcyBhdCBpbnZhbGlkIFVURi0xNiBjb2RlIHVuaXQgYm91bmRhcnlcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChraW5kLCBsb2NhdGlvbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsOiBudWxsLFxuICAgICAgICAgICAgZXJyOiB7XG4gICAgICAgICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKiBCdW1wIHRoZSBwYXJzZXIgdG8gdGhlIG5leHQgVVRGLTE2IGNvZGUgdW5pdC4gKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1bXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29kZSA9IHRoaXMuY2hhcigpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMTAgLyogJ1xcbicgKi8pIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ubGluZSArPSAxO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi5jb2x1bW4gPSAxO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi5vZmZzZXQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24uY29sdW1uICs9IDE7XG4gICAgICAgICAgICAvLyAwIH4gMHgxMDAwMCAtPiB1bmljb2RlIEJNUCwgb3RoZXJ3aXNlIHNraXAgdGhlIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi5vZmZzZXQgKz0gY29kZSA8IDB4MTAwMDAgPyAxIDogMjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHN1YnN0cmluZyBzdGFydGluZyBhdCB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcGFyc2VyIGhhc1xuICAgICAqIHRoZSBnaXZlbiBwcmVmaXgsIHRoZW4gYnVtcCB0aGUgcGFyc2VyIHRvIHRoZSBjaGFyYWN0ZXIgaW1tZWRpYXRlbHlcbiAgICAgKiBmb2xsb3dpbmcgdGhlIHByZWZpeCBhbmQgcmV0dXJuIHRydWUuIE90aGVyd2lzZSwgZG9uJ3QgYnVtcCB0aGUgcGFyc2VyXG4gICAgICogYW5kIHJldHVybiBmYWxzZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1bXBJZiA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgICAgaWYgKHN0YXJ0c1dpdGgodGhpcy5tZXNzYWdlLCBwcmVmaXgsIHRoaXMub2Zmc2V0KCkpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQnVtcCB0aGUgcGFyc2VyIHVudGlsIHRoZSBwYXR0ZXJuIGNoYXJhY3RlciBpcyBmb3VuZCBhbmQgcmV0dXJuIGB0cnVlYC5cbiAgICAgKiBPdGhlcndpc2UgYnVtcCB0byB0aGUgZW5kIG9mIHRoZSBmaWxlIGFuZCByZXR1cm4gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1bXBVbnRpbCA9IGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5tZXNzYWdlLmluZGV4T2YocGF0dGVybiwgY3VycmVudE9mZnNldCk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXBUbyhpbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVtcFRvKHRoaXMubWVzc2FnZS5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCdW1wIHRoZSBwYXJzZXIgdG8gdGhlIHRhcmdldCBvZmZzZXQuXG4gICAgICogSWYgdGFyZ2V0IG9mZnNldCBpcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQsIGJ1bXAgdGhlIHBhcnNlciB0byB0aGUgZW5kIG9mIHRoZSBpbnB1dC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1bXBUbyA9IGZ1bmN0aW9uICh0YXJnZXRPZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0KCkgPiB0YXJnZXRPZmZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwidGFyZ2V0T2Zmc2V0IFwiLmNvbmNhdCh0YXJnZXRPZmZzZXQsIFwiIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBjdXJyZW50IG9mZnNldCBcIikuY29uY2F0KHRoaXMub2Zmc2V0KCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRPZmZzZXQgPSBNYXRoLm1pbih0YXJnZXRPZmZzZXQsIHRoaXMubWVzc2FnZS5sZW5ndGgpO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSB0YXJnZXRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiB0YXJnZXRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcInRhcmdldE9mZnNldCBcIi5jb25jYXQodGFyZ2V0T2Zmc2V0LCBcIiBpcyBhdCBpbnZhbGlkIFVURi0xNiBjb2RlIHVuaXQgYm91bmRhcnlcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBhZHZhbmNlIHRoZSBwYXJzZXIgdGhyb3VnaCBhbGwgd2hpdGVzcGFjZSB0byB0aGUgbmV4dCBub24td2hpdGVzcGFjZSBjb2RlIHVuaXQuICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5idW1wU3BhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdoaWxlICghdGhpcy5pc0VPRigpICYmIF9pc1doaXRlU3BhY2UodGhpcy5jaGFyKCkpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUGVlayBhdCB0aGUgKm5leHQqIFVuaWNvZGUgY29kZXBvaW50IGluIHRoZSBpbnB1dCB3aXRob3V0IGFkdmFuY2luZyB0aGUgcGFyc2VyLlxuICAgICAqIElmIHRoZSBpbnB1dCBoYXMgYmVlbiBleGhhdXN0ZWQsIHRoZW4gdGhpcyByZXR1cm5zIG51bGwuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29kZSA9IHRoaXMuY2hhcigpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcbiAgICAgICAgdmFyIG5leHRDb2RlID0gdGhpcy5tZXNzYWdlLmNoYXJDb2RlQXQob2Zmc2V0ICsgKGNvZGUgPj0gMHgxMDAwMCA/IDIgOiAxKSk7XG4gICAgICAgIHJldHVybiBuZXh0Q29kZSAhPT0gbnVsbCAmJiBuZXh0Q29kZSAhPT0gdm9pZCAwID8gbmV4dENvZGUgOiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFBhcnNlcjtcbn0oKSk7XG5leHBvcnQgeyBQYXJzZXIgfTtcbi8qKlxuICogVGhpcyBjaGVjayBpZiBjb2RlcG9pbnQgaXMgYWxwaGFiZXQgKGxvd2VyICYgdXBwZXJjYXNlKVxuICogQHBhcmFtIGNvZGVwb2ludFxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gX2lzQWxwaGEoY29kZXBvaW50KSB7XG4gICAgcmV0dXJuICgoY29kZXBvaW50ID49IDk3ICYmIGNvZGVwb2ludCA8PSAxMjIpIHx8XG4gICAgICAgIChjb2RlcG9pbnQgPj0gNjUgJiYgY29kZXBvaW50IDw9IDkwKSk7XG59XG5mdW5jdGlvbiBfaXNBbHBoYU9yU2xhc2goY29kZXBvaW50KSB7XG4gICAgcmV0dXJuIF9pc0FscGhhKGNvZGVwb2ludCkgfHwgY29kZXBvaW50ID09PSA0NzsgLyogJy8nICovXG59XG4vKiogU2VlIGBwYXJzZVRhZ2AgZnVuY3Rpb24gZG9jcy4gKi9cbmZ1bmN0aW9uIF9pc1BvdGVudGlhbEVsZW1lbnROYW1lQ2hhcihjKSB7XG4gICAgcmV0dXJuIChjID09PSA0NSAvKiAnLScgKi8gfHxcbiAgICAgICAgYyA9PT0gNDYgLyogJy4nICovIHx8XG4gICAgICAgIChjID49IDQ4ICYmIGMgPD0gNTcpIC8qIDAuLjkgKi8gfHxcbiAgICAgICAgYyA9PT0gOTUgLyogJ18nICovIHx8XG4gICAgICAgIChjID49IDk3ICYmIGMgPD0gMTIyKSAvKiogYS4ueiAqLyB8fFxuICAgICAgICAoYyA+PSA2NSAmJiBjIDw9IDkwKSAvKiBBLi5aICovIHx8XG4gICAgICAgIGMgPT0gMHhiNyB8fFxuICAgICAgICAoYyA+PSAweGMwICYmIGMgPD0gMHhkNikgfHxcbiAgICAgICAgKGMgPj0gMHhkOCAmJiBjIDw9IDB4ZjYpIHx8XG4gICAgICAgIChjID49IDB4ZjggJiYgYyA8PSAweDM3ZCkgfHxcbiAgICAgICAgKGMgPj0gMHgzN2YgJiYgYyA8PSAweDFmZmYpIHx8XG4gICAgICAgIChjID49IDB4MjAwYyAmJiBjIDw9IDB4MjAwZCkgfHxcbiAgICAgICAgKGMgPj0gMHgyMDNmICYmIGMgPD0gMHgyMDQwKSB8fFxuICAgICAgICAoYyA+PSAweDIwNzAgJiYgYyA8PSAweDIxOGYpIHx8XG4gICAgICAgIChjID49IDB4MmMwMCAmJiBjIDw9IDB4MmZlZikgfHxcbiAgICAgICAgKGMgPj0gMHgzMDAxICYmIGMgPD0gMHhkN2ZmKSB8fFxuICAgICAgICAoYyA+PSAweGY5MDAgJiYgYyA8PSAweGZkY2YpIHx8XG4gICAgICAgIChjID49IDB4ZmRmMCAmJiBjIDw9IDB4ZmZmZCkgfHxcbiAgICAgICAgKGMgPj0gMHgxMDAwMCAmJiBjIDw9IDB4ZWZmZmYpKTtcbn1cbi8qKlxuICogQ29kZSBwb2ludCBlcXVpdmFsZW50IG9mIHJlZ2V4IGBcXHB7V2hpdGVfU3BhY2V9YC5cbiAqIEZyb206IGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL1B1YmxpYy9VQ0QvbGF0ZXN0L3VjZC9Qcm9wTGlzdC50eHRcbiAqL1xuZnVuY3Rpb24gX2lzV2hpdGVTcGFjZShjKSB7XG4gICAgcmV0dXJuICgoYyA+PSAweDAwMDkgJiYgYyA8PSAweDAwMGQpIHx8XG4gICAgICAgIGMgPT09IDB4MDAyMCB8fFxuICAgICAgICBjID09PSAweDAwODUgfHxcbiAgICAgICAgKGMgPj0gMHgyMDBlICYmIGMgPD0gMHgyMDBmKSB8fFxuICAgICAgICBjID09PSAweDIwMjggfHxcbiAgICAgICAgYyA9PT0gMHgyMDI5KTtcbn1cbi8qKlxuICogQ29kZSBwb2ludCBlcXVpdmFsZW50IG9mIHJlZ2V4IGBcXHB7UGF0dGVybl9TeW50YXh9YC5cbiAqIFNlZSBodHRwczovL3d3dy51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvUHJvcExpc3QudHh0XG4gKi9cbmZ1bmN0aW9uIF9pc1BhdHRlcm5TeW50YXgoYykge1xuICAgIHJldHVybiAoKGMgPj0gMHgwMDIxICYmIGMgPD0gMHgwMDIzKSB8fFxuICAgICAgICBjID09PSAweDAwMjQgfHxcbiAgICAgICAgKGMgPj0gMHgwMDI1ICYmIGMgPD0gMHgwMDI3KSB8fFxuICAgICAgICBjID09PSAweDAwMjggfHxcbiAgICAgICAgYyA9PT0gMHgwMDI5IHx8XG4gICAgICAgIGMgPT09IDB4MDAyYSB8fFxuICAgICAgICBjID09PSAweDAwMmIgfHxcbiAgICAgICAgYyA9PT0gMHgwMDJjIHx8XG4gICAgICAgIGMgPT09IDB4MDAyZCB8fFxuICAgICAgICAoYyA+PSAweDAwMmUgJiYgYyA8PSAweDAwMmYpIHx8XG4gICAgICAgIChjID49IDB4MDAzYSAmJiBjIDw9IDB4MDAzYikgfHxcbiAgICAgICAgKGMgPj0gMHgwMDNjICYmIGMgPD0gMHgwMDNlKSB8fFxuICAgICAgICAoYyA+PSAweDAwM2YgJiYgYyA8PSAweDAwNDApIHx8XG4gICAgICAgIGMgPT09IDB4MDA1YiB8fFxuICAgICAgICBjID09PSAweDAwNWMgfHxcbiAgICAgICAgYyA9PT0gMHgwMDVkIHx8XG4gICAgICAgIGMgPT09IDB4MDA1ZSB8fFxuICAgICAgICBjID09PSAweDAwNjAgfHxcbiAgICAgICAgYyA9PT0gMHgwMDdiIHx8XG4gICAgICAgIGMgPT09IDB4MDA3YyB8fFxuICAgICAgICBjID09PSAweDAwN2QgfHxcbiAgICAgICAgYyA9PT0gMHgwMDdlIHx8XG4gICAgICAgIGMgPT09IDB4MDBhMSB8fFxuICAgICAgICAoYyA+PSAweDAwYTIgJiYgYyA8PSAweDAwYTUpIHx8XG4gICAgICAgIGMgPT09IDB4MDBhNiB8fFxuICAgICAgICBjID09PSAweDAwYTcgfHxcbiAgICAgICAgYyA9PT0gMHgwMGE5IHx8XG4gICAgICAgIGMgPT09IDB4MDBhYiB8fFxuICAgICAgICBjID09PSAweDAwYWMgfHxcbiAgICAgICAgYyA9PT0gMHgwMGFlIHx8XG4gICAgICAgIGMgPT09IDB4MDBiMCB8fFxuICAgICAgICBjID09PSAweDAwYjEgfHxcbiAgICAgICAgYyA9PT0gMHgwMGI2IHx8XG4gICAgICAgIGMgPT09IDB4MDBiYiB8fFxuICAgICAgICBjID09PSAweDAwYmYgfHxcbiAgICAgICAgYyA9PT0gMHgwMGQ3IHx8XG4gICAgICAgIGMgPT09IDB4MDBmNyB8fFxuICAgICAgICAoYyA+PSAweDIwMTAgJiYgYyA8PSAweDIwMTUpIHx8XG4gICAgICAgIChjID49IDB4MjAxNiAmJiBjIDw9IDB4MjAxNykgfHxcbiAgICAgICAgYyA9PT0gMHgyMDE4IHx8XG4gICAgICAgIGMgPT09IDB4MjAxOSB8fFxuICAgICAgICBjID09PSAweDIwMWEgfHxcbiAgICAgICAgKGMgPj0gMHgyMDFiICYmIGMgPD0gMHgyMDFjKSB8fFxuICAgICAgICBjID09PSAweDIwMWQgfHxcbiAgICAgICAgYyA9PT0gMHgyMDFlIHx8XG4gICAgICAgIGMgPT09IDB4MjAxZiB8fFxuICAgICAgICAoYyA+PSAweDIwMjAgJiYgYyA8PSAweDIwMjcpIHx8XG4gICAgICAgIChjID49IDB4MjAzMCAmJiBjIDw9IDB4MjAzOCkgfHxcbiAgICAgICAgYyA9PT0gMHgyMDM5IHx8XG4gICAgICAgIGMgPT09IDB4MjAzYSB8fFxuICAgICAgICAoYyA+PSAweDIwM2IgJiYgYyA8PSAweDIwM2UpIHx8XG4gICAgICAgIChjID49IDB4MjA0MSAmJiBjIDw9IDB4MjA0MykgfHxcbiAgICAgICAgYyA9PT0gMHgyMDQ0IHx8XG4gICAgICAgIGMgPT09IDB4MjA0NSB8fFxuICAgICAgICBjID09PSAweDIwNDYgfHxcbiAgICAgICAgKGMgPj0gMHgyMDQ3ICYmIGMgPD0gMHgyMDUxKSB8fFxuICAgICAgICBjID09PSAweDIwNTIgfHxcbiAgICAgICAgYyA9PT0gMHgyMDUzIHx8XG4gICAgICAgIChjID49IDB4MjA1NSAmJiBjIDw9IDB4MjA1ZSkgfHxcbiAgICAgICAgKGMgPj0gMHgyMTkwICYmIGMgPD0gMHgyMTk0KSB8fFxuICAgICAgICAoYyA+PSAweDIxOTUgJiYgYyA8PSAweDIxOTkpIHx8XG4gICAgICAgIChjID49IDB4MjE5YSAmJiBjIDw9IDB4MjE5YikgfHxcbiAgICAgICAgKGMgPj0gMHgyMTljICYmIGMgPD0gMHgyMTlmKSB8fFxuICAgICAgICBjID09PSAweDIxYTAgfHxcbiAgICAgICAgKGMgPj0gMHgyMWExICYmIGMgPD0gMHgyMWEyKSB8fFxuICAgICAgICBjID09PSAweDIxYTMgfHxcbiAgICAgICAgKGMgPj0gMHgyMWE0ICYmIGMgPD0gMHgyMWE1KSB8fFxuICAgICAgICBjID09PSAweDIxYTYgfHxcbiAgICAgICAgKGMgPj0gMHgyMWE3ICYmIGMgPD0gMHgyMWFkKSB8fFxuICAgICAgICBjID09PSAweDIxYWUgfHxcbiAgICAgICAgKGMgPj0gMHgyMWFmICYmIGMgPD0gMHgyMWNkKSB8fFxuICAgICAgICAoYyA+PSAweDIxY2UgJiYgYyA8PSAweDIxY2YpIHx8XG4gICAgICAgIChjID49IDB4MjFkMCAmJiBjIDw9IDB4MjFkMSkgfHxcbiAgICAgICAgYyA9PT0gMHgyMWQyIHx8XG4gICAgICAgIGMgPT09IDB4MjFkMyB8fFxuICAgICAgICBjID09PSAweDIxZDQgfHxcbiAgICAgICAgKGMgPj0gMHgyMWQ1ICYmIGMgPD0gMHgyMWYzKSB8fFxuICAgICAgICAoYyA+PSAweDIxZjQgJiYgYyA8PSAweDIyZmYpIHx8XG4gICAgICAgIChjID49IDB4MjMwMCAmJiBjIDw9IDB4MjMwNykgfHxcbiAgICAgICAgYyA9PT0gMHgyMzA4IHx8XG4gICAgICAgIGMgPT09IDB4MjMwOSB8fFxuICAgICAgICBjID09PSAweDIzMGEgfHxcbiAgICAgICAgYyA9PT0gMHgyMzBiIHx8XG4gICAgICAgIChjID49IDB4MjMwYyAmJiBjIDw9IDB4MjMxZikgfHxcbiAgICAgICAgKGMgPj0gMHgyMzIwICYmIGMgPD0gMHgyMzIxKSB8fFxuICAgICAgICAoYyA+PSAweDIzMjIgJiYgYyA8PSAweDIzMjgpIHx8XG4gICAgICAgIGMgPT09IDB4MjMyOSB8fFxuICAgICAgICBjID09PSAweDIzMmEgfHxcbiAgICAgICAgKGMgPj0gMHgyMzJiICYmIGMgPD0gMHgyMzdiKSB8fFxuICAgICAgICBjID09PSAweDIzN2MgfHxcbiAgICAgICAgKGMgPj0gMHgyMzdkICYmIGMgPD0gMHgyMzlhKSB8fFxuICAgICAgICAoYyA+PSAweDIzOWIgJiYgYyA8PSAweDIzYjMpIHx8XG4gICAgICAgIChjID49IDB4MjNiNCAmJiBjIDw9IDB4MjNkYikgfHxcbiAgICAgICAgKGMgPj0gMHgyM2RjICYmIGMgPD0gMHgyM2UxKSB8fFxuICAgICAgICAoYyA+PSAweDIzZTIgJiYgYyA8PSAweDI0MjYpIHx8XG4gICAgICAgIChjID49IDB4MjQyNyAmJiBjIDw9IDB4MjQzZikgfHxcbiAgICAgICAgKGMgPj0gMHgyNDQwICYmIGMgPD0gMHgyNDRhKSB8fFxuICAgICAgICAoYyA+PSAweDI0NGIgJiYgYyA8PSAweDI0NWYpIHx8XG4gICAgICAgIChjID49IDB4MjUwMCAmJiBjIDw9IDB4MjViNikgfHxcbiAgICAgICAgYyA9PT0gMHgyNWI3IHx8XG4gICAgICAgIChjID49IDB4MjViOCAmJiBjIDw9IDB4MjVjMCkgfHxcbiAgICAgICAgYyA9PT0gMHgyNWMxIHx8XG4gICAgICAgIChjID49IDB4MjVjMiAmJiBjIDw9IDB4MjVmNykgfHxcbiAgICAgICAgKGMgPj0gMHgyNWY4ICYmIGMgPD0gMHgyNWZmKSB8fFxuICAgICAgICAoYyA+PSAweDI2MDAgJiYgYyA8PSAweDI2NmUpIHx8XG4gICAgICAgIGMgPT09IDB4MjY2ZiB8fFxuICAgICAgICAoYyA+PSAweDI2NzAgJiYgYyA8PSAweDI3NjcpIHx8XG4gICAgICAgIGMgPT09IDB4Mjc2OCB8fFxuICAgICAgICBjID09PSAweDI3NjkgfHxcbiAgICAgICAgYyA9PT0gMHgyNzZhIHx8XG4gICAgICAgIGMgPT09IDB4Mjc2YiB8fFxuICAgICAgICBjID09PSAweDI3NmMgfHxcbiAgICAgICAgYyA9PT0gMHgyNzZkIHx8XG4gICAgICAgIGMgPT09IDB4Mjc2ZSB8fFxuICAgICAgICBjID09PSAweDI3NmYgfHxcbiAgICAgICAgYyA9PT0gMHgyNzcwIHx8XG4gICAgICAgIGMgPT09IDB4Mjc3MSB8fFxuICAgICAgICBjID09PSAweDI3NzIgfHxcbiAgICAgICAgYyA9PT0gMHgyNzczIHx8XG4gICAgICAgIGMgPT09IDB4Mjc3NCB8fFxuICAgICAgICBjID09PSAweDI3NzUgfHxcbiAgICAgICAgKGMgPj0gMHgyNzk0ICYmIGMgPD0gMHgyN2JmKSB8fFxuICAgICAgICAoYyA+PSAweDI3YzAgJiYgYyA8PSAweDI3YzQpIHx8XG4gICAgICAgIGMgPT09IDB4MjdjNSB8fFxuICAgICAgICBjID09PSAweDI3YzYgfHxcbiAgICAgICAgKGMgPj0gMHgyN2M3ICYmIGMgPD0gMHgyN2U1KSB8fFxuICAgICAgICBjID09PSAweDI3ZTYgfHxcbiAgICAgICAgYyA9PT0gMHgyN2U3IHx8XG4gICAgICAgIGMgPT09IDB4MjdlOCB8fFxuICAgICAgICBjID09PSAweDI3ZTkgfHxcbiAgICAgICAgYyA9PT0gMHgyN2VhIHx8XG4gICAgICAgIGMgPT09IDB4MjdlYiB8fFxuICAgICAgICBjID09PSAweDI3ZWMgfHxcbiAgICAgICAgYyA9PT0gMHgyN2VkIHx8XG4gICAgICAgIGMgPT09IDB4MjdlZSB8fFxuICAgICAgICBjID09PSAweDI3ZWYgfHxcbiAgICAgICAgKGMgPj0gMHgyN2YwICYmIGMgPD0gMHgyN2ZmKSB8fFxuICAgICAgICAoYyA+PSAweDI4MDAgJiYgYyA8PSAweDI4ZmYpIHx8XG4gICAgICAgIChjID49IDB4MjkwMCAmJiBjIDw9IDB4Mjk4MikgfHxcbiAgICAgICAgYyA9PT0gMHgyOTgzIHx8XG4gICAgICAgIGMgPT09IDB4Mjk4NCB8fFxuICAgICAgICBjID09PSAweDI5ODUgfHxcbiAgICAgICAgYyA9PT0gMHgyOTg2IHx8XG4gICAgICAgIGMgPT09IDB4Mjk4NyB8fFxuICAgICAgICBjID09PSAweDI5ODggfHxcbiAgICAgICAgYyA9PT0gMHgyOTg5IHx8XG4gICAgICAgIGMgPT09IDB4Mjk4YSB8fFxuICAgICAgICBjID09PSAweDI5OGIgfHxcbiAgICAgICAgYyA9PT0gMHgyOThjIHx8XG4gICAgICAgIGMgPT09IDB4Mjk4ZCB8fFxuICAgICAgICBjID09PSAweDI5OGUgfHxcbiAgICAgICAgYyA9PT0gMHgyOThmIHx8XG4gICAgICAgIGMgPT09IDB4Mjk5MCB8fFxuICAgICAgICBjID09PSAweDI5OTEgfHxcbiAgICAgICAgYyA9PT0gMHgyOTkyIHx8XG4gICAgICAgIGMgPT09IDB4Mjk5MyB8fFxuICAgICAgICBjID09PSAweDI5OTQgfHxcbiAgICAgICAgYyA9PT0gMHgyOTk1IHx8XG4gICAgICAgIGMgPT09IDB4Mjk5NiB8fFxuICAgICAgICBjID09PSAweDI5OTcgfHxcbiAgICAgICAgYyA9PT0gMHgyOTk4IHx8XG4gICAgICAgIChjID49IDB4Mjk5OSAmJiBjIDw9IDB4MjlkNykgfHxcbiAgICAgICAgYyA9PT0gMHgyOWQ4IHx8XG4gICAgICAgIGMgPT09IDB4MjlkOSB8fFxuICAgICAgICBjID09PSAweDI5ZGEgfHxcbiAgICAgICAgYyA9PT0gMHgyOWRiIHx8XG4gICAgICAgIChjID49IDB4MjlkYyAmJiBjIDw9IDB4MjlmYikgfHxcbiAgICAgICAgYyA9PT0gMHgyOWZjIHx8XG4gICAgICAgIGMgPT09IDB4MjlmZCB8fFxuICAgICAgICAoYyA+PSAweDI5ZmUgJiYgYyA8PSAweDJhZmYpIHx8XG4gICAgICAgIChjID49IDB4MmIwMCAmJiBjIDw9IDB4MmIyZikgfHxcbiAgICAgICAgKGMgPj0gMHgyYjMwICYmIGMgPD0gMHgyYjQ0KSB8fFxuICAgICAgICAoYyA+PSAweDJiNDUgJiYgYyA8PSAweDJiNDYpIHx8XG4gICAgICAgIChjID49IDB4MmI0NyAmJiBjIDw9IDB4MmI0YykgfHxcbiAgICAgICAgKGMgPj0gMHgyYjRkICYmIGMgPD0gMHgyYjczKSB8fFxuICAgICAgICAoYyA+PSAweDJiNzQgJiYgYyA8PSAweDJiNzUpIHx8XG4gICAgICAgIChjID49IDB4MmI3NiAmJiBjIDw9IDB4MmI5NSkgfHxcbiAgICAgICAgYyA9PT0gMHgyYjk2IHx8XG4gICAgICAgIChjID49IDB4MmI5NyAmJiBjIDw9IDB4MmJmZikgfHxcbiAgICAgICAgKGMgPj0gMHgyZTAwICYmIGMgPD0gMHgyZTAxKSB8fFxuICAgICAgICBjID09PSAweDJlMDIgfHxcbiAgICAgICAgYyA9PT0gMHgyZTAzIHx8XG4gICAgICAgIGMgPT09IDB4MmUwNCB8fFxuICAgICAgICBjID09PSAweDJlMDUgfHxcbiAgICAgICAgKGMgPj0gMHgyZTA2ICYmIGMgPD0gMHgyZTA4KSB8fFxuICAgICAgICBjID09PSAweDJlMDkgfHxcbiAgICAgICAgYyA9PT0gMHgyZTBhIHx8XG4gICAgICAgIGMgPT09IDB4MmUwYiB8fFxuICAgICAgICBjID09PSAweDJlMGMgfHxcbiAgICAgICAgYyA9PT0gMHgyZTBkIHx8XG4gICAgICAgIChjID49IDB4MmUwZSAmJiBjIDw9IDB4MmUxNikgfHxcbiAgICAgICAgYyA9PT0gMHgyZTE3IHx8XG4gICAgICAgIChjID49IDB4MmUxOCAmJiBjIDw9IDB4MmUxOSkgfHxcbiAgICAgICAgYyA9PT0gMHgyZTFhIHx8XG4gICAgICAgIGMgPT09IDB4MmUxYiB8fFxuICAgICAgICBjID09PSAweDJlMWMgfHxcbiAgICAgICAgYyA9PT0gMHgyZTFkIHx8XG4gICAgICAgIChjID49IDB4MmUxZSAmJiBjIDw9IDB4MmUxZikgfHxcbiAgICAgICAgYyA9PT0gMHgyZTIwIHx8XG4gICAgICAgIGMgPT09IDB4MmUyMSB8fFxuICAgICAgICBjID09PSAweDJlMjIgfHxcbiAgICAgICAgYyA9PT0gMHgyZTIzIHx8XG4gICAgICAgIGMgPT09IDB4MmUyNCB8fFxuICAgICAgICBjID09PSAweDJlMjUgfHxcbiAgICAgICAgYyA9PT0gMHgyZTI2IHx8XG4gICAgICAgIGMgPT09IDB4MmUyNyB8fFxuICAgICAgICBjID09PSAweDJlMjggfHxcbiAgICAgICAgYyA9PT0gMHgyZTI5IHx8XG4gICAgICAgIChjID49IDB4MmUyYSAmJiBjIDw9IDB4MmUyZSkgfHxcbiAgICAgICAgYyA9PT0gMHgyZTJmIHx8XG4gICAgICAgIChjID49IDB4MmUzMCAmJiBjIDw9IDB4MmUzOSkgfHxcbiAgICAgICAgKGMgPj0gMHgyZTNhICYmIGMgPD0gMHgyZTNiKSB8fFxuICAgICAgICAoYyA+PSAweDJlM2MgJiYgYyA8PSAweDJlM2YpIHx8XG4gICAgICAgIGMgPT09IDB4MmU0MCB8fFxuICAgICAgICBjID09PSAweDJlNDEgfHxcbiAgICAgICAgYyA9PT0gMHgyZTQyIHx8XG4gICAgICAgIChjID49IDB4MmU0MyAmJiBjIDw9IDB4MmU0ZikgfHxcbiAgICAgICAgKGMgPj0gMHgyZTUwICYmIGMgPD0gMHgyZTUxKSB8fFxuICAgICAgICBjID09PSAweDJlNTIgfHxcbiAgICAgICAgKGMgPj0gMHgyZTUzICYmIGMgPD0gMHgyZTdmKSB8fFxuICAgICAgICAoYyA+PSAweDMwMDEgJiYgYyA8PSAweDMwMDMpIHx8XG4gICAgICAgIGMgPT09IDB4MzAwOCB8fFxuICAgICAgICBjID09PSAweDMwMDkgfHxcbiAgICAgICAgYyA9PT0gMHgzMDBhIHx8XG4gICAgICAgIGMgPT09IDB4MzAwYiB8fFxuICAgICAgICBjID09PSAweDMwMGMgfHxcbiAgICAgICAgYyA9PT0gMHgzMDBkIHx8XG4gICAgICAgIGMgPT09IDB4MzAwZSB8fFxuICAgICAgICBjID09PSAweDMwMGYgfHxcbiAgICAgICAgYyA9PT0gMHgzMDEwIHx8XG4gICAgICAgIGMgPT09IDB4MzAxMSB8fFxuICAgICAgICAoYyA+PSAweDMwMTIgJiYgYyA8PSAweDMwMTMpIHx8XG4gICAgICAgIGMgPT09IDB4MzAxNCB8fFxuICAgICAgICBjID09PSAweDMwMTUgfHxcbiAgICAgICAgYyA9PT0gMHgzMDE2IHx8XG4gICAgICAgIGMgPT09IDB4MzAxNyB8fFxuICAgICAgICBjID09PSAweDMwMTggfHxcbiAgICAgICAgYyA9PT0gMHgzMDE5IHx8XG4gICAgICAgIGMgPT09IDB4MzAxYSB8fFxuICAgICAgICBjID09PSAweDMwMWIgfHxcbiAgICAgICAgYyA9PT0gMHgzMDFjIHx8XG4gICAgICAgIGMgPT09IDB4MzAxZCB8fFxuICAgICAgICAoYyA+PSAweDMwMWUgJiYgYyA8PSAweDMwMWYpIHx8XG4gICAgICAgIGMgPT09IDB4MzAyMCB8fFxuICAgICAgICBjID09PSAweDMwMzAgfHxcbiAgICAgICAgYyA9PT0gMHhmZDNlIHx8XG4gICAgICAgIGMgPT09IDB4ZmQzZiB8fFxuICAgICAgICAoYyA+PSAweGZlNDUgJiYgYyA8PSAweGZlNDYpKTtcbn1cbiJdLCJuYW1lcyI6WyJfYSIsIl9fYXNzaWduIiwiRXJyb3JLaW5kIiwiU0tFTEVUT05fVFlQRSIsIlRZUEUiLCJTUEFDRV9TRVBBUkFUT1JfUkVHRVgiLCJwYXJzZU51bWJlclNrZWxldG9uIiwicGFyc2VOdW1iZXJTa2VsZXRvbkZyb21TdHJpbmciLCJwYXJzZURhdGVUaW1lU2tlbGV0b24iLCJnZXRCZXN0UGF0dGVybiIsIlNQQUNFX1NFUEFSQVRPUl9TVEFSVF9SRUdFWCIsIlJlZ0V4cCIsImNvbmNhdCIsInNvdXJjZSIsIlNQQUNFX1NFUEFSQVRPUl9FTkRfUkVHRVgiLCJjcmVhdGVMb2NhdGlvbiIsInN0YXJ0IiwiZW5kIiwiaGFzTmF0aXZlU3RhcnRzV2l0aCIsIlN0cmluZyIsInByb3RvdHlwZSIsInN0YXJ0c1dpdGgiLCJoYXNOYXRpdmVGcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsImhhc05hdGl2ZUZyb21FbnRyaWVzIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJoYXNOYXRpdmVDb2RlUG9pbnRBdCIsImNvZGVQb2ludEF0IiwiaGFzVHJpbVN0YXJ0IiwidHJpbVN0YXJ0IiwiaGFzVHJpbUVuZCIsInRyaW1FbmQiLCJoYXNOYXRpdmVJc1NhZmVJbnRlZ2VyIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIm4iLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImFicyIsIlJFR0VYX1NVUFBPUlRTX1VfQU5EX1kiLCJyZSIsIlJFIiwiZXhlYyIsIl8iLCJzIiwic2VhcmNoIiwicG9zaXRpb24iLCJzbGljZSIsImxlbmd0aCIsImNvZGVQb2ludHMiLCJfaSIsImFyZ3VtZW50cyIsImVsZW1lbnRzIiwiaSIsImNvZGUiLCJSYW5nZUVycm9yIiwiZnJvbUNoYXJDb2RlIiwiZW50cmllcyIsIm9iaiIsImVudHJpZXNfMSIsImsiLCJ2IiwiaW5kZXgiLCJzaXplIiwidW5kZWZpbmVkIiwiZmlyc3QiLCJjaGFyQ29kZUF0Iiwic2Vjb25kIiwicmVwbGFjZSIsImZsYWciLCJtYXRjaElkZW50aWZpZXJBdEluZGV4IiwiSURFTlRJRklFUl9QUkVGSVhfUkVfMSIsImxhc3RJbmRleCIsIm1hdGNoIiwiYyIsIl9pc1doaXRlU3BhY2UiLCJfaXNQYXR0ZXJuU3ludGF4IiwicHVzaCIsImFwcGx5IiwiUGFyc2VyIiwibWVzc2FnZSIsIm9wdGlvbnMiLCJvZmZzZXQiLCJsaW5lIiwiY29sdW1uIiwiaWdub3JlVGFnIiwibG9jYWxlIiwicmVxdWlyZXNPdGhlckNsYXVzZSIsInNob3VsZFBhcnNlU2tlbGV0b25zIiwicGFyc2UiLCJFcnJvciIsInBhcnNlTWVzc2FnZSIsIm5lc3RpbmdMZXZlbCIsInBhcmVudEFyZ1R5cGUiLCJleHBlY3RpbmdDbG9zZVRhZyIsImlzRU9GIiwiY2hhciIsInJlc3VsdCIsInBhcnNlQXJndW1lbnQiLCJlcnIiLCJ2YWwiLCJjbG9uZVBvc2l0aW9uIiwiYnVtcCIsInR5cGUiLCJwb3VuZCIsImxvY2F0aW9uIiwicGVlayIsImVycm9yIiwiVU5NQVRDSEVEX0NMT1NJTkdfVEFHIiwiX2lzQWxwaGEiLCJwYXJzZVRhZyIsInBhcnNlTGl0ZXJhbCIsInN0YXJ0UG9zaXRpb24iLCJ0YWdOYW1lIiwicGFyc2VUYWdOYW1lIiwiYnVtcFNwYWNlIiwiYnVtcElmIiwibGl0ZXJhbCIsInZhbHVlIiwiY2hpbGRyZW5SZXN1bHQiLCJjaGlsZHJlbiIsImVuZFRhZ1N0YXJ0UG9zaXRpb24iLCJJTlZBTElEX1RBRyIsImNsb3NpbmdUYWdOYW1lU3RhcnRQb3NpdGlvbiIsImNsb3NpbmdUYWdOYW1lIiwidGFnIiwiVU5DTE9TRURfVEFHIiwic3RhcnRPZmZzZXQiLCJfaXNQb3RlbnRpYWxFbGVtZW50TmFtZUNoYXIiLCJwYXJzZVF1b3RlUmVzdWx0IiwidHJ5UGFyc2VRdW90ZSIsInBhcnNlVW5xdW90ZWRSZXN1bHQiLCJ0cnlQYXJzZVVucXVvdGVkIiwicGFyc2VMZWZ0QW5nbGVSZXN1bHQiLCJ0cnlQYXJzZUxlZnRBbmdsZUJyYWNrZXQiLCJfaXNBbHBoYU9yU2xhc2giLCJjaCIsIm9wZW5pbmdCcmFjZVBvc2l0aW9uIiwiRVhQRUNUX0FSR1VNRU5UX0NMT1NJTkdfQlJBQ0UiLCJFTVBUWV9BUkdVTUVOVCIsInBhcnNlSWRlbnRpZmllcklmUG9zc2libGUiLCJNQUxGT1JNRURfQVJHVU1FTlQiLCJhcmd1bWVudCIsInBhcnNlQXJndW1lbnRPcHRpb25zIiwic3RhcnRpbmdQb3NpdGlvbiIsImVuZE9mZnNldCIsImJ1bXBUbyIsImVuZFBvc2l0aW9uIiwidHlwZVN0YXJ0UG9zaXRpb24iLCJhcmdUeXBlIiwidHlwZUVuZFBvc2l0aW9uIiwiRVhQRUNUX0FSR1VNRU5UX1RZUEUiLCJzdHlsZUFuZExvY2F0aW9uIiwic3R5bGVTdGFydFBvc2l0aW9uIiwicGFyc2VTaW1wbGVBcmdTdHlsZUlmUG9zc2libGUiLCJzdHlsZSIsIkVYUEVDVF9BUkdVTUVOVF9TVFlMRSIsInN0eWxlTG9jYXRpb24iLCJhcmdDbG9zZVJlc3VsdCIsInRyeVBhcnNlQXJndW1lbnRDbG9zZSIsImxvY2F0aW9uXzEiLCJza2VsZXRvbiIsIm51bWJlciIsIkVYUEVDVF9EQVRFX1RJTUVfU0tFTEVUT04iLCJkYXRlVGltZVBhdHRlcm4iLCJkYXRlVGltZSIsInBhdHRlcm4iLCJwYXJzZWRPcHRpb25zIiwiZGF0ZSIsInRpbWUiLCJ0eXBlRW5kUG9zaXRpb25fMSIsIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfT1BUSU9OUyIsImlkZW50aWZpZXJBbmRMb2NhdGlvbiIsInBsdXJhbE9mZnNldCIsIkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFIiwidHJ5UGFyc2VEZWNpbWFsSW50ZWdlciIsIklOVkFMSURfUExVUkFMX0FSR1VNRU5UX09GRlNFVF9WQUxVRSIsIm9wdGlvbnNSZXN1bHQiLCJ0cnlQYXJzZVBsdXJhbE9yU2VsZWN0T3B0aW9ucyIsImxvY2F0aW9uXzIiLCJzZWxlY3QiLCJwbHVyYWwiLCJwbHVyYWxUeXBlIiwiSU5WQUxJRF9BUkdVTUVOVF9UWVBFIiwibmVzdGVkQnJhY2VzIiwiYXBvc3Ryb3BoZVBvc2l0aW9uIiwiYnVtcFVudGlsIiwiVU5DTE9TRURfUVVPVEVfSU5fQVJHVU1FTlRfU1RZTEUiLCJ0b2tlbnMiLCJlIiwiSU5WQUxJRF9OVU1CRVJfU0tFTEVUT04iLCJleHBlY3RDbG9zZVRhZyIsInBhcnNlZEZpcnN0SWRlbnRpZmllciIsImhhc090aGVyQ2xhdXNlIiwicGFyc2VkU2VsZWN0b3JzIiwiU2V0Iiwic2VsZWN0b3IiLCJzZWxlY3RvckxvY2F0aW9uIiwiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUiIsIklOVkFMSURfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SIiwiaGFzIiwiRFVQTElDQVRFX1NFTEVDVF9BUkdVTUVOVF9TRUxFQ1RPUiIsIkRVUExJQ0FURV9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1IiLCJFWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX1NFTEVDVE9SX0ZSQUdNRU5UIiwiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVCIsImZyYWdtZW50UmVzdWx0IiwiYWRkIiwiRVhQRUNUX1NFTEVDVF9BUkdVTUVOVF9TRUxFQ1RPUiIsIk1JU1NJTkdfT1RIRVJfQ0xBVVNFIiwiZXhwZWN0TnVtYmVyRXJyb3IiLCJpbnZhbGlkTnVtYmVyRXJyb3IiLCJzaWduIiwiaGFzRGlnaXRzIiwiZGVjaW1hbCIsImtpbmQiLCJwcmVmaXgiLCJjdXJyZW50T2Zmc2V0IiwiaW5kZXhPZiIsInRhcmdldE9mZnNldCIsIm1pbiIsIm5leHRDb2RlIiwiY29kZXBvaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvcmVnZXguZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDTyxJQUFJQSxxQkFBcUIsR0FBRyw4Q0FBOEM7QUFDMUUsSUFBSUMsaUJBQWlCLEdBQUcsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanM/YjZiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZ2VuZXJhdGVkIGZyb20gcmVnZXgtZ2VuLnRzXG5leHBvcnQgdmFyIFNQQUNFX1NFUEFSQVRPUl9SRUdFWCA9IC9bIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vO1xuZXhwb3J0IHZhciBXSElURV9TUEFDRV9SRUdFWCA9IC9bXFx0LVxcciBcXHg4NVxcdTIwMEVcXHUyMDBGXFx1MjAyOFxcdTIwMjldLztcbiJdLCJuYW1lcyI6WyJTUEFDRV9TRVBBUkFUT1JfUkVHRVgiLCJXSElURV9TUEFDRV9SRUdFWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeData: () => (/* binding */ timeData)\n/* harmony export */ });\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n  \"001\": [\"H\", \"h\"],\n  \"419\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AD\": [\"H\", \"hB\"],\n  \"AE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"AF\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"AG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AL\": [\"h\", \"H\", \"hB\"],\n  \"AM\": [\"H\", \"hB\"],\n  \"AO\": [\"H\", \"hB\"],\n  \"AR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AS\": [\"h\", \"H\"],\n  \"AT\": [\"H\", \"hB\"],\n  \"AU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AW\": [\"H\", \"hB\"],\n  \"AX\": [\"H\"],\n  \"AZ\": [\"H\", \"hB\", \"h\"],\n  \"BA\": [\"H\", \"hB\", \"h\"],\n  \"BB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BD\": [\"h\", \"hB\", \"H\"],\n  \"BE\": [\"H\", \"hB\"],\n  \"BF\": [\"H\", \"hB\"],\n  \"BG\": [\"H\", \"hB\", \"h\"],\n  \"BH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"BI\": [\"H\", \"h\"],\n  \"BJ\": [\"H\", \"hB\"],\n  \"BL\": [\"H\", \"hB\"],\n  \"BM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BN\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"BO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"BQ\": [\"H\"],\n  \"BR\": [\"H\", \"hB\"],\n  \"BS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BT\": [\"h\", \"H\"],\n  \"BW\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"BY\": [\"H\", \"h\"],\n  \"BZ\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CA\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"CC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CD\": [\"hB\", \"H\"],\n  \"CF\": [\"H\", \"h\", \"hB\"],\n  \"CG\": [\"H\", \"hB\"],\n  \"CH\": [\"H\", \"hB\", \"h\"],\n  \"CI\": [\"H\", \"hB\"],\n  \"CK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CL\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CM\": [\"H\", \"h\", \"hB\"],\n  \"CN\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"CO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CP\": [\"H\"],\n  \"CR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CU\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CV\": [\"H\", \"hB\"],\n  \"CW\": [\"H\", \"hB\"],\n  \"CX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CY\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"CZ\": [\"H\"],\n  \"DE\": [\"H\", \"hB\"],\n  \"DG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"DJ\": [\"h\", \"H\"],\n  \"DK\": [\"H\"],\n  \"DM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"DO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"DZ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"EC\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"EE\": [\"H\", \"hB\"],\n  \"EG\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ER\": [\"h\", \"H\"],\n  \"ES\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"ET\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"FI\": [\"H\"],\n  \"FJ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"FM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FO\": [\"H\", \"h\"],\n  \"FR\": [\"H\", \"hB\"],\n  \"GA\": [\"H\", \"hB\"],\n  \"GB\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GD\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GE\": [\"H\", \"hB\", \"h\"],\n  \"GF\": [\"H\", \"hB\"],\n  \"GG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GH\": [\"h\", \"H\"],\n  \"GI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GL\": [\"H\", \"h\"],\n  \"GM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GN\": [\"H\", \"hB\"],\n  \"GP\": [\"H\", \"hB\"],\n  \"GQ\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"GR\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"GT\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"GU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GW\": [\"H\", \"hB\"],\n  \"GY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"HK\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"HN\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"HR\": [\"H\", \"hB\"],\n  \"HU\": [\"H\", \"h\"],\n  \"IC\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ID\": [\"H\"],\n  \"IE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IL\": [\"H\", \"hB\"],\n  \"IM\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IN\": [\"h\", \"H\"],\n  \"IO\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IQ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"IR\": [\"hB\", \"H\"],\n  \"IS\": [\"H\"],\n  \"IT\": [\"H\", \"hB\"],\n  \"JE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"JM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"JO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"JP\": [\"H\", \"K\", \"h\"],\n  \"KE\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"KG\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KH\": [\"hB\", \"h\", \"H\", \"hb\"],\n  \"KI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KM\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KN\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KP\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KW\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"KY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KZ\": [\"H\", \"hB\"],\n  \"LA\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"LB\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"LC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LI\": [\"H\", \"hB\", \"h\"],\n  \"LK\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"LR\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LS\": [\"h\", \"H\"],\n  \"LT\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"LU\": [\"H\", \"h\", \"hB\"],\n  \"LV\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"LY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"MC\": [\"H\", \"hB\"],\n  \"MD\": [\"H\", \"hB\"],\n  \"ME\": [\"H\", \"hB\", \"h\"],\n  \"MF\": [\"H\", \"hB\"],\n  \"MG\": [\"H\", \"h\"],\n  \"MH\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ML\": [\"H\"],\n  \"MM\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"MN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MP\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MQ\": [\"H\", \"hB\"],\n  \"MR\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MS\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MT\": [\"H\", \"h\"],\n  \"MU\": [\"H\", \"h\"],\n  \"MV\": [\"H\", \"h\"],\n  \"MW\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MX\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"MY\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"MZ\": [\"H\", \"hB\"],\n  \"NA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NC\": [\"H\", \"hB\"],\n  \"NE\": [\"H\"],\n  \"NF\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NI\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NL\": [\"H\", \"hB\"],\n  \"NO\": [\"H\", \"h\"],\n  \"NP\": [\"H\", \"h\", \"hB\"],\n  \"NR\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NU\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"OM\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PF\": [\"H\", \"h\", \"hB\"],\n  \"PG\": [\"h\", \"H\"],\n  \"PH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PK\": [\"h\", \"hB\", \"H\"],\n  \"PL\": [\"H\", \"h\"],\n  \"PM\": [\"H\", \"hB\"],\n  \"PN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"PR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PS\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PT\": [\"H\", \"hB\"],\n  \"PW\": [\"h\", \"H\"],\n  \"PY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"QA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"RE\": [\"H\", \"hB\"],\n  \"RO\": [\"H\", \"hB\"],\n  \"RS\": [\"H\", \"hB\", \"h\"],\n  \"RU\": [\"H\"],\n  \"RW\": [\"H\", \"h\"],\n  \"SA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SC\": [\"H\", \"h\", \"hB\"],\n  \"SD\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SE\": [\"H\"],\n  \"SG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SH\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SI\": [\"H\", \"hB\"],\n  \"SJ\": [\"H\"],\n  \"SK\": [\"H\"],\n  \"SL\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SM\": [\"H\", \"h\", \"hB\"],\n  \"SN\": [\"H\", \"h\", \"hB\"],\n  \"SO\": [\"h\", \"H\"],\n  \"SR\": [\"H\", \"hB\"],\n  \"SS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ST\": [\"H\", \"hB\"],\n  \"SV\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"SX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"TC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TD\": [\"h\", \"H\", \"hB\"],\n  \"TF\": [\"H\", \"h\", \"hB\"],\n  \"TG\": [\"H\", \"hB\"],\n  \"TH\": [\"H\", \"h\"],\n  \"TJ\": [\"H\", \"h\"],\n  \"TL\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"TM\": [\"H\", \"h\"],\n  \"TN\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"TO\": [\"h\", \"H\"],\n  \"TR\": [\"H\", \"hB\"],\n  \"TT\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TW\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"TZ\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UA\": [\"H\", \"hB\", \"h\"],\n  \"UG\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"US\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"UY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"UZ\": [\"H\", \"hB\", \"h\"],\n  \"VA\": [\"H\", \"h\", \"hB\"],\n  \"VC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"VG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VN\": [\"H\", \"h\"],\n  \"VU\": [\"h\", \"H\"],\n  \"WF\": [\"H\", \"hB\"],\n  \"WS\": [\"h\", \"H\"],\n  \"XK\": [\"H\", \"hB\", \"h\"],\n  \"YE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"YT\": [\"H\", \"hB\"],\n  \"ZA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ZM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ZW\": [\"H\", \"h\"],\n  \"af-ZA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ar-001\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ca-ES\": [\"H\", \"h\", \"hB\"],\n  \"en-001\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-HK\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-IL\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"en-MY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"es-BR\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-ES\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-GQ\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"fr-CA\": [\"H\", \"h\", \"hB\"],\n  \"gl-ES\": [\"H\", \"h\", \"hB\"],\n  \"gu-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"hi-IN\": [\"hB\", \"h\", \"H\"],\n  \"it-CH\": [\"H\", \"h\", \"hB\"],\n  \"it-IT\": [\"H\", \"h\", \"hB\"],\n  \"kn-IN\": [\"hB\", \"h\", \"H\"],\n  \"ml-IN\": [\"hB\", \"h\", \"H\"],\n  \"mr-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"pa-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"ta-IN\": [\"hB\", \"h\", \"hb\", \"H\"],\n  \"te-IN\": [\"hB\", \"h\", \"H\"],\n  \"zu-ZA\": [\"H\", \"hB\", \"hb\", \"h\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),\n/* harmony export */   isDateElement: () => (/* binding */ isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),\n/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),\n/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),\n/* harmony export */   isTagElement: () => (/* binding */ isTagElement),\n/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)\n/* harmony export */ });\nvar TYPE;\n(function (TYPE) {\n  /**\n   * Raw text\n   */\n  TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n  /**\n   * Variable w/o any format, e.g `var` in `this is a {var}`\n   */\n  TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n  /**\n   * Variable w/ number format\n   */\n  TYPE[TYPE[\"number\"] = 2] = \"number\";\n  /**\n   * Variable w/ date format\n   */\n  TYPE[TYPE[\"date\"] = 3] = \"date\";\n  /**\n   * Variable w/ time format\n   */\n  TYPE[TYPE[\"time\"] = 4] = \"time\";\n  /**\n   * Variable w/ select format\n   */\n  TYPE[TYPE[\"select\"] = 5] = \"select\";\n  /**\n   * Variable w/ plural format\n   */\n  TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n  /**\n   * Only possible within plural argument.\n   * This is the `#` symbol that will be substituted with the count.\n   */\n  TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n  /**\n   * XML-like tag\n   */\n  TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n  SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n  SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nfunction isLiteralElement(el) {\n  return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n  return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n  return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n  return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n  return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n  return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n  return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n  return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n  return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n  return {\n    type: TYPE.literal,\n    value: value\n  };\n}\nfunction createNumberElement(value, style) {\n  return {\n    type: TYPE.number,\n    value: value,\n    style: style\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsSUFBSTtBQUNmLENBQUMsVUFBVUEsSUFBSSxFQUFFO0VBQ2I7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVM7RUFDckM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVU7RUFDdkM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDbkM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU07RUFDL0I7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU07RUFDL0I7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDbkM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDbkM7QUFDSjtBQUNBO0FBQ0E7RUFDSUEsSUFBSSxDQUFDQSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTztFQUNqQztBQUNKO0FBQ0E7RUFDSUEsSUFBSSxDQUFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUNqQyxDQUFDLEVBQUVBLElBQUksS0FBS0EsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsSUFBSUMsYUFBYTtBQUN4QixDQUFDLFVBQVVBLGFBQWEsRUFBRTtFQUN0QkEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUTtFQUNyREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsVUFBVTtBQUM3RCxDQUFDLEVBQUVBLGFBQWEsS0FBS0EsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekM7QUFDQTtBQUNBO0FBQ08sU0FBU0MsZ0JBQWdCQSxDQUFDQyxFQUFFLEVBQUU7RUFDakMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ0ssT0FBTztBQUNuQztBQUNPLFNBQVNDLGlCQUFpQkEsQ0FBQ0gsRUFBRSxFQUFFO0VBQ2xDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNPLFFBQVE7QUFDcEM7QUFDTyxTQUFTQyxlQUFlQSxDQUFDTCxFQUFFLEVBQUU7RUFDaEMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ1MsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGFBQWFBLENBQUNQLEVBQUUsRUFBRTtFQUM5QixPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDVyxJQUFJO0FBQ2hDO0FBQ08sU0FBU0MsYUFBYUEsQ0FBQ1QsRUFBRSxFQUFFO0VBQzlCLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNhLElBQUk7QUFDaEM7QUFDTyxTQUFTQyxlQUFlQSxDQUFDWCxFQUFFLEVBQUU7RUFDaEMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ2UsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGVBQWVBLENBQUNiLEVBQUUsRUFBRTtFQUNoQyxPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDaUIsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGNBQWNBLENBQUNmLEVBQUUsRUFBRTtFQUMvQixPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDbUIsS0FBSztBQUNqQztBQUNPLFNBQVNDLFlBQVlBLENBQUNqQixFQUFFLEVBQUU7RUFDN0IsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ3FCLEdBQUc7QUFDL0I7QUFDTyxTQUFTQyxnQkFBZ0JBLENBQUNuQixFQUFFLEVBQUU7RUFDakMsT0FBTyxDQUFDLEVBQUVBLEVBQUUsSUFBSSxPQUFPQSxFQUFFLEtBQUssUUFBUSxJQUFJQSxFQUFFLENBQUNDLElBQUksS0FBS0gsYUFBYSxDQUFDUSxNQUFNLENBQUM7QUFDL0U7QUFDTyxTQUFTYyxrQkFBa0JBLENBQUNwQixFQUFFLEVBQUU7RUFDbkMsT0FBTyxDQUFDLEVBQUVBLEVBQUUsSUFBSSxPQUFPQSxFQUFFLEtBQUssUUFBUSxJQUFJQSxFQUFFLENBQUNDLElBQUksS0FBS0gsYUFBYSxDQUFDdUIsUUFBUSxDQUFDO0FBQ2pGO0FBQ08sU0FBU0Msb0JBQW9CQSxDQUFDQyxLQUFLLEVBQUU7RUFDeEMsT0FBTztJQUNIdEIsSUFBSSxFQUFFSixJQUFJLENBQUNLLE9BQU87SUFDbEJxQixLQUFLLEVBQUVBO0VBQ1gsQ0FBQztBQUNMO0FBQ08sU0FBU0MsbUJBQW1CQSxDQUFDRCxLQUFLLEVBQUVFLEtBQUssRUFBRTtFQUM5QyxPQUFPO0lBQ0h4QixJQUFJLEVBQUVKLElBQUksQ0FBQ1MsTUFBTTtJQUNqQmlCLEtBQUssRUFBRUEsS0FBSztJQUNaRSxLQUFLLEVBQUVBO0VBQ1gsQ0FBQztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi90eXBlcy5qcz84ZGQxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgVFlQRTtcbihmdW5jdGlvbiAoVFlQRSkge1xuICAgIC8qKlxuICAgICAqIFJhdyB0ZXh0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wibGl0ZXJhbFwiXSA9IDBdID0gXCJsaXRlcmFsXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy9vIGFueSBmb3JtYXQsIGUuZyBgdmFyYCBpbiBgdGhpcyBpcyBhIHt2YXJ9YFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImFyZ3VtZW50XCJdID0gMV0gPSBcImFyZ3VtZW50XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gbnVtYmVyIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcIm51bWJlclwiXSA9IDJdID0gXCJudW1iZXJcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBkYXRlIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImRhdGVcIl0gPSAzXSA9IFwiZGF0ZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHRpbWUgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1widGltZVwiXSA9IDRdID0gXCJ0aW1lXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gc2VsZWN0IGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInNlbGVjdFwiXSA9IDVdID0gXCJzZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBwbHVyYWwgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicGx1cmFsXCJdID0gNl0gPSBcInBsdXJhbFwiO1xuICAgIC8qKlxuICAgICAqIE9ubHkgcG9zc2libGUgd2l0aGluIHBsdXJhbCBhcmd1bWVudC5cbiAgICAgKiBUaGlzIGlzIHRoZSBgI2Agc3ltYm9sIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCB3aXRoIHRoZSBjb3VudC5cbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJwb3VuZFwiXSA9IDddID0gXCJwb3VuZFwiO1xuICAgIC8qKlxuICAgICAqIFhNTC1saWtlIHRhZ1xuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInRhZ1wiXSA9IDhdID0gXCJ0YWdcIjtcbn0pKFRZUEUgfHwgKFRZUEUgPSB7fSkpO1xuZXhwb3J0IHZhciBTS0VMRVRPTl9UWVBFO1xuKGZ1bmN0aW9uIChTS0VMRVRPTl9UWVBFKSB7XG4gICAgU0tFTEVUT05fVFlQRVtTS0VMRVRPTl9UWVBFW1wibnVtYmVyXCJdID0gMF0gPSBcIm51bWJlclwiO1xuICAgIFNLRUxFVE9OX1RZUEVbU0tFTEVUT05fVFlQRVtcImRhdGVUaW1lXCJdID0gMV0gPSBcImRhdGVUaW1lXCI7XG59KShTS0VMRVRPTl9UWVBFIHx8IChTS0VMRVRPTl9UWVBFID0ge30pKTtcbi8qKlxuICogVHlwZSBHdWFyZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5saXRlcmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJndW1lbnRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuYXJndW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubnVtYmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5kYXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50aW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLnNlbGVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BsdXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wbHVyYWw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQb3VuZEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wb3VuZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ0VsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50YWc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJTa2VsZXRvbihlbCkge1xuICAgIHJldHVybiAhIShlbCAmJiB0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLnR5cGUgPT09IFNLRUxFVE9OX1RZUEUubnVtYmVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVUaW1lU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSBTS0VMRVRPTl9UWVBFLmRhdGVUaW1lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXRlcmFsRWxlbWVudCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEUubGl0ZXJhbCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVyRWxlbWVudCh2YWx1ZSwgc3R5bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLm51bWJlcixcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJUWVBFIiwiU0tFTEVUT05fVFlQRSIsImlzTGl0ZXJhbEVsZW1lbnQiLCJlbCIsInR5cGUiLCJsaXRlcmFsIiwiaXNBcmd1bWVudEVsZW1lbnQiLCJhcmd1bWVudCIsImlzTnVtYmVyRWxlbWVudCIsIm51bWJlciIsImlzRGF0ZUVsZW1lbnQiLCJkYXRlIiwiaXNUaW1lRWxlbWVudCIsInRpbWUiLCJpc1NlbGVjdEVsZW1lbnQiLCJzZWxlY3QiLCJpc1BsdXJhbEVsZW1lbnQiLCJwbHVyYWwiLCJpc1BvdW5kRWxlbWVudCIsInBvdW5kIiwiaXNUYWdFbGVtZW50IiwidGFnIiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzRGF0ZVRpbWVTa2VsZXRvbiIsImRhdGVUaW1lIiwiY3JlYXRlTGl0ZXJhbEVsZW1lbnQiLCJ2YWx1ZSIsImNyZWF0ZU51bWJlckVsZW1lbnQiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)\n/* harmony export */ });\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n      case 'E':\n        result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n      case 'b': // am, pm, noon, midnight\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n      // Zone\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n      case 'O': // 1, 4: milliseconds in day short, long\n      case 'v': // 1, 4: generic non-location format\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n    }\n    return '';\n  });\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2RhdGUtdGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLGVBQWUsR0FBRywyS0FBMks7QUFDak07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MscUJBQXFCQSxDQUFDQyxRQUFRLEVBQUU7RUFDNUMsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNmRCxRQUFRLENBQUNFLE9BQU8sQ0FBQ0osZUFBZSxFQUFFLFVBQVVLLEtBQUssRUFBRTtJQUMvQyxJQUFJQyxHQUFHLEdBQUdELEtBQUssQ0FBQ0UsTUFBTTtJQUN0QixRQUFRRixLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ1o7TUFDQSxLQUFLLEdBQUc7UUFDSkYsTUFBTSxDQUFDSyxHQUFHLEdBQUdGLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFBTSxHQUFHQSxHQUFHLEtBQUssQ0FBQyxHQUFHLFFBQVEsR0FBRyxPQUFPO1FBQ2hFO01BQ0o7TUFDQSxLQUFLLEdBQUc7UUFDSkgsTUFBTSxDQUFDTSxJQUFJLEdBQUdILEdBQUcsS0FBSyxDQUFDLEdBQUcsU0FBUyxHQUFHLFNBQVM7UUFDL0M7TUFDSixLQUFLLEdBQUc7TUFDUixLQUFLLEdBQUc7TUFDUixLQUFLLEdBQUc7TUFDUixLQUFLLEdBQUc7UUFDSixNQUFNLElBQUlJLFVBQVUsQ0FBQyw4REFBOEQsQ0FBQztNQUN4RjtNQUNBLEtBQUssR0FBRztNQUNSLEtBQUssR0FBRztRQUNKLE1BQU0sSUFBSUEsVUFBVSxDQUFDLDRDQUE0QyxDQUFDO01BQ3RFO01BQ0EsS0FBSyxHQUFHO01BQ1IsS0FBSyxHQUFHO1FBQ0pQLE1BQU0sQ0FBQ1EsS0FBSyxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDTCxHQUFHLEdBQUcsQ0FB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LENBQUMsNERBQTRELENBQUM7TUFDdEY7TUFDQSxLQUFLLEdBQUc7UUFBRTtRQUNOUCxNQUFNLENBQUNnQixZQUFZLEdBQUdiLEdBQUcsR0FBRyxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU07UUFDaEQ7TUFDSixLQUFLLEdBQUcsQ0FBQyxDQUFDO01BQ1YsS0FBSyxHQUFHLENBQUMsQ0FBQztNQUNWLEtBQUssR0FBRyxDQUFDLENBQUM7TUFDVixLQUFLLEdBQUcsQ0FBQyxDQUFDO01BQ1YsS0FBSyxHQUFHLENBQUMsQ0FBQztNQUNWLEtBQUssR0FBRztRQUFFO1FBQ04sTUFBTSxJQUFJSSxVQUFVLENBQUMsc0VBQXNFLENBQUM7SUFDcEc7SUFDQSxPQUFPLEVBQUU7RUFDYixDQUFDLENBQUM7RUFDRixPQUFPUCxNQUFNO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LXNrZWxldG9uLXBhcnNlci9saWIvZGF0ZS10aW1lLmpzP2NiODIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBodHRwczovL3VuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIENyZWRpdDogaHR0cHM6Ly9naXRodWIuY29tL2NhcmlkeS9pbnRsLWRhdGV0aW1lZm9ybWF0LXBhdHRlcm4vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAqIHdpdGggc29tZSB0d2Vha3NcbiAqL1xudmFyIERBVEVfVElNRV9SRUdFWCA9IC8oPzpbRWVjXXsxLDZ9fEd7MSw1fXxbUXFdezEsNX18KD86W3lZdXJdK3xVezEsNX0pfFtNTF17MSw1fXxkezEsMn18RHsxLDN9fEZ7MX18W2FiQl17MSw1fXxbaGtIS117MSwyfXx3ezEsMn18V3sxfXxtezEsMn18c3sxLDJ9fFt6Wk92VnhYXXsxLDR9KSg/PShbXiddKidbXiddKicpKlteJ10qJCkvZztcbi8qKlxuICogUGFyc2UgRGF0ZSB0aW1lIHNrZWxldG9uIGludG8gSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnNcbiAqIFJlZjogaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gc2tlbGV0b24gc2tlbGV0b24gc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGVUaW1lU2tlbGV0b24oc2tlbGV0b24pIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgc2tlbGV0b24ucmVwbGFjZShEQVRFX1RJTUVfUkVHRVgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICB2YXIgbGVuID0gbWF0Y2gubGVuZ3RoO1xuICAgICAgICBzd2l0Y2ggKG1hdGNoWzBdKSB7XG4gICAgICAgICAgICAvLyBFcmFcbiAgICAgICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5lcmEgPSBsZW4gPT09IDQgPyAnbG9uZycgOiBsZW4gPT09IDUgPyAnbmFycm93JyA6ICdzaG9ydCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBZZWFyXG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQueWVhciA9IGxlbiA9PT0gMiA/ICcyLWRpZ2l0JyA6ICdudW1lcmljJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgWS91L1UvcmAgKHllYXIpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYHlgIGluc3RlYWQnKTtcbiAgICAgICAgICAgIC8vIFF1YXJ0ZXJcbiAgICAgICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BxL1FgIChxdWFydGVyKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgLy8gTW9udGhcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1vbnRoID0gWydudW1lcmljJywgJzItZGlnaXQnLCAnc2hvcnQnLCAnbG9uZycsICduYXJyb3cnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIFdlZWtcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2B3L1dgICh3ZWVrKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmRheSA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BEL0YvZ2AgKGRheSkgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgZGAgaW5zdGVhZCcpO1xuICAgICAgICAgICAgLy8gV2Vla2RheVxuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LndlZWtkYXkgPSBsZW4gPT09IDQgPyAnbG9uZycgOiBsZW4gPT09IDUgPyAnbmFycm93JyA6ICdzaG9ydCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgICAgICBpZiAobGVuIDwgNCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYGUuLmVlZWAgKHdlZWtkYXkpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC53ZWVrZGF5ID0gWydzaG9ydCcsICdsb25nJywgJ25hcnJvdycsICdzaG9ydCddW2xlbiAtIDRdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgaWYgKGxlbiA8IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BjLi5jY2NgICh3ZWVrZGF5KSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQud2Vla2RheSA9IFsnc2hvcnQnLCAnbG9uZycsICduYXJyb3cnLCAnc2hvcnQnXVtsZW4gLSA0XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIFBlcmlvZFxuICAgICAgICAgICAgY2FzZSAnYSc6IC8vIEFNLCBQTVxuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyMTIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYic6IC8vIGFtLCBwbSwgbm9vbiwgbWlkbmlnaHRcbiAgICAgICAgICAgIGNhc2UgJ0InOiAvLyBmbGV4aWJsZSBkYXkgcGVyaW9kc1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgYi9CYCAocGVyaW9kKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCwgdXNlIGBhYCBpbnN0ZWFkJyk7XG4gICAgICAgICAgICAvLyBIb3VyXG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ckN5Y2xlID0gJ2gxMic7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXIgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXJDeWNsZSA9ICdoMjMnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyID0gWydudW1lcmljJywgJzItZGlnaXQnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0snOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyQ3ljbGUgPSAnaDExJztcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ciA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdrJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ckN5Y2xlID0gJ2gyNCc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXIgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaic6XG4gICAgICAgICAgICBjYXNlICdKJzpcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgai9KL0NgIChob3VyKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCwgdXNlIGBoL0gvSy9rYCBpbnN0ZWFkJyk7XG4gICAgICAgICAgICAvLyBNaW51dGVcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5taW51dGUgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gU2Vjb25kXG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuc2Vjb25kID0gWydudW1lcmljJywgJzItZGlnaXQnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BTL0FgIChzZWNvbmQpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYHNgIGluc3RlYWQnKTtcbiAgICAgICAgICAgIC8vIFpvbmVcbiAgICAgICAgICAgIGNhc2UgJ3onOiAvLyAxLi4zLCA0OiBzcGVjaWZpYyBub24tbG9jYXRpb24gZm9ybWF0XG4gICAgICAgICAgICAgICAgcmVzdWx0LnRpbWVab25lTmFtZSA9IGxlbiA8IDQgPyAnc2hvcnQnIDogJ2xvbmcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnWic6IC8vIDEuLjMsIDQsIDU6IFRoZSBJU084NjAxIHZhcmlvcyBmb3JtYXRzXG4gICAgICAgICAgICBjYXNlICdPJzogLy8gMSwgNDogbWlsbGlzZWNvbmRzIGluIGRheSBzaG9ydCwgbG9uZ1xuICAgICAgICAgICAgY2FzZSAndic6IC8vIDEsIDQ6IGdlbmVyaWMgbm9uLWxvY2F0aW9uIGZvcm1hdFxuICAgICAgICAgICAgY2FzZSAnVic6IC8vIDEsIDIsIDMsIDQ6IHRpbWUgem9uZSBJRCBvciBjaXR5XG4gICAgICAgICAgICBjYXNlICdYJzogLy8gMSwgMiwgMywgNDogVGhlIElTTzg2MDEgdmFyaW9zIGZvcm1hdHNcbiAgICAgICAgICAgIGNhc2UgJ3gnOiAvLyAxLCAyLCAzLCA0OiBUaGUgSVNPODYwMSB2YXJpb3MgZm9ybWF0c1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgWi9PL3YvVi9YL3hgICh0aW1lWm9uZSkgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgemAgaW5zdGVhZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbIkRBVEVfVElNRV9SRUdFWCIsInBhcnNlRGF0ZVRpbWVTa2VsZXRvbiIsInNrZWxldG9uIiwicmVzdWx0IiwicmVwbGFjZSIsIm1hdGNoIiwibGVuIiwibGVuZ3RoIiwiZXJhIiwieWVhciIsIlJhbmdlRXJyb3IiLCJtb250aCIsImRheSIsIndlZWtkYXkiLCJob3VyMTIiLCJob3VyQ3ljbGUiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwidGltZVpvbmVOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),\n/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\");\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LXNrZWxldG9uLXBhcnNlci9saWIvaW5kZXguanM/YzAxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2RhdGUtdGltZSc7XG5leHBvcnQgKiBmcm9tICcuL251bWJlcic7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!******************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\");\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  if (str[str.length - 1] === 'r') {\n    result.roundingPriority = 'morePrecision';\n  } else if (str[str.length - 1] === 's') {\n    result.roundingPriority = 'lessPrecision';\n  }\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      case 'rounding-mode-floor':\n        result.roundingMode = 'floor';\n        continue;\n      case 'rounding-mode-ceiling':\n        result.roundingMode = 'ceil';\n        continue;\n      case 'rounding-mode-down':\n        result.roundingMode = 'trunc';\n        continue;\n      case 'rounding-mode-up':\n        result.roundingMode = 'expand';\n        continue;\n      case 'rounding-mode-half-even':\n        result.roundingMode = 'halfEven';\n        continue;\n      case 'rounding-mode-half-down':\n        result.roundingMode = 'halfTrunc';\n        continue;\n      case 'rounding-mode-half-up':\n        result.roundingMode = 'halfExpand';\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      var opt = token.options[0];\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n      if (opt === 'w') {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          trailingZeroDisplay: 'stripIfInteger'\n        });\n      } else if (opt) {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTyxJQUFJQSxpQkFBaUIsR0FBRyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3Utc2tlbGV0b24tcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanM/MTFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZ2VuZXJhdGVkIGZyb20gcmVnZXgtZ2VuLnRzXG5leHBvcnQgdmFyIFdISVRFX1NQQUNFX1JFR0VYID0gL1tcXHQtXFxyIFxceDg1XFx1MjAwRVxcdTIwMEZcXHUyMDI4XFx1MjAyOV0vaTtcbiJdLCJuYW1lcyI6WyJXSElURV9TUEFDRV9SRUdFWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoize: () => (/* binding */ memoize),\n/* harmony export */   strategies: () => (/* binding */ strategies)\n/* harmony export */ });\n//\n// Main\n//\nfunction memoize(fn, options) {\n  var cache = options && options.cache ? options.cache : cacheDefault;\n  var serializer = options && options.serializer ? options.serializer : serializerDefault;\n  var strategy = options && options.strategy ? options.strategy : strategyDefault;\n  return strategy(fn, {\n    cache: cache,\n    serializer: serializer\n  });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic(fn, cache, serializer, arg) {\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.call(this, arg);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n  var args = Array.prototype.slice.call(arguments, 3);\n  var cacheKey = serializer(args);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.apply(this, args);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n  return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n  var strategy = fn.length === 1 ? monadic : variadic;\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n  return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n  return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n  return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nvar ObjectWithoutPrototypeCache = /** @class */function () {\n  function ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n  }\n  ObjectWithoutPrototypeCache.prototype.get = function (key) {\n    return this.cache[key];\n  };\n  ObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n    this.cache[key] = value;\n  };\n  return ObjectWithoutPrototypeCache;\n}();\nvar cacheDefault = {\n  create: function create() {\n    return new ObjectWithoutPrototypeCache();\n  }\n};\nvar strategies = {\n  variadic: strategyVariadic,\n  monadic: strategyMonadic\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)\n/* harmony export */ });\n/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\");\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */\nfunction getBestPattern(skeleton, locale) {\n  var skeletonCopy = '';\n  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {\n    var patternChar = skeleton.charAt(patternPos);\n    if (patternChar === 'j') {\n      var extraLength = 0;\n      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {\n        extraLength++;\n        patternPos++;\n      }\n      var hourLen = 1 + (extraLength & 1);\n      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n      var dayPeriodChar = 'a';\n      var hourChar = getDefaultHourSymbolFromLocale(locale);\n      if (hourChar == 'H' || hourChar == 'k') {\n        dayPeriodLen = 0;\n      }\n      while (dayPeriodLen-- > 0) {\n        skeletonCopy += dayPeriodChar;\n      }\n      while (hourLen-- > 0) {\n        skeletonCopy = hourChar + skeletonCopy;\n      }\n    } else if (patternChar === 'J') {\n      skeletonCopy += 'H';\n    } else {\n      skeletonCopy += patternChar;\n    }\n  }\n  return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */\nfunction getDefaultHourSymbolFromLocale(locale) {\n  var hourCycle = locale.hourCycle;\n  if (hourCycle === undefined &&\n  // @ts-ignore hourCycle(s) is not identified yet\n  locale.hourCycles &&\n  // @ts-ignore\n  locale.hourCycles.length) {\n    // @ts-ignore\n    hourCycle = locale.hourCycles[0];\n  }\n  if (hourCycle) {\n    switch (hourCycle) {\n      case 'h24':\n        return 'k';\n      case 'h23':\n        return 'H';\n      case 'h12':\n        return 'h';\n      case 'h11':\n        return 'K';\n      default:\n        throw new Error('Invalid hourCycle');\n    }\n  }\n  // TODO: Once hourCycle is fully supported remove the following with data generation\n  var languageTag = locale.language;\n  var regionTag;\n  if (languageTag !== 'root') {\n    regionTag = locale.maximize().region;\n  }\n  var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"\".concat(languageTag, \"-001\")] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData['001'];\n  return hourCycles[0];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsY0FBY0EsQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLEVBQUU7RUFDN0MsSUFBSUMsWUFBWSxHQUFHLEVBQUU7RUFDckIsS0FBSyxJQUFJQyxVQUFVLEdBQUcsQ0FBQyxFQUFFQSxVQUFVLEdBQUdILFFBQVEsQ0FBQ0ksTUFBTSxFQUFFRCxVQUFVLEVBQUUsRUFBRTtJQUNqRSxJQUFJRSxXQUFXLEdBQUdMLFFBQVEsQ0FBQ00sTUFBTSxDQUFDSCxVQUFVLENBQUM7SUFDN0MsSUFBSUUsV0FBVyxLQUFLLEdBQUcsRUFBRTtNQUNyQixJQUFJRSxXQUFXLEdBQUcsQ0FBQztNQUNuQixPQUFPSixVQUFVLEdBQUcsQ0FBQyxHQUFHSCxRQUFRLENBQUNJLE1BQU0sSUFDbkNKLFFBQVEsQ0FBQ00sTUFBTSxDQUFDSCxVQUFVLEdBQUcsQ0FBQyxDQUFDLEtBQUtFLFdBQVcsRUFBRTtRQUNqREUsV0FBVyxFQUFFO1FBQ2JKLFVBQVUsRUFBRTtNQUNoQjtNQUNBLElBQUlLLE9BQU8sR0FBRyxDQUFDLElBQUlELFdBQVcsR0FBRyxDQUFDLENBQUM7TUFDbkMsSUFBSUUsWUFBWSxHQUFHRixXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUlBLFdBQVcsSUFBSSxDQUFDLENBQUM7TUFDL0QsSUFBSUcsYUFBYSxHQUFHLEdBQUc7TUFDdkIsSUFBSUMsUUFBUSxHQUFHQyw4QkFBOEIsQ0FBQ1gsTUFBTSxDQUFDO01BQ3JELElBQUlVLFFBQVEsSUFBSSxHQUFHLElBQUlBLFFBQVEsSUFBSSxHQUFHLEVBQUU7UUFDcENGLFlBQVksR0FBRyxDQUFDO01BQ3BCO01BQ0EsT0FBT0EsWUFBWSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCUCxZQUFZLElBQUlRLGFBQWE7TUFDakM7TUFDQSxPQUFPRixPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDbEJOLFlBQVksR0FBR1MsUUFBUSxHQUFHVCxZQUFZO01BQzFDO0lBQ0osQ0FBQyxNQUNJLElBQUlHLFdBQVcsS0FBSyxHQUFHLEVBQUU7TUFDMUJILFlBQVksSUFBSSxHQUFHO0lBQ3ZCLENBQUMsTUFDSTtNQUNEQSxZQUFZLElBQUlHLFdBQVc7SUFDL0I7RUFDSjtFQUNBLE9BQU9ILFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1UsOEJBQThCQSxDQUFDWCxNQUFNLEVBQUU7RUFDNUMsSUFBSVksU0FBUyxHQUFHWixNQUFNLENBQUNZLFNBQVM7RUFDaEMsSUFBSUEsU0FBUyxLQUFLQyxTQUFTO0VBQ3ZCO0VBQ0FiLE1BQU0sQ0FBQ2MsVUFBVTtFQUNqQjtFQUNBZCxNQUFNLENBQUNjLFVBQVUsQ0FBQ1gsTUFBTSxFQUFFO0lBQzFCO0lBQ0FTLFNBQVMsR0FBR1osTUFBTSxDQUFDYyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3BDO0VBQ0EsSUFBSUYsU0FBUyxFQUFFO0lBQ1gsUUFBUUEsU0FBUztNQUNiLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkLEtBQUssS0FBSztRQUNOLE9BQU8sR0FBRztNQUNkO1FBQ0ksTUFBTSxJQUFJRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7SUFDNUM7RUFDSjtFQUNBO0VBQ0EsSUFBSUMsV0FBVyxHQUFHaEIsTUFBTSxDQUFDaUIsUUFBUTtFQUNqQyxJQUFJQyxTQUFTO0VBQ2IsSUFBSUYsV0FBVyxLQUFLLE1BQU0sRUFBRTtJQUN4QkUsU0FBUyxHQUFHbEIsTUFBTSxDQUFDbUIsUUFBUSxDQUFDLENBQUMsQ0FBQ0MsTUFBTTtFQUN4QztFQUNBLElBQUlOLFVBQVUsR0FBR2pCLDBEQUFRLENBQUNxQixTQUFTLElBQUksRUFBRSxDQUFDLElBQ3RDckIsMERBQVEsQ0FBQ21CLFdBQVcsSUFBSSxFQUFFLENBQUMsSUFDM0JuQiwwREFBUSxDQUFDLEVBQUUsQ0FBQ3dCLE1BQU0sQ0FBQ0wsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQ3hDbkIsMERBQVEsQ0FBQyxLQUFLLENBQUM7RUFDbkIsT0FBT2lCLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2RhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvci5qcz9mN2VjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRpbWVEYXRhIH0gZnJvbSAnLi90aW1lLWRhdGEuZ2VuZXJhdGVkJztcbi8qKlxuICogUmV0dXJucyB0aGUgYmVzdCBtYXRjaGluZyBkYXRlIHRpbWUgcGF0dGVybiBpZiBhIGRhdGUgdGltZSBza2VsZXRvblxuICogcGF0dGVybiBpcyBwcm92aWRlZCB3aXRoIGEgbG9jYWxlLiBGb2xsb3dzIHRoZSBVbmljb2RlIHNwZWNpZmljYXRpb246XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI3RhYmxlLW1hcHBpbmctcmVxdWVzdGVkLXRpbWUtc2tlbGV0b25zLXRvLXBhdHRlcm5zXG4gKiBAcGFyYW0gc2tlbGV0b24gZGF0ZSB0aW1lIHNrZWxldG9uIHBhdHRlcm4gdGhhdCBwb3NzaWJseSBpbmNsdWRlcyBqLCBKIG9yIENcbiAqIEBwYXJhbSBsb2NhbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RQYXR0ZXJuKHNrZWxldG9uLCBsb2NhbGUpIHtcbiAgICB2YXIgc2tlbGV0b25Db3B5ID0gJyc7XG4gICAgZm9yICh2YXIgcGF0dGVyblBvcyA9IDA7IHBhdHRlcm5Qb3MgPCBza2VsZXRvbi5sZW5ndGg7IHBhdHRlcm5Qb3MrKykge1xuICAgICAgICB2YXIgcGF0dGVybkNoYXIgPSBza2VsZXRvbi5jaGFyQXQocGF0dGVyblBvcyk7XG4gICAgICAgIGlmIChwYXR0ZXJuQ2hhciA9PT0gJ2onKSB7XG4gICAgICAgICAgICB2YXIgZXh0cmFMZW5ndGggPSAwO1xuICAgICAgICAgICAgd2hpbGUgKHBhdHRlcm5Qb3MgKyAxIDwgc2tlbGV0b24ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgc2tlbGV0b24uY2hhckF0KHBhdHRlcm5Qb3MgKyAxKSA9PT0gcGF0dGVybkNoYXIpIHtcbiAgICAgICAgICAgICAgICBleHRyYUxlbmd0aCsrO1xuICAgICAgICAgICAgICAgIHBhdHRlcm5Qb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBob3VyTGVuID0gMSArIChleHRyYUxlbmd0aCAmIDEpO1xuICAgICAgICAgICAgdmFyIGRheVBlcmlvZExlbiA9IGV4dHJhTGVuZ3RoIDwgMiA/IDEgOiAzICsgKGV4dHJhTGVuZ3RoID4+IDEpO1xuICAgICAgICAgICAgdmFyIGRheVBlcmlvZENoYXIgPSAnYSc7XG4gICAgICAgICAgICB2YXIgaG91ckNoYXIgPSBnZXREZWZhdWx0SG91clN5bWJvbEZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICAgICAgICAgIGlmIChob3VyQ2hhciA9PSAnSCcgfHwgaG91ckNoYXIgPT0gJ2snKSB7XG4gICAgICAgICAgICAgICAgZGF5UGVyaW9kTGVuID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChkYXlQZXJpb2RMZW4tLSA+IDApIHtcbiAgICAgICAgICAgICAgICBza2VsZXRvbkNvcHkgKz0gZGF5UGVyaW9kQ2hhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChob3VyTGVuLS0gPiAwKSB7XG4gICAgICAgICAgICAgICAgc2tlbGV0b25Db3B5ID0gaG91ckNoYXIgKyBza2VsZXRvbkNvcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGF0dGVybkNoYXIgPT09ICdKJykge1xuICAgICAgICAgICAgc2tlbGV0b25Db3B5ICs9ICdIJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNrZWxldG9uQ29weSArPSBwYXR0ZXJuQ2hhcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2tlbGV0b25Db3B5O1xufVxuLyoqXG4gKiBNYXBzIHRoZSBbaG91ciBjeWNsZSB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0xvY2FsZS9ob3VyQ3ljbGUpXG4gKiBvZiB0aGUgZ2l2ZW4gYGxvY2FsZWAgdG8gdGhlIGNvcnJlc3BvbmRpbmcgdGltZSBwYXR0ZXJuLlxuICogQHBhcmFtIGxvY2FsZVxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0SG91clN5bWJvbEZyb21Mb2NhbGUobG9jYWxlKSB7XG4gICAgdmFyIGhvdXJDeWNsZSA9IGxvY2FsZS5ob3VyQ3ljbGU7XG4gICAgaWYgKGhvdXJDeWNsZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgaG91ckN5Y2xlKHMpIGlzIG5vdCBpZGVudGlmaWVkIHlldFxuICAgICAgICBsb2NhbGUuaG91ckN5Y2xlcyAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxvY2FsZS5ob3VyQ3ljbGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGhvdXJDeWNsZSA9IGxvY2FsZS5ob3VyQ3ljbGVzWzBdO1xuICAgIH1cbiAgICBpZiAoaG91ckN5Y2xlKSB7XG4gICAgICAgIHN3aXRjaCAoaG91ckN5Y2xlKSB7XG4gICAgICAgICAgICBjYXNlICdoMjQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnayc7XG4gICAgICAgICAgICBjYXNlICdoMjMnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSCc7XG4gICAgICAgICAgICBjYXNlICdoMTInOlxuICAgICAgICAgICAgICAgIHJldHVybiAnaCc7XG4gICAgICAgICAgICBjYXNlICdoMTEnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSyc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBob3VyQ3ljbGUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUT0RPOiBPbmNlIGhvdXJDeWNsZSBpcyBmdWxseSBzdXBwb3J0ZWQgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgd2l0aCBkYXRhIGdlbmVyYXRpb25cbiAgICB2YXIgbGFuZ3VhZ2VUYWcgPSBsb2NhbGUubGFuZ3VhZ2U7XG4gICAgdmFyIHJlZ2lvblRhZztcbiAgICBpZiAobGFuZ3VhZ2VUYWcgIT09ICdyb290Jykge1xuICAgICAgICByZWdpb25UYWcgPSBsb2NhbGUubWF4aW1pemUoKS5yZWdpb247XG4gICAgfVxuICAgIHZhciBob3VyQ3ljbGVzID0gdGltZURhdGFbcmVnaW9uVGFnIHx8ICcnXSB8fFxuICAgICAgICB0aW1lRGF0YVtsYW5ndWFnZVRhZyB8fCAnJ10gfHxcbiAgICAgICAgdGltZURhdGFbXCJcIi5jb25jYXQobGFuZ3VhZ2VUYWcsIFwiLTAwMVwiKV0gfHxcbiAgICAgICAgdGltZURhdGFbJzAwMSddO1xuICAgIHJldHVybiBob3VyQ3ljbGVzWzBdO1xufVxuIl0sIm5hbWVzIjpbInRpbWVEYXRhIiwiZ2V0QmVzdFBhdHRlcm4iLCJza2VsZXRvbiIsImxvY2FsZSIsInNrZWxldG9uQ29weSIsInBhdHRlcm5Qb3MiLCJsZW5ndGgiLCJwYXR0ZXJuQ2hhciIsImNoYXJBdCIsImV4dHJhTGVuZ3RoIiwiaG91ckxlbiIsImRheVBlcmlvZExlbiIsImRheVBlcmlvZENoYXIiLCJob3VyQ2hhciIsImdldERlZmF1bHRIb3VyU3ltYm9sRnJvbUxvY2FsZSIsImhvdXJDeWNsZSIsInVuZGVmaW5lZCIsImhvdXJDeWNsZXMiLCJFcnJvciIsImxhbmd1YWdlVGFnIiwibGFuZ3VhZ2UiLCJyZWdpb25UYWciLCJtYXhpbWl6ZSIsInJlZ2lvbiIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)\n/* harmony export */ });\nvar ErrorKind;\n(function (ErrorKind) {\n  /** Argument is unclosed (e.g. `{0`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n  /** Argument is empty (e.g. `{}`). */\n  ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n  /** Argument is malformed (e.g. `{foo!}``) */\n  ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n  /** Expect an argument type (e.g. `{foo,}`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n  /** Unsupported argument type (e.g. `{foo,foo}`) */\n  ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n  /** Expect an argument style (e.g. `{foo, number, }`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n  /** The number skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n  /** The date time skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n  /** Missing select argument options (e.g. `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n  /**\n   * Expecting a message fragment after the `plural` or `selectordinal` selector\n   * (e.g. `{foo, plural, one}`)\n   */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n  /**\n   * Duplicate selectors in `plural` or `selectordinal` argument.\n   * (e.g. {foo, plural, one {#} one {#}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n  /** Duplicate selectors in `select` argument.\n   * (e.g. {foo, select, apple {apple} apple {apple}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n  /** Plural or select argument option must have `other` clause. */\n  ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n  ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n  /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n  ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n  ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),\n/* harmony export */   _Parser: () => (/* binding */ _Parser),\n/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),\n/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),\n/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),\n/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),\n/* harmony export */   isStructurallySame: () => (/* reexport safe */ _manipulator__WEBPACK_IMPORTED_MODULE_4__.isStructurallySame),\n/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),\n/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _manipulator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./manipulator */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\");\n\n\n\n\nfunction pruneLocation(els) {\n  els.forEach(function (el) {\n    delete el.location;\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {\n      for (var k in el.options) {\n        delete el.options[k].location;\n        pruneLocation(el.options[k].value);\n      }\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {\n      pruneLocation(el.children);\n    }\n  });\n}\nfunction parse(message, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n    shouldParseSkeletons: true,\n    requiresOtherClause: true\n  }, opts);\n  var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();\n  if (result.err) {\n    var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);\n    // @ts-expect-error Assign to error object\n    error.location = result.err.location;\n    // @ts-expect-error Assign to error object\n    error.originalMessage = result.err.message;\n    throw error;\n  }\n  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n    pruneLocation(result.val);\n  }\n  return result.val;\n}\n\n// only for testing\nvar _Parser = _parser__WEBPACK_IMPORTED_MODULE_1__.Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNGO0FBQzZIO0FBQy9KLFNBQVNXLGFBQWFBLENBQUNDLEdBQUcsRUFBRTtFQUN4QkEsR0FBRyxDQUFDQyxPQUFPLENBQUMsVUFBVUMsRUFBRSxFQUFFO0lBQ3RCLE9BQU9BLEVBQUUsQ0FBQ0MsUUFBUTtJQUNsQixJQUFJUCx1REFBZSxDQUFDTSxFQUFFLENBQUMsSUFBSVAsdURBQWUsQ0FBQ08sRUFBRSxDQUFDLEVBQUU7TUFDNUMsS0FBSyxJQUFJRSxDQUFDLElBQUlGLEVBQUUsQ0FBQ0csT0FBTyxFQUFFO1FBQ3RCLE9BQU9ILEVBQUUsQ0FBQ0csT0FBTyxDQUFDRCxDQUFDLENBQUMsQ0FBQ0QsUUFBUTtRQUM3QkosYUFBYSxDQUFDRyxFQUFFLENBQUNHLE9BQU8sQ0FBQ0QsQ0FBQyxDQUFDLENBQUNFLEtBQUssQ0FBQztNQUN0QztJQUNKLENBQUMsTUFDSSxJQUFJYix1REFBZSxDQUFDUyxFQUFFLENBQUMsSUFBSVIsd0RBQWdCLENBQUNRLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7TUFDeEQsT0FBT0wsRUFBRSxDQUFDSyxLQUFLLENBQUNKLFFBQVE7SUFDNUIsQ0FBQyxNQUNJLElBQUksQ0FBQ1oscURBQWEsQ0FBQ1csRUFBRSxDQUFDLElBQUlKLHFEQUFhLENBQUNJLEVBQUUsQ0FBQyxLQUM1Q1YsMERBQWtCLENBQUNVLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7TUFDOUIsT0FBT0wsRUFBRSxDQUFDSyxLQUFLLENBQUNKLFFBQVE7SUFDNUIsQ0FBQyxNQUNJLElBQUlOLG9EQUFZLENBQUNLLEVBQUUsQ0FBQyxFQUFFO01BQ3ZCSCxhQUFhLENBQUNHLEVBQUUsQ0FBQ00sUUFBUSxDQUFDO0lBQzlCO0VBQ0osQ0FBQyxDQUFDO0FBQ047QUFDTyxTQUFTQyxLQUFLQSxDQUFDQyxPQUFPLEVBQUVDLElBQUksRUFBRTtFQUNqQyxJQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7SUFBRUEsSUFBSSxHQUFHLENBQUMsQ0FBQztFQUFFO0VBQ2xDQSxJQUFJLEdBQUd2QiwrQ0FBUSxDQUFDO0lBQUV3QixvQkFBb0IsRUFBRSxJQUFJO0lBQUVDLG1CQUFtQixFQUFFO0VBQUssQ0FBQyxFQUFFRixJQUFJLENBQUM7RUFDaEYsSUFBSUcsTUFBTSxHQUFHLElBQUl4QiwyQ0FBTSxDQUFDb0IsT0FBTyxFQUFFQyxJQUFJLENBQUMsQ0FBQ0YsS0FBSyxDQUFDLENBQUM7RUFDOUMsSUFBSUssTUFBTSxDQUFDQyxHQUFHLEVBQUU7SUFDWixJQUFJQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQzVCLDZDQUFTLENBQUN5QixNQUFNLENBQUNDLEdBQUcsQ0FBQ0csSUFBSSxDQUFDLENBQUM7SUFDbkQ7SUFDQUYsS0FBSyxDQUFDYixRQUFRLEdBQUdXLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDWixRQUFRO0lBQ3BDO0lBQ0FhLEtBQUssQ0FBQ0csZUFBZSxHQUFHTCxNQUFNLENBQUNDLEdBQUcsQ0FBQ0wsT0FBTztJQUMxQyxNQUFNTSxLQUFLO0VBQ2Y7RUFDQSxJQUFJLEVBQUVMLElBQUksS0FBSyxJQUFJLElBQUlBLElBQUksS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsSUFBSSxDQUFDUyxlQUFlLENBQUMsRUFBRTtJQUNyRXJCLGFBQWEsQ0FBQ2UsTUFBTSxDQUFDTyxHQUFHLENBQUM7RUFDN0I7RUFDQSxPQUFPUCxNQUFNLENBQUNPLEdBQUc7QUFDckI7QUFDd0I7QUFDeEI7QUFDTyxJQUFJQyxPQUFPLEdBQUdoQywyQ0FBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRiYWJlLW5leHRqcy1taWdyYXRpb24vLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanM/MzYxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRXJyb3JLaW5kIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgeyBpc0RhdGVFbGVtZW50LCBpc0RhdGVUaW1lU2tlbGV0b24sIGlzTnVtYmVyRWxlbWVudCwgaXNOdW1iZXJTa2VsZXRvbiwgaXNQbHVyYWxFbGVtZW50LCBpc1NlbGVjdEVsZW1lbnQsIGlzVGFnRWxlbWVudCwgaXNUaW1lRWxlbWVudCwgfSBmcm9tICcuL3R5cGVzJztcbmZ1bmN0aW9uIHBydW5lTG9jYXRpb24oZWxzKSB7XG4gICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGRlbGV0ZSBlbC5sb2NhdGlvbjtcbiAgICAgICAgaWYgKGlzU2VsZWN0RWxlbWVudChlbCkgfHwgaXNQbHVyYWxFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBlbC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVsLm9wdGlvbnNba10ubG9jYXRpb247XG4gICAgICAgICAgICAgICAgcHJ1bmVMb2NhdGlvbihlbC5vcHRpb25zW2tdLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bWJlckVsZW1lbnQoZWwpICYmIGlzTnVtYmVyU2tlbGV0b24oZWwuc3R5bGUpKSB7XG4gICAgICAgICAgICBkZWxldGUgZWwuc3R5bGUubG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGlzRGF0ZUVsZW1lbnQoZWwpIHx8IGlzVGltZUVsZW1lbnQoZWwpKSAmJlxuICAgICAgICAgICAgaXNEYXRlVGltZVNrZWxldG9uKGVsLnN0eWxlKSkge1xuICAgICAgICAgICAgZGVsZXRlIGVsLnN0eWxlLmxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVGFnRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHBydW5lTG9jYXRpb24oZWwuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2UobWVzc2FnZSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IHt9OyB9XG4gICAgb3B0cyA9IF9fYXNzaWduKHsgc2hvdWxkUGFyc2VTa2VsZXRvbnM6IHRydWUsIHJlcXVpcmVzT3RoZXJDbGF1c2U6IHRydWUgfSwgb3B0cyk7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBQYXJzZXIobWVzc2FnZSwgb3B0cykucGFyc2UoKTtcbiAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICB2YXIgZXJyb3IgPSBTeW50YXhFcnJvcihFcnJvcktpbmRbcmVzdWx0LmVyci5raW5kXSk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgQXNzaWduIHRvIGVycm9yIG9iamVjdFxuICAgICAgICBlcnJvci5sb2NhdGlvbiA9IHJlc3VsdC5lcnIubG9jYXRpb247XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgQXNzaWduIHRvIGVycm9yIG9iamVjdFxuICAgICAgICBlcnJvci5vcmlnaW5hbE1lc3NhZ2UgPSByZXN1bHQuZXJyLm1lc3NhZ2U7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAoIShvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuY2FwdHVyZUxvY2F0aW9uKSkge1xuICAgICAgICBwcnVuZUxvY2F0aW9uKHJlc3VsdC52YWwpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnZhbDtcbn1cbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuLy8gb25seSBmb3IgdGVzdGluZ1xuZXhwb3J0IHZhciBfUGFyc2VyID0gUGFyc2VyO1xuZXhwb3J0IHsgaXNTdHJ1Y3R1cmFsbHlTYW1lIH0gZnJvbSAnLi9tYW5pcHVsYXRvcic7XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJFcnJvcktpbmQiLCJQYXJzZXIiLCJpc0RhdGVFbGVtZW50IiwiaXNEYXRlVGltZVNrZWxldG9uIiwiaXNOdW1iZXJFbGVtZW50IiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzUGx1cmFsRWxlbWVudCIsImlzU2VsZWN0RWxlbWVudCIsImlzVGFnRWxlbWVudCIsImlzVGltZUVsZW1lbnQiLCJwcnVuZUxvY2F0aW9uIiwiZWxzIiwiZm9yRWFjaCIsImVsIiwibG9jYXRpb24iLCJrIiwib3B0aW9ucyIsInZhbHVlIiwic3R5bGUiLCJjaGlsZHJlbiIsInBhcnNlIiwibWVzc2FnZSIsIm9wdHMiLCJzaG91bGRQYXJzZVNrZWxldG9ucyIsInJlcXVpcmVzT3RoZXJDbGF1c2UiLCJyZXN1bHQiLCJlcnIiLCJlcnJvciIsIlN5bnRheEVycm9yIiwia2luZCIsIm9yaWdpbmFsTWVzc2FnZSIsImNhcHR1cmVMb2NhdGlvbiIsInZhbCIsIl9QYXJzZXIiLCJpc1N0cnVjdHVyYWxseVNhbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hoistSelectors: () => (/* binding */ hoistSelectors),\n/* harmony export */   isStructurallySame: () => (/* binding */ isStructurallySame)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n\n\nfunction cloneDeep(obj) {\n  if (Array.isArray(obj)) {\n    // @ts-expect-error meh\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], obj.map(cloneDeep), true);\n  }\n  if (obj !== null && typeof obj === 'object') {\n    // @ts-expect-error meh\n    return Object.keys(obj).reduce(function (cloned, k) {\n      // @ts-expect-error meh\n      cloned[k] = cloneDeep(obj[k]);\n      return cloned;\n    }, {});\n  }\n  return obj;\n}\nfunction hoistPluralOrSelectElement(ast, el, positionToInject) {\n  // pull this out of the ast and move it to the top\n  var cloned = cloneDeep(el);\n  var options = cloned.options;\n  cloned.options = Object.keys(options).reduce(function (all, k) {\n    var newValue = hoistSelectors((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], ast.slice(0, positionToInject), true), options[k].value, true), ast.slice(positionToInject + 1), true));\n    all[k] = {\n      value: newValue\n    };\n    return all;\n  }, {});\n  return cloned;\n}\nfunction isPluralOrSelectElement(el) {\n  return (0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el);\n}\nfunction findPluralOrSelectElement(ast) {\n  return !!ast.find(function (el) {\n    if (isPluralOrSelectElement(el)) {\n      return true;\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      return findPluralOrSelectElement(el.children);\n    }\n    return false;\n  });\n}\n/**\n * Hoist all selectors to the beginning of the AST & flatten the\n * resulting options. E.g:\n * \"I have {count, plural, one{a dog} other{many dogs}}\"\n * becomes \"{count, plural, one{I have a dog} other{I have many dogs}}\".\n * If there are multiple selectors, the order of which one is hoisted 1st\n * is non-deterministic.\n * The goal is to provide as many full sentences as possible since fragmented\n * sentences are not translator-friendly\n * @param ast AST\n */\nfunction hoistSelectors(ast) {\n  for (var i = 0; i < ast.length; i++) {\n    var el = ast[i];\n    if (isPluralOrSelectElement(el)) {\n      return [hoistPluralOrSelectElement(ast, el, i)];\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el) && findPluralOrSelectElement([el])) {\n      throw new Error('Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option');\n    }\n  }\n  return ast;\n}\n/**\n * Collect all variables in an AST to Record<string, TYPE>\n * @param ast AST to collect variables from\n * @param vars Record of variable name to variable type\n */\nfunction collectVariables(ast, vars) {\n  if (vars === void 0) {\n    vars = new Map();\n  }\n  ast.forEach(function (el) {\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      if (el.value in vars && vars.get(el.value) !== el.type) {\n        throw new Error(\"Variable \".concat(el.value, \" has conflicting types\"));\n      }\n      vars.set(el.value, el.type);\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      vars.set(el.value, el.type);\n      Object.keys(el.options).forEach(function (k) {\n        collectVariables(el.options[k].value, vars);\n      });\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      vars.set(el.value, el.type);\n      collectVariables(el.children, vars);\n    }\n  });\n}\n/**\n * Check if 2 ASTs are structurally the same. This primarily means that\n * they have the same variables with the same type\n * @param a\n * @param b\n * @returns\n */\nfunction isStructurallySame(a, b) {\n  var aVars = new Map();\n  var bVars = new Map();\n  collectVariables(a, aVars);\n  collectVariables(b, bVars);\n  if (aVars.size !== bVars.size) {\n    return {\n      success: false,\n      error: new Error(\"Different number of variables: [\".concat(Array.from(aVars.keys()).join(', '), \"] vs [\").concat(Array.from(bVars.keys()).join(', '), \"]\"))\n    };\n  }\n  return Array.from(aVars.entries()).reduce(function (result, _a) {\n    var key = _a[0],\n      type = _a[1];\n    if (!result.success) {\n      return result;\n    }\n    var bType = bVars.get(key);\n    if (bType == null) {\n      return {\n        success: false,\n        error: new Error(\"Missing variable \".concat(key, \" in message\"))\n      };\n    }\n    if (bType !== type) {\n      return {\n        success: false,\n        error: new Error(\"Variable \".concat(key, \" has conflicting types: \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[type], \" vs \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[bType]))\n      };\n    }\n    return result;\n  }, {\n    success: true\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\");\n/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\");\n/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\");\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith && '_a'.startsWith('a', 1);\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function (n) {\n  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n};\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n  var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  /**\n   * legacy Edge or Xbox One browser\n   * Unicode flag support: supported\n   * Pattern_Syntax support: not supported\n   * See https://github.com/formatjs/formatjs/issues/2822\n   */\n  REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n} catch (_) {\n  REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith ?\n// Native\nfunction startsWith(s, search, position) {\n  return s.startsWith(search, position);\n} :\n// For IE11\nfunction startsWith(s, search, position) {\n  return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint :\n// IE11\nfunction fromCodePoint() {\n  var codePoints = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    codePoints[_i] = arguments[_i];\n  }\n  var elements = '';\n  var length = codePoints.length;\n  var i = 0;\n  var code;\n  while (length > i) {\n    code = codePoints[i++];\n    if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');\n    elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n  }\n  return elements;\n};\nvar fromEntries =\n// native\nhasNativeFromEntries ? Object.fromEntries :\n// Ponyfill\nfunction fromEntries(entries) {\n  var obj = {};\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a = entries_1[_i],\n      k = _a[0],\n      v = _a[1];\n    obj[k] = v;\n  }\n  return obj;\n};\nvar codePointAt = hasNativeCodePointAt ?\n// Native\nfunction codePointAt(s, index) {\n  return s.codePointAt(index);\n} :\n// IE 11\nfunction codePointAt(s, index) {\n  var size = s.length;\n  if (index < 0 || index >= size) {\n    return undefined;\n  }\n  var first = s.charCodeAt(index);\n  var second;\n  return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ?\n// Native\nfunction trimStart(s) {\n  return s.trimStart();\n} :\n// Ponyfill\nfunction trimStart(s) {\n  return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n};\nvar trimEnd = hasTrimEnd ?\n// Native\nfunction trimEnd(s) {\n  return s.trimEnd();\n} :\n// Ponyfill\nfunction trimEnd(s) {\n  return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n};\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n  return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n  // Native\n  var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var _a;\n    IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n    var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n    return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n  };\n} else {\n  // IE11\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var match = [];\n    while (true) {\n      var c = codePointAt(s, index);\n      if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n        break;\n      }\n      match.push(c);\n      index += c >= 0x10000 ? 2 : 1;\n    }\n    return fromCodePoint.apply(void 0, match);\n  };\n}\nvar Parser = /** @class */function () {\n  function Parser(message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.message = message;\n    this.position = {\n      offset: 0,\n      line: 1,\n      column: 1\n    };\n    this.ignoreTag = !!options.ignoreTag;\n    this.locale = options.locale;\n    this.requiresOtherClause = !!options.requiresOtherClause;\n    this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n  }\n  Parser.prototype.parse = function () {\n    if (this.offset() !== 0) {\n      throw Error('parser can only be used once');\n    }\n    return this.parseMessage(0, '', false);\n  };\n  Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n    var elements = [];\n    while (!this.isEOF()) {\n      var char = this.char();\n      if (char === 123 /* `{` */) {\n        var result = this.parseArgument(nestingLevel, expectingCloseTag);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else if (char === 125 /* `}` */ && nestingLevel > 0) {\n        break;\n      } else if (char === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n        var position = this.clonePosition();\n        this.bump();\n        elements.push({\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,\n          location: createLocation(position, this.clonePosition())\n        });\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && this.peek() === 47 // char code for '/'\n      ) {\n        if (expectingCloseTag) {\n          break;\n        } else {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n        var result = this.parseTag(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else {\n        var result = this.parseLiteral(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      }\n    }\n    return {\n      val: elements,\n      err: null\n    };\n  };\n  /**\n   * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n   * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n   * are accepted:\n   *\n   * ```\n   * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n   * tagName ::= [a-z] (PENChar)*\n   * PENChar ::=\n   *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n   *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n   *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n   * ```\n   *\n   * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n   * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n   * since other tag-based engines like React allow it\n   */\n  Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n    var startPosition = this.clonePosition();\n    this.bump(); // `<`\n    var tagName = this.parseTagName();\n    this.bumpSpace();\n    if (this.bumpIf('/>')) {\n      // Self closing tag\n      return {\n        val: {\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n          value: \"<\".concat(tagName, \"/>\"),\n          location: createLocation(startPosition, this.clonePosition())\n        },\n        err: null\n      };\n    } else if (this.bumpIf('>')) {\n      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n      if (childrenResult.err) {\n        return childrenResult;\n      }\n      var children = childrenResult.val;\n      // Expecting a close tag\n      var endTagStartPosition = this.clonePosition();\n      if (this.bumpIf('</')) {\n        if (this.isEOF() || !_isAlpha(this.char())) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        var closingTagNameStartPosition = this.clonePosition();\n        var closingTagName = this.parseTagName();\n        if (tagName !== closingTagName) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (!this.bumpIf('>')) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        return {\n          val: {\n            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,\n            value: tagName,\n            children: children,\n            location: createLocation(startPosition, this.clonePosition())\n          },\n          err: null\n        };\n      } else {\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n      }\n    } else {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n    }\n  };\n  /**\n   * This method assumes that the caller has peeked ahead for the first tag character.\n   */\n  Parser.prototype.parseTagName = function () {\n    var startOffset = this.offset();\n    this.bump(); // the first tag name character\n    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n      this.bump();\n    }\n    return this.message.slice(startOffset, this.offset());\n  };\n  Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n    var start = this.clonePosition();\n    var value = '';\n    while (true) {\n      var parseQuoteResult = this.tryParseQuote(parentArgType);\n      if (parseQuoteResult) {\n        value += parseQuoteResult;\n        continue;\n      }\n      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n      if (parseUnquotedResult) {\n        value += parseUnquotedResult;\n        continue;\n      }\n      var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n      if (parseLeftAngleResult) {\n        value += parseLeftAngleResult;\n        continue;\n      }\n      break;\n    }\n    var location = createLocation(start, this.clonePosition());\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n        value: value,\n        location: location\n      },\n      err: null\n    };\n  };\n  Parser.prototype.tryParseLeftAngleBracket = function () {\n    if (!this.isEOF() && this.char() === 60 /* `<` */ && (this.ignoreTag ||\n    // If at the opening tag or closing tag position, bail.\n    !_isAlphaOrSlash(this.peek() || 0))) {\n      this.bump(); // `<`\n      return '<';\n    }\n    return null;\n  };\n  /**\n   * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n   * a character that requires quoting (that is, \"only where needed\"), and works the same in\n   * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n   */\n  Parser.prototype.tryParseQuote = function (parentArgType) {\n    if (this.isEOF() || this.char() !== 39 /* `'` */) {\n      return null;\n    }\n    // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n    // Check if is valid escaped character\n    switch (this.peek()) {\n      case 39 /* `'` */:\n        // double quote, should return as a single quote.\n        this.bump();\n        this.bump();\n        return \"'\";\n      // '{', '<', '>', '}'\n      case 123:\n      case 60:\n      case 62:\n      case 125:\n        break;\n      case 35:\n        // '#'\n        if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n          break;\n        }\n        return null;\n      default:\n        return null;\n    }\n    this.bump(); // apostrophe\n    var codePoints = [this.char()]; // escaped char\n    this.bump();\n    // read chars until the optional closing apostrophe is found\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch === 39 /* `'` */) {\n        if (this.peek() === 39 /* `'` */) {\n          codePoints.push(39);\n          // Bump one more time because we need to skip 2 characters.\n          this.bump();\n        } else {\n          // Optional closing apostrophe.\n          this.bump();\n          break;\n        }\n      } else {\n        codePoints.push(ch);\n      }\n      this.bump();\n    }\n    return fromCodePoint.apply(void 0, codePoints);\n  };\n  Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n    if (this.isEOF()) {\n      return null;\n    }\n    var ch = this.char();\n    if (ch === 60 /* `<` */ || ch === 123 /* `{` */ || ch === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125 /* `}` */ && nestingLevel > 0) {\n      return null;\n    } else {\n      this.bump();\n      return fromCodePoint(ch);\n    }\n  };\n  Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n    var openingBracePosition = this.clonePosition();\n    this.bump(); // `{`\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    if (this.char() === 125 /* `}` */) {\n      this.bump();\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    // argument name\n    var value = this.parseIdentifierIfPossible().value;\n    if (!value) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    switch (this.char()) {\n      // Simple argument: `{name}`\n      case 125 /* `}` */:\n        {\n          this.bump(); // `}`\n          return {\n            val: {\n              type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,\n              // value does not include the opening and closing braces.\n              value: value,\n              location: createLocation(openingBracePosition, this.clonePosition())\n            },\n            err: null\n          };\n        }\n      // Argument with options: `{name, format, ...}`\n      case 44 /* `,` */:\n        {\n          this.bump(); // `,`\n          this.bumpSpace();\n          if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n          }\n          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n  };\n  /**\n   * Advance the parser until the end of the identifier, if it is currently on\n   * an identifier character. Return an empty string otherwise.\n   */\n  Parser.prototype.parseIdentifierIfPossible = function () {\n    var startingPosition = this.clonePosition();\n    var startOffset = this.offset();\n    var value = matchIdentifierAtIndex(this.message, startOffset);\n    var endOffset = startOffset + value.length;\n    this.bumpTo(endOffset);\n    var endPosition = this.clonePosition();\n    var location = createLocation(startingPosition, endPosition);\n    return {\n      value: value,\n      location: location\n    };\n  };\n  Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n    var _a;\n    // Parse this range:\n    // {name, type, style}\n    //        ^---^\n    var typeStartPosition = this.clonePosition();\n    var argType = this.parseIdentifierIfPossible().value;\n    var typeEndPosition = this.clonePosition();\n    switch (argType) {\n      case '':\n        // Expecting a style string number, date, time, plural, selectordinal, or select.\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n      case 'number':\n      case 'date':\n      case 'time':\n        {\n          // Parse this range:\n          // {name, number, style}\n          //              ^-------^\n          this.bumpSpace();\n          var styleAndLocation = null;\n          if (this.bumpIf(',')) {\n            this.bumpSpace();\n            var styleStartPosition = this.clonePosition();\n            var result = this.parseSimpleArgStyleIfPossible();\n            if (result.err) {\n              return result;\n            }\n            var style = trimEnd(result.val);\n            if (style.length === 0) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n            styleAndLocation = {\n              style: style,\n              styleLocation: styleLocation\n            };\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_1 = createLocation(openingBracePosition, this.clonePosition());\n          // Extract style or skeleton\n          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n            // Skeleton starts with `::`.\n            var skeleton = trimStart(styleAndLocation.style.slice(2));\n            if (argType === 'number') {\n              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n              if (result.err) {\n                return result;\n              }\n              return {\n                val: {\n                  type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number,\n                  value: value,\n                  location: location_1,\n                  style: result.val\n                },\n                err: null\n              };\n            } else {\n              if (skeleton.length === 0) {\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n              }\n              var dateTimePattern = skeleton;\n              // Get \"best match\" pattern only if locale is passed, if not, let it\n              // pass as-is where `parseDateTimeSkeleton()` will throw an error\n              // for unsupported patterns.\n              if (this.locale) {\n                dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);\n              }\n              var style = {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,\n                pattern: dateTimePattern,\n                location: styleAndLocation.styleLocation,\n                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern) : {}\n              };\n              var type = argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;\n              return {\n                val: {\n                  type: type,\n                  value: value,\n                  location: location_1,\n                  style: style\n                },\n                err: null\n              };\n            }\n          }\n          // Regular style or no style.\n          return {\n            val: {\n              type: argType === 'number' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number : argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,\n              value: value,\n              location: location_1,\n              style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n            },\n            err: null\n          };\n        }\n      case 'plural':\n      case 'selectordinal':\n      case 'select':\n        {\n          // Parse this range:\n          // {name, plural, options}\n          //              ^---------^\n          var typeEndPosition_1 = this.clonePosition();\n          this.bumpSpace();\n          if (!this.bumpIf(',')) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));\n          }\n          this.bumpSpace();\n          // Parse offset:\n          // {name, plural, offset:1, options}\n          //                ^-----^\n          //\n          // or the first option:\n          //\n          // {name, plural, one {...} other {...}}\n          //                ^--^\n          var identifierAndLocation = this.parseIdentifierIfPossible();\n          var pluralOffset = 0;\n          if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n            if (!this.bumpIf(':')) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            this.bumpSpace();\n            var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n            if (result.err) {\n              return result;\n            }\n            // Parse another identifier for option parsing\n            this.bumpSpace();\n            identifierAndLocation = this.parseIdentifierIfPossible();\n            pluralOffset = result.val;\n          }\n          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n          if (optionsResult.err) {\n            return optionsResult;\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_2 = createLocation(openingBracePosition, this.clonePosition());\n          if (argType === 'select') {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                location: location_2\n              },\n              err: null\n            };\n          } else {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                offset: pluralOffset,\n                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                location: location_2\n              },\n              err: null\n            };\n          }\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n    }\n  };\n  Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n    // Parse: {value, number, ::currency/GBP }\n    //\n    if (this.isEOF() || this.char() !== 125 /* `}` */) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bump(); // `}`\n    return {\n      val: true,\n      err: null\n    };\n  };\n  /**\n   * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n   */\n  Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n    var nestedBraces = 0;\n    var startPosition = this.clonePosition();\n    while (!this.isEOF()) {\n      var ch = this.char();\n      switch (ch) {\n        case 39 /* `'` */:\n          {\n            // Treat apostrophe as quoting but include it in the style part.\n            // Find the end of the quoted literal text.\n            this.bump();\n            var apostrophePosition = this.clonePosition();\n            if (!this.bumpUntil(\"'\")) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n            }\n            this.bump();\n            break;\n          }\n        case 123 /* `{` */:\n          {\n            nestedBraces += 1;\n            this.bump();\n            break;\n          }\n        case 125 /* `}` */:\n          {\n            if (nestedBraces > 0) {\n              nestedBraces -= 1;\n            } else {\n              return {\n                val: this.message.slice(startPosition.offset, this.offset()),\n                err: null\n              };\n            }\n            break;\n          }\n        default:\n          this.bump();\n          break;\n      }\n    }\n    return {\n      val: this.message.slice(startPosition.offset, this.offset()),\n      err: null\n    };\n  };\n  Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n    var tokens = [];\n    try {\n      tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);\n    } catch (e) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);\n    }\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,\n        tokens: tokens,\n        location: location,\n        parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens) : {}\n      },\n      err: null\n    };\n  };\n  /**\n   * @param nesting_level The current nesting level of messages.\n   *     This can be positive when parsing message fragment in select or plural argument options.\n   * @param parent_arg_type The parent argument's type.\n   * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n   *     the argument. It is a by-product of a previous parsing attempt.\n   * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n   *     between a pair of opening and closing tags. The nested message will not parse beyond\n   *     the closing tag boundary.\n   */\n  Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n    var _a;\n    var hasOtherClause = false;\n    var options = [];\n    var parsedSelectors = new Set();\n    var selector = parsedFirstIdentifier.value,\n      selectorLocation = parsedFirstIdentifier.location;\n    // Parse:\n    // one {one apple}\n    // ^--^\n    while (true) {\n      if (selector.length === 0) {\n        var startPosition = this.clonePosition();\n        if (parentArgType !== 'select' && this.bumpIf('=')) {\n          // Try parse `={number}` selector\n          var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n          if (result.err) {\n            return result;\n          }\n          selectorLocation = createLocation(startPosition, this.clonePosition());\n          selector = this.message.slice(startPosition.offset, this.offset());\n        } else {\n          break;\n        }\n      }\n      // Duplicate selector clauses\n      if (parsedSelectors.has(selector)) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n      }\n      if (selector === 'other') {\n        hasOtherClause = true;\n      }\n      // Parse:\n      // one {one apple}\n      //     ^----------^\n      this.bumpSpace();\n      var openingBracePosition = this.clonePosition();\n      if (!this.bumpIf('{')) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n      }\n      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n      if (fragmentResult.err) {\n        return fragmentResult;\n      }\n      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n      if (argCloseResult.err) {\n        return argCloseResult;\n      }\n      options.push([selector, {\n        value: fragmentResult.val,\n        location: createLocation(openingBracePosition, this.clonePosition())\n      }]);\n      // Keep track of the existing selectors\n      parsedSelectors.add(selector);\n      // Prep next selector clause.\n      this.bumpSpace();\n      _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n    }\n    if (options.length === 0) {\n      return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    if (this.requiresOtherClause && !hasOtherClause) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    return {\n      val: options,\n      err: null\n    };\n  };\n  Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n    var sign = 1;\n    var startingPosition = this.clonePosition();\n    if (this.bumpIf('+')) {} else if (this.bumpIf('-')) {\n      sign = -1;\n    }\n    var hasDigits = false;\n    var decimal = 0;\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n        hasDigits = true;\n        decimal = decimal * 10 + (ch - 48);\n        this.bump();\n      } else {\n        break;\n      }\n    }\n    var location = createLocation(startingPosition, this.clonePosition());\n    if (!hasDigits) {\n      return this.error(expectNumberError, location);\n    }\n    decimal *= sign;\n    if (!isSafeInteger(decimal)) {\n      return this.error(invalidNumberError, location);\n    }\n    return {\n      val: decimal,\n      err: null\n    };\n  };\n  Parser.prototype.offset = function () {\n    return this.position.offset;\n  };\n  Parser.prototype.isEOF = function () {\n    return this.offset() === this.message.length;\n  };\n  Parser.prototype.clonePosition = function () {\n    // This is much faster than `Object.assign` or spread.\n    return {\n      offset: this.position.offset,\n      line: this.position.line,\n      column: this.position.column\n    };\n  };\n  /**\n   * Return the code point at the current position of the parser.\n   * Throws if the index is out of bound.\n   */\n  Parser.prototype.char = function () {\n    var offset = this.position.offset;\n    if (offset >= this.message.length) {\n      throw Error('out of bound');\n    }\n    var code = codePointAt(this.message, offset);\n    if (code === undefined) {\n      throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n    }\n    return code;\n  };\n  Parser.prototype.error = function (kind, location) {\n    return {\n      val: null,\n      err: {\n        kind: kind,\n        message: this.message,\n        location: location\n      }\n    };\n  };\n  /** Bump the parser to the next UTF-16 code unit. */\n  Parser.prototype.bump = function () {\n    if (this.isEOF()) {\n      return;\n    }\n    var code = this.char();\n    if (code === 10 /* '\\n' */) {\n      this.position.line += 1;\n      this.position.column = 1;\n      this.position.offset += 1;\n    } else {\n      this.position.column += 1;\n      // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n      this.position.offset += code < 0x10000 ? 1 : 2;\n    }\n  };\n  /**\n   * If the substring starting at the current position of the parser has\n   * the given prefix, then bump the parser to the character immediately\n   * following the prefix and return true. Otherwise, don't bump the parser\n   * and return false.\n   */\n  Parser.prototype.bumpIf = function (prefix) {\n    if (startsWith(this.message, prefix, this.offset())) {\n      for (var i = 0; i < prefix.length; i++) {\n        this.bump();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Bump the parser until the pattern character is found and return `true`.\n   * Otherwise bump to the end of the file and return `false`.\n   */\n  Parser.prototype.bumpUntil = function (pattern) {\n    var currentOffset = this.offset();\n    var index = this.message.indexOf(pattern, currentOffset);\n    if (index >= 0) {\n      this.bumpTo(index);\n      return true;\n    } else {\n      this.bumpTo(this.message.length);\n      return false;\n    }\n  };\n  /**\n   * Bump the parser to the target offset.\n   * If target offset is beyond the end of the input, bump the parser to the end of the input.\n   */\n  Parser.prototype.bumpTo = function (targetOffset) {\n    if (this.offset() > targetOffset) {\n      throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n    }\n    targetOffset = Math.min(targetOffset, this.message.length);\n    while (true) {\n      var offset = this.offset();\n      if (offset === targetOffset) {\n        break;\n      }\n      if (offset > targetOffset) {\n        throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n      }\n      this.bump();\n      if (this.isEOF()) {\n        break;\n      }\n    }\n  };\n  /** advance the parser through all whitespace to the next non-whitespace code unit. */\n  Parser.prototype.bumpSpace = function () {\n    while (!this.isEOF() && _isWhiteSpace(this.char())) {\n      this.bump();\n    }\n  };\n  /**\n   * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n   * If the input has been exhausted, then this returns null.\n   */\n  Parser.prototype.peek = function () {\n    if (this.isEOF()) {\n      return null;\n    }\n    var code = this.char();\n    var offset = this.offset();\n    var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n    return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n  };\n  return Parser;\n}();\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\nfunction _isAlphaOrSlash(codepoint) {\n  return _isAlpha(codepoint) || codepoint === 47; /* '/' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n  return c === 45 /* '-' */ || c === 46 /* '.' */ || c >= 48 && c <= 57 /* 0..9 */ || c === 95 /* '_' */ || c >= 97 && c <= 122 /** a..z */ || c >= 65 && c <= 90 /* A..Z */ || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n  return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n  return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvcmVnZXguZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDTyxJQUFJQSxxQkFBcUIsR0FBRyw4Q0FBOEM7QUFDMUUsSUFBSUMsaUJBQWlCLEdBQUcsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanM/YjZiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZ2VuZXJhdGVkIGZyb20gcmVnZXgtZ2VuLnRzXG5leHBvcnQgdmFyIFNQQUNFX1NFUEFSQVRPUl9SRUdFWCA9IC9bIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vO1xuZXhwb3J0IHZhciBXSElURV9TUEFDRV9SRUdFWCA9IC9bXFx0LVxcciBcXHg4NVxcdTIwMEVcXHUyMDBGXFx1MjAyOFxcdTIwMjldLztcbiJdLCJuYW1lcyI6WyJTUEFDRV9TRVBBUkFUT1JfUkVHRVgiLCJXSElURV9TUEFDRV9SRUdFWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeData: () => (/* binding */ timeData)\n/* harmony export */ });\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n  \"001\": [\"H\", \"h\"],\n  \"419\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AD\": [\"H\", \"hB\"],\n  \"AE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"AF\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"AG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AL\": [\"h\", \"H\", \"hB\"],\n  \"AM\": [\"H\", \"hB\"],\n  \"AO\": [\"H\", \"hB\"],\n  \"AR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AS\": [\"h\", \"H\"],\n  \"AT\": [\"H\", \"hB\"],\n  \"AU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AW\": [\"H\", \"hB\"],\n  \"AX\": [\"H\"],\n  \"AZ\": [\"H\", \"hB\", \"h\"],\n  \"BA\": [\"H\", \"hB\", \"h\"],\n  \"BB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BD\": [\"h\", \"hB\", \"H\"],\n  \"BE\": [\"H\", \"hB\"],\n  \"BF\": [\"H\", \"hB\"],\n  \"BG\": [\"H\", \"hB\", \"h\"],\n  \"BH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"BI\": [\"H\", \"h\"],\n  \"BJ\": [\"H\", \"hB\"],\n  \"BL\": [\"H\", \"hB\"],\n  \"BM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BN\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"BO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"BQ\": [\"H\"],\n  \"BR\": [\"H\", \"hB\"],\n  \"BS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BT\": [\"h\", \"H\"],\n  \"BW\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"BY\": [\"H\", \"h\"],\n  \"BZ\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CA\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"CC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CD\": [\"hB\", \"H\"],\n  \"CF\": [\"H\", \"h\", \"hB\"],\n  \"CG\": [\"H\", \"hB\"],\n  \"CH\": [\"H\", \"hB\", \"h\"],\n  \"CI\": [\"H\", \"hB\"],\n  \"CK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CL\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CM\": [\"H\", \"h\", \"hB\"],\n  \"CN\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"CO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CP\": [\"H\"],\n  \"CR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CU\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CV\": [\"H\", \"hB\"],\n  \"CW\": [\"H\", \"hB\"],\n  \"CX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CY\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"CZ\": [\"H\"],\n  \"DE\": [\"H\", \"hB\"],\n  \"DG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"DJ\": [\"h\", \"H\"],\n  \"DK\": [\"H\"],\n  \"DM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"DO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"DZ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"EC\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"EE\": [\"H\", \"hB\"],\n  \"EG\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ER\": [\"h\", \"H\"],\n  \"ES\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"ET\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"FI\": [\"H\"],\n  \"FJ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"FM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FO\": [\"H\", \"h\"],\n  \"FR\": [\"H\", \"hB\"],\n  \"GA\": [\"H\", \"hB\"],\n  \"GB\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GD\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GE\": [\"H\", \"hB\", \"h\"],\n  \"GF\": [\"H\", \"hB\"],\n  \"GG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GH\": [\"h\", \"H\"],\n  \"GI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GL\": [\"H\", \"h\"],\n  \"GM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GN\": [\"H\", \"hB\"],\n  \"GP\": [\"H\", \"hB\"],\n  \"GQ\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"GR\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"GT\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"GU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GW\": [\"H\", \"hB\"],\n  \"GY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"HK\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"HN\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"HR\": [\"H\", \"hB\"],\n  \"HU\": [\"H\", \"h\"],\n  \"IC\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ID\": [\"H\"],\n  \"IE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IL\": [\"H\", \"hB\"],\n  \"IM\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IN\": [\"h\", \"H\"],\n  \"IO\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IQ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"IR\": [\"hB\", \"H\"],\n  \"IS\": [\"H\"],\n  \"IT\": [\"H\", \"hB\"],\n  \"JE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"JM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"JO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"JP\": [\"H\", \"K\", \"h\"],\n  \"KE\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"KG\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KH\": [\"hB\", \"h\", \"H\", \"hb\"],\n  \"KI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KM\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KN\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KP\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KW\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"KY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KZ\": [\"H\", \"hB\"],\n  \"LA\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"LB\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"LC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LI\": [\"H\", \"hB\", \"h\"],\n  \"LK\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"LR\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LS\": [\"h\", \"H\"],\n  \"LT\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"LU\": [\"H\", \"h\", \"hB\"],\n  \"LV\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"LY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"MC\": [\"H\", \"hB\"],\n  \"MD\": [\"H\", \"hB\"],\n  \"ME\": [\"H\", \"hB\", \"h\"],\n  \"MF\": [\"H\", \"hB\"],\n  \"MG\": [\"H\", \"h\"],\n  \"MH\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ML\": [\"H\"],\n  \"MM\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"MN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MP\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MQ\": [\"H\", \"hB\"],\n  \"MR\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MS\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MT\": [\"H\", \"h\"],\n  \"MU\": [\"H\", \"h\"],\n  \"MV\": [\"H\", \"h\"],\n  \"MW\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MX\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"MY\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"MZ\": [\"H\", \"hB\"],\n  \"NA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NC\": [\"H\", \"hB\"],\n  \"NE\": [\"H\"],\n  \"NF\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NI\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NL\": [\"H\", \"hB\"],\n  \"NO\": [\"H\", \"h\"],\n  \"NP\": [\"H\", \"h\", \"hB\"],\n  \"NR\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NU\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"OM\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PF\": [\"H\", \"h\", \"hB\"],\n  \"PG\": [\"h\", \"H\"],\n  \"PH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PK\": [\"h\", \"hB\", \"H\"],\n  \"PL\": [\"H\", \"h\"],\n  \"PM\": [\"H\", \"hB\"],\n  \"PN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"PR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PS\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PT\": [\"H\", \"hB\"],\n  \"PW\": [\"h\", \"H\"],\n  \"PY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"QA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"RE\": [\"H\", \"hB\"],\n  \"RO\": [\"H\", \"hB\"],\n  \"RS\": [\"H\", \"hB\", \"h\"],\n  \"RU\": [\"H\"],\n  \"RW\": [\"H\", \"h\"],\n  \"SA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SC\": [\"H\", \"h\", \"hB\"],\n  \"SD\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SE\": [\"H\"],\n  \"SG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SH\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SI\": [\"H\", \"hB\"],\n  \"SJ\": [\"H\"],\n  \"SK\": [\"H\"],\n  \"SL\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SM\": [\"H\", \"h\", \"hB\"],\n  \"SN\": [\"H\", \"h\", \"hB\"],\n  \"SO\": [\"h\", \"H\"],\n  \"SR\": [\"H\", \"hB\"],\n  \"SS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ST\": [\"H\", \"hB\"],\n  \"SV\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"SX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"TC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TD\": [\"h\", \"H\", \"hB\"],\n  \"TF\": [\"H\", \"h\", \"hB\"],\n  \"TG\": [\"H\", \"hB\"],\n  \"TH\": [\"H\", \"h\"],\n  \"TJ\": [\"H\", \"h\"],\n  \"TL\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"TM\": [\"H\", \"h\"],\n  \"TN\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"TO\": [\"h\", \"H\"],\n  \"TR\": [\"H\", \"hB\"],\n  \"TT\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TW\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"TZ\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UA\": [\"H\", \"hB\", \"h\"],\n  \"UG\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"US\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"UY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"UZ\": [\"H\", \"hB\", \"h\"],\n  \"VA\": [\"H\", \"h\", \"hB\"],\n  \"VC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"VG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VN\": [\"H\", \"h\"],\n  \"VU\": [\"h\", \"H\"],\n  \"WF\": [\"H\", \"hB\"],\n  \"WS\": [\"h\", \"H\"],\n  \"XK\": [\"H\", \"hB\", \"h\"],\n  \"YE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"YT\": [\"H\", \"hB\"],\n  \"ZA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ZM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ZW\": [\"H\", \"h\"],\n  \"af-ZA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ar-001\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ca-ES\": [\"H\", \"h\", \"hB\"],\n  \"en-001\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-HK\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-IL\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"en-MY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"es-BR\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-ES\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-GQ\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"fr-CA\": [\"H\", \"h\", \"hB\"],\n  \"gl-ES\": [\"H\", \"h\", \"hB\"],\n  \"gu-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"hi-IN\": [\"hB\", \"h\", \"H\"],\n  \"it-CH\": [\"H\", \"h\", \"hB\"],\n  \"it-IT\": [\"H\", \"h\", \"hB\"],\n  \"kn-IN\": [\"hB\", \"h\", \"H\"],\n  \"ml-IN\": [\"hB\", \"h\", \"H\"],\n  \"mr-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"pa-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"ta-IN\": [\"hB\", \"h\", \"hb\", \"H\"],\n  \"te-IN\": [\"hB\", \"h\", \"H\"],\n  \"zu-ZA\": [\"H\", \"hB\", \"hb\", \"h\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),\n/* harmony export */   isDateElement: () => (/* binding */ isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),\n/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),\n/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),\n/* harmony export */   isTagElement: () => (/* binding */ isTagElement),\n/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)\n/* harmony export */ });\nvar TYPE;\n(function (TYPE) {\n  /**\n   * Raw text\n   */\n  TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n  /**\n   * Variable w/o any format, e.g `var` in `this is a {var}`\n   */\n  TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n  /**\n   * Variable w/ number format\n   */\n  TYPE[TYPE[\"number\"] = 2] = \"number\";\n  /**\n   * Variable w/ date format\n   */\n  TYPE[TYPE[\"date\"] = 3] = \"date\";\n  /**\n   * Variable w/ time format\n   */\n  TYPE[TYPE[\"time\"] = 4] = \"time\";\n  /**\n   * Variable w/ select format\n   */\n  TYPE[TYPE[\"select\"] = 5] = \"select\";\n  /**\n   * Variable w/ plural format\n   */\n  TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n  /**\n   * Only possible within plural argument.\n   * This is the `#` symbol that will be substituted with the count.\n   */\n  TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n  /**\n   * XML-like tag\n   */\n  TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n  SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n  SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nfunction isLiteralElement(el) {\n  return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n  return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n  return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n  return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n  return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n  return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n  return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n  return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n  return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n  return {\n    type: TYPE.literal,\n    value: value\n  };\n}\nfunction createNumberElement(value, style) {\n  return {\n    type: TYPE.number,\n    value: value,\n    style: style\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsSUFBSTtBQUNmLENBQUMsVUFBVUEsSUFBSSxFQUFFO0VBQ2I7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVM7RUFDckM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVU7RUFDdkM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDbkM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU07RUFDL0I7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU07RUFDL0I7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDbkM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDbkM7QUFDSjtBQUNBO0FBQ0E7RUFDSUEsSUFBSSxDQUFDQSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTztFQUNqQztBQUNKO0FBQ0E7RUFDSUEsSUFBSSxDQUFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUNqQyxDQUFDLEVBQUVBLElBQUksS0FBS0EsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsSUFBSUMsYUFBYTtBQUN4QixDQUFDLFVBQVVBLGFBQWEsRUFBRTtFQUN0QkEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUTtFQUNyREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsVUFBVTtBQUM3RCxDQUFDLEVBQUVBLGFBQWEsS0FBS0EsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekM7QUFDQTtBQUNBO0FBQ08sU0FBU0MsZ0JBQWdCQSxDQUFDQyxFQUFFLEVBQUU7RUFDakMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ0ssT0FBTztBQUNuQztBQUNPLFNBQVNDLGlCQUFpQkEsQ0FBQ0gsRUFBRSxFQUFFO0VBQ2xDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNPLFFBQVE7QUFDcEM7QUFDTyxTQUFTQyxlQUFlQSxDQUFDTCxFQUFFLEVBQUU7RUFDaEMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ1MsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGFBQWFBLENBQUNQLEVBQUUsRUFBRTtFQUM5QixPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDVyxJQUFJO0FBQ2hDO0FBQ08sU0FBU0MsYUFBYUEsQ0FBQ1QsRUFBRSxFQUFFO0VBQzlCLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNhLElBQUk7QUFDaEM7QUFDTyxTQUFTQyxlQUFlQSxDQUFDWCxFQUFFLEVBQUU7RUFDaEMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ2UsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGVBQWVBLENBQUNiLEVBQUUsRUFBRTtFQUNoQyxPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDaUIsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGNBQWNBLENBQUNmLEVBQUUsRUFBRTtFQUMvQixPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDbUIsS0FBSztBQUNqQztBQUNPLFNBQVNDLFlBQVlBLENBQUNqQixFQUFFLEVBQUU7RUFDN0IsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ3FCLEdBQUc7QUFDL0I7QUFDTyxTQUFTQyxnQkFBZ0JBLENBQUNuQixFQUFFLEVBQUU7RUFDakMsT0FBTyxDQUFDLEVBQUVBLEVBQUUsSUFBSSxPQUFPQSxFQUFFLEtBQUssUUFBUSxJQUFJQSxFQUFFLENBQUNDLElBQUksS0FBS0gsYUFBYSxDQUFDUSxNQUFNLENBQUM7QUFDL0U7QUFDTyxTQUFTYyxrQkFBa0JBLENBQUNwQixFQUFFLEVBQUU7RUFDbkMsT0FBTyxDQUFDLEVBQUVBLEVBQUUsSUFBSSxPQUFPQSxFQUFFLEtBQUssUUFBUSxJQUFJQSxFQUFFLENBQUNDLElBQUksS0FBS0gsYUFBYSxDQUFDdUIsUUFBUSxDQUFDO0FBQ2pGO0FBQ08sU0FBU0Msb0JBQW9CQSxDQUFDQyxLQUFLLEVBQUU7RUFDeEMsT0FBTztJQUNIdEIsSUFBSSxFQUFFSixJQUFJLENBQUNLLE9BQU87SUFDbEJxQixLQUFLLEVBQUVBO0VBQ1gsQ0FBQztBQUNMO0FBQ08sU0FBU0MsbUJBQW1CQSxDQUFDRCxLQUFLLEVBQUVFLEtBQUssRUFBRTtFQUM5QyxPQUFPO0lBQ0h4QixJQUFJLEVBQUVKLElBQUksQ0FBQ1MsTUFBTTtJQUNqQmlCLEtBQUssRUFBRUEsS0FBSztJQUNaRSxLQUFLLEVBQUVBO0VBQ1gsQ0FBQztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi90eXBlcy5qcz84ZGQxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgVFlQRTtcbihmdW5jdGlvbiAoVFlQRSkge1xuICAgIC8qKlxuICAgICAqIFJhdyB0ZXh0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wibGl0ZXJhbFwiXSA9IDBdID0gXCJsaXRlcmFsXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy9vIGFueSBmb3JtYXQsIGUuZyBgdmFyYCBpbiBgdGhpcyBpcyBhIHt2YXJ9YFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImFyZ3VtZW50XCJdID0gMV0gPSBcImFyZ3VtZW50XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gbnVtYmVyIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcIm51bWJlclwiXSA9IDJdID0gXCJudW1iZXJcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBkYXRlIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImRhdGVcIl0gPSAzXSA9IFwiZGF0ZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHRpbWUgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1widGltZVwiXSA9IDRdID0gXCJ0aW1lXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gc2VsZWN0IGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInNlbGVjdFwiXSA9IDVdID0gXCJzZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBwbHVyYWwgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicGx1cmFsXCJdID0gNl0gPSBcInBsdXJhbFwiO1xuICAgIC8qKlxuICAgICAqIE9ubHkgcG9zc2libGUgd2l0aGluIHBsdXJhbCBhcmd1bWVudC5cbiAgICAgKiBUaGlzIGlzIHRoZSBgI2Agc3ltYm9sIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCB3aXRoIHRoZSBjb3VudC5cbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJwb3VuZFwiXSA9IDddID0gXCJwb3VuZFwiO1xuICAgIC8qKlxuICAgICAqIFhNTC1saWtlIHRhZ1xuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInRhZ1wiXSA9IDhdID0gXCJ0YWdcIjtcbn0pKFRZUEUgfHwgKFRZUEUgPSB7fSkpO1xuZXhwb3J0IHZhciBTS0VMRVRPTl9UWVBFO1xuKGZ1bmN0aW9uIChTS0VMRVRPTl9UWVBFKSB7XG4gICAgU0tFTEVUT05fVFlQRVtTS0VMRVRPTl9UWVBFW1wibnVtYmVyXCJdID0gMF0gPSBcIm51bWJlclwiO1xuICAgIFNLRUxFVE9OX1RZUEVbU0tFTEVUT05fVFlQRVtcImRhdGVUaW1lXCJdID0gMV0gPSBcImRhdGVUaW1lXCI7XG59KShTS0VMRVRPTl9UWVBFIHx8IChTS0VMRVRPTl9UWVBFID0ge30pKTtcbi8qKlxuICogVHlwZSBHdWFyZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5saXRlcmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJndW1lbnRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuYXJndW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubnVtYmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5kYXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50aW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLnNlbGVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BsdXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wbHVyYWw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQb3VuZEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wb3VuZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ0VsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50YWc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJTa2VsZXRvbihlbCkge1xuICAgIHJldHVybiAhIShlbCAmJiB0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLnR5cGUgPT09IFNLRUxFVE9OX1RZUEUubnVtYmVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVUaW1lU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSBTS0VMRVRPTl9UWVBFLmRhdGVUaW1lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXRlcmFsRWxlbWVudCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEUubGl0ZXJhbCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVyRWxlbWVudCh2YWx1ZSwgc3R5bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLm51bWJlcixcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJUWVBFIiwiU0tFTEVUT05fVFlQRSIsImlzTGl0ZXJhbEVsZW1lbnQiLCJlbCIsInR5cGUiLCJsaXRlcmFsIiwiaXNBcmd1bWVudEVsZW1lbnQiLCJhcmd1bWVudCIsImlzTnVtYmVyRWxlbWVudCIsIm51bWJlciIsImlzRGF0ZUVsZW1lbnQiLCJkYXRlIiwiaXNUaW1lRWxlbWVudCIsInRpbWUiLCJpc1NlbGVjdEVsZW1lbnQiLCJzZWxlY3QiLCJpc1BsdXJhbEVsZW1lbnQiLCJwbHVyYWwiLCJpc1BvdW5kRWxlbWVudCIsInBvdW5kIiwiaXNUYWdFbGVtZW50IiwidGFnIiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzRGF0ZVRpbWVTa2VsZXRvbiIsImRhdGVUaW1lIiwiY3JlYXRlTGl0ZXJhbEVsZW1lbnQiLCJ2YWx1ZSIsImNyZWF0ZU51bWJlckVsZW1lbnQiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)\n/* harmony export */ });\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n      case 'E':\n        result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n      case 'b': // am, pm, noon, midnight\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n      // Zone\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n      case 'O': // 1, 4: milliseconds in day short, long\n      case 'v': // 1, 4: generic non-location format\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n    }\n    return '';\n  });\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),\n/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\");\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LXNrZWxldG9uLXBhcnNlci9saWIvaW5kZXguanM/YzAxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2RhdGUtdGltZSc7XG5leHBvcnQgKiBmcm9tICcuL251bWJlcic7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!******************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\");\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  if (str[str.length - 1] === 'r') {\n    result.roundingPriority = 'morePrecision';\n  } else if (str[str.length - 1] === 's') {\n    result.roundingPriority = 'lessPrecision';\n  }\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      case 'rounding-mode-floor':\n        result.roundingMode = 'floor';\n        continue;\n      case 'rounding-mode-ceiling':\n        result.roundingMode = 'ceil';\n        continue;\n      case 'rounding-mode-down':\n        result.roundingMode = 'trunc';\n        continue;\n      case 'rounding-mode-up':\n        result.roundingMode = 'expand';\n        continue;\n      case 'rounding-mode-half-even':\n        result.roundingMode = 'halfEven';\n        continue;\n      case 'rounding-mode-half-down':\n        result.roundingMode = 'halfTrunc';\n        continue;\n      case 'rounding-mode-half-up':\n        result.roundingMode = 'halfExpand';\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      var opt = token.options[0];\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n      if (opt === 'w') {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          trailingZeroDisplay: 'stripIfInteger'\n        });\n      } else if (opt) {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTyxJQUFJQSxpQkFBaUIsR0FBRyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3Utc2tlbGV0b24tcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanM/MTFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZ2VuZXJhdGVkIGZyb20gcmVnZXgtZ2VuLnRzXG5leHBvcnQgdmFyIFdISVRFX1NQQUNFX1JFR0VYID0gL1tcXHQtXFxyIFxceDg1XFx1MjAwRVxcdTIwMEZcXHUyMDI4XFx1MjAyOV0vaTtcbiJdLCJuYW1lcyI6WyJXSElURV9TUEFDRV9SRUdFWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n");

/***/ })

};
;