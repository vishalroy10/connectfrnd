"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/protobufjs";
exports.ids = ["vendor-chunks/protobufjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/protobufjs/ext/descriptor/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/protobufjs/ext/descriptor/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nvar $protobuf = __webpack_require__(/*! ../.. */ \"(ssr)/./node_modules/protobufjs/index.js\");\nmodule.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(__webpack_require__(/*! ../../google/protobuf/descriptor.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json\")).lookup(\".google.protobuf\");\nvar Namespace = $protobuf.Namespace,\n  Root = $protobuf.Root,\n  Enum = $protobuf.Enum,\n  Type = $protobuf.Type,\n  Field = $protobuf.Field,\n  MapField = $protobuf.MapField,\n  OneOf = $protobuf.OneOf,\n  Service = $protobuf.Service,\n  Method = $protobuf.Method;\n\n// --- Root ---\n\n/**\n * Properties of a FileDescriptorSet message.\n * @interface IFileDescriptorSet\n * @property {IFileDescriptorProto[]} file Files\n */\n\n/**\n * Properties of a FileDescriptorProto message.\n * @interface IFileDescriptorProto\n * @property {string} [name] File name\n * @property {string} [package] Package\n * @property {*} [dependency] Not supported\n * @property {*} [publicDependency] Not supported\n * @property {*} [weakDependency] Not supported\n * @property {IDescriptorProto[]} [messageType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IServiceDescriptorProto[]} [service] Nested services\n * @property {IFieldDescriptorProto[]} [extension] Nested extension fields\n * @property {IFileOptions} [options] Options\n * @property {*} [sourceCodeInfo] Not supported\n * @property {string} [syntax=\"proto2\"] Syntax\n */\n\n/**\n * Properties of a FileOptions message.\n * @interface IFileOptions\n * @property {string} [javaPackage]\n * @property {string} [javaOuterClassname]\n * @property {boolean} [javaMultipleFiles]\n * @property {boolean} [javaGenerateEqualsAndHash]\n * @property {boolean} [javaStringCheckUtf8]\n * @property {IFileOptionsOptimizeMode} [optimizeFor=1]\n * @property {string} [goPackage]\n * @property {boolean} [ccGenericServices]\n * @property {boolean} [javaGenericServices]\n * @property {boolean} [pyGenericServices]\n * @property {boolean} [deprecated]\n * @property {boolean} [ccEnableArenas]\n * @property {string} [objcClassPrefix]\n * @property {string} [csharpNamespace]\n */\n\n/**\n * Values of he FileOptions.OptimizeMode enum.\n * @typedef IFileOptionsOptimizeMode\n * @type {number}\n * @property {number} SPEED=1\n * @property {number} CODE_SIZE=2\n * @property {number} LITE_RUNTIME=3\n */\n\n/**\n * Creates a root from a descriptor set.\n * @param {IFileDescriptorSet|Reader|Uint8Array} descriptor Descriptor\n * @returns {Root} Root instance\n */\nRoot.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.FileDescriptorSet.decode(descriptor);\n  var root = new Root();\n  if (descriptor.file) {\n    var fileDescriptor, filePackage;\n    for (var j = 0, i; j < descriptor.file.length; ++j) {\n      filePackage = root;\n      if ((fileDescriptor = descriptor.file[j])[\"package\"] && fileDescriptor[\"package\"].length) filePackage = root.define(fileDescriptor[\"package\"]);\n      if (fileDescriptor.name && fileDescriptor.name.length) root.files.push(filePackage.filename = fileDescriptor.name);\n      if (fileDescriptor.messageType) for (i = 0; i < fileDescriptor.messageType.length; ++i) filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));\n      if (fileDescriptor.enumType) for (i = 0; i < fileDescriptor.enumType.length; ++i) filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));\n      if (fileDescriptor.extension) for (i = 0; i < fileDescriptor.extension.length; ++i) filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));\n      if (fileDescriptor.service) for (i = 0; i < fileDescriptor.service.length; ++i) filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));\n      var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);\n      if (opts) {\n        var ks = Object.keys(opts);\n        for (i = 0; i < ks.length; ++i) filePackage.setOption(ks[i], opts[ks[i]]);\n      }\n    }\n  }\n  return root;\n};\n\n/**\n * Converts a root to a descriptor set.\n * @returns {Message<IFileDescriptorSet>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */\nRoot.prototype.toDescriptor = function toDescriptor(syntax) {\n  var set = exports.FileDescriptorSet.create();\n  Root_toDescriptorRecursive(this, set.file, syntax);\n  return set;\n};\n\n// Traverses a namespace and assembles the descriptor set\nfunction Root_toDescriptorRecursive(ns, files, syntax) {\n  // Create a new file\n  var file = exports.FileDescriptorProto.create({\n    name: ns.filename || (ns.fullName.substring(1).replace(/\\./g, \"_\") || \"root\") + \".proto\"\n  });\n  if (syntax) file.syntax = syntax;\n  if (!(ns instanceof Root)) file[\"package\"] = ns.fullName.substring(1);\n\n  // Add nested types\n  for (var i = 0, nested; i < ns.nestedArray.length; ++i) if ((nested = ns._nestedArray[i]) instanceof Type) file.messageType.push(nested.toDescriptor(syntax));else if (nested instanceof Enum) file.enumType.push(nested.toDescriptor());else if (nested instanceof Field) file.extension.push(nested.toDescriptor(syntax));else if (nested instanceof Service) file.service.push(nested.toDescriptor());else if (nested instanceof /* plain */Namespace) Root_toDescriptorRecursive(nested, files, syntax); // requires new file\n\n  // Keep package-level options\n  file.options = toDescriptorOptions(ns.options, exports.FileOptions);\n\n  // And keep the file only if there is at least one nested object\n  if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length) files.push(file);\n}\n\n// --- Type ---\n\n/**\n * Properties of a DescriptorProto message.\n * @interface IDescriptorProto\n * @property {string} [name] Message type name\n * @property {IFieldDescriptorProto[]} [field] Fields\n * @property {IFieldDescriptorProto[]} [extension] Extension fields\n * @property {IDescriptorProto[]} [nestedType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IDescriptorProtoExtensionRange[]} [extensionRange] Extension ranges\n * @property {IOneofDescriptorProto[]} [oneofDecl] Oneofs\n * @property {IMessageOptions} [options] Not supported\n * @property {IDescriptorProtoReservedRange[]} [reservedRange] Reserved ranges\n * @property {string[]} [reservedName] Reserved names\n */\n\n/**\n * Properties of a MessageOptions message.\n * @interface IMessageOptions\n * @property {boolean} [mapEntry=false] Whether this message is a map entry\n */\n\n/**\n * Properties of an ExtensionRange message.\n * @interface IDescriptorProtoExtensionRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */\n\n/**\n * Properties of a ReservedRange message.\n * @interface IDescriptorProtoReservedRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */\n\nvar unnamedMessageIndex = 0;\n\n/**\n * Creates a type from a descriptor.\n * @param {IDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n * @returns {Type} Type instance\n */\nType.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n\n  // Create the message type\n  var type = new Type(descriptor.name.length ? descriptor.name : \"Type\" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)),\n    i;\n\n  /* Oneofs */\n  if (descriptor.oneofDecl) for (i = 0; i < descriptor.oneofDecl.length; ++i) type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));\n  /* Fields */\n  if (descriptor.field) for (i = 0; i < descriptor.field.length; ++i) {\n    var field = Field.fromDescriptor(descriptor.field[i], syntax);\n    type.add(field);\n    if (descriptor.field[i].hasOwnProperty(\"oneofIndex\"))\n      // eslint-disable-line no-prototype-builtins\n      type.oneofsArray[descriptor.field[i].oneofIndex].add(field);\n  }\n  /* Extension fields */\n  if (descriptor.extension) for (i = 0; i < descriptor.extension.length; ++i) type.add(Field.fromDescriptor(descriptor.extension[i], syntax));\n  /* Nested types */\n  if (descriptor.nestedType) for (i = 0; i < descriptor.nestedType.length; ++i) {\n    type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));\n    if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry) type.setOption(\"map_entry\", true);\n  }\n  /* Nested enums */\n  if (descriptor.enumType) for (i = 0; i < descriptor.enumType.length; ++i) type.add(Enum.fromDescriptor(descriptor.enumType[i]));\n  /* Extension ranges */\n  if (descriptor.extensionRange && descriptor.extensionRange.length) {\n    type.extensions = [];\n    for (i = 0; i < descriptor.extensionRange.length; ++i) type.extensions.push([descriptor.extensionRange[i].start, descriptor.extensionRange[i].end]);\n  }\n  /* Reserved... */\n  if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {\n    type.reserved = [];\n    /* Ranges */\n    if (descriptor.reservedRange) for (i = 0; i < descriptor.reservedRange.length; ++i) type.reserved.push([descriptor.reservedRange[i].start, descriptor.reservedRange[i].end]);\n    /* Names */\n    if (descriptor.reservedName) for (i = 0; i < descriptor.reservedName.length; ++i) type.reserved.push(descriptor.reservedName[i]);\n  }\n  return type;\n};\n\n/**\n * Converts a type to a descriptor.\n * @returns {Message<IDescriptorProto>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */\nType.prototype.toDescriptor = function toDescriptor(syntax) {\n  var descriptor = exports.DescriptorProto.create({\n      name: this.name\n    }),\n    i;\n\n  /* Fields */\n  for (i = 0; i < this.fieldsArray.length; ++i) {\n    var fieldDescriptor;\n    descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));\n    if (this._fieldsArray[i] instanceof MapField) {\n      // map fields are repeated FieldNameEntry\n      var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType),\n        valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType),\n        valueTypeName = valueType === /* type */11 || valueType === /* enum */14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : undefined;\n      descriptor.nestedType.push(exports.DescriptorProto.create({\n        name: fieldDescriptor.typeName,\n        field: [exports.FieldDescriptorProto.create({\n          name: \"key\",\n          number: 1,\n          label: 1,\n          type: keyType\n        }),\n        // can't reference a type or enum\n        exports.FieldDescriptorProto.create({\n          name: \"value\",\n          number: 2,\n          label: 1,\n          type: valueType,\n          typeName: valueTypeName\n        })],\n        options: exports.MessageOptions.create({\n          mapEntry: true\n        })\n      }));\n    }\n  }\n  /* Oneofs */\n  for (i = 0; i < this.oneofsArray.length; ++i) descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());\n  /* Nested... */\n  for (i = 0; i < this.nestedArray.length; ++i) {\n    /* Extension fields */if (this._nestedArray[i] instanceof Field) descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));\n    /* Types */else if (this._nestedArray[i] instanceof Type) descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));\n    /* Enums */else if (this._nestedArray[i] instanceof Enum) descriptor.enumType.push(this._nestedArray[i].toDescriptor());\n    // plain nested namespaces become packages instead in Root#toDescriptor\n  }\n  /* Extension ranges */\n  if (this.extensions) for (i = 0; i < this.extensions.length; ++i) descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({\n    start: this.extensions[i][0],\n    end: this.extensions[i][1]\n  }));\n  /* Reserved... */\n  if (this.reserved) for (i = 0; i < this.reserved.length; ++i) /* Names */if (typeof this.reserved[i] === \"string\") descriptor.reservedName.push(this.reserved[i]);\n  /* Ranges */else descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create({\n    start: this.reserved[i][0],\n    end: this.reserved[i][1]\n  }));\n  descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);\n  return descriptor;\n};\n\n// --- Field ---\n\n/**\n * Properties of a FieldDescriptorProto message.\n * @interface IFieldDescriptorProto\n * @property {string} [name] Field name\n * @property {number} [number] Field id\n * @property {IFieldDescriptorProtoLabel} [label] Field rule\n * @property {IFieldDescriptorProtoType} [type] Field basic type\n * @property {string} [typeName] Field type name\n * @property {string} [extendee] Extended type name\n * @property {string} [defaultValue] Literal default value\n * @property {number} [oneofIndex] Oneof index if part of a oneof\n * @property {*} [jsonName] Not supported\n * @property {IFieldOptions} [options] Field options\n */\n\n/**\n * Values of the FieldDescriptorProto.Label enum.\n * @typedef IFieldDescriptorProtoLabel\n * @type {number}\n * @property {number} LABEL_OPTIONAL=1\n * @property {number} LABEL_REQUIRED=2\n * @property {number} LABEL_REPEATED=3\n */\n\n/**\n * Values of the FieldDescriptorProto.Type enum.\n * @typedef IFieldDescriptorProtoType\n * @type {number}\n * @property {number} TYPE_DOUBLE=1\n * @property {number} TYPE_FLOAT=2\n * @property {number} TYPE_INT64=3\n * @property {number} TYPE_UINT64=4\n * @property {number} TYPE_INT32=5\n * @property {number} TYPE_FIXED64=6\n * @property {number} TYPE_FIXED32=7\n * @property {number} TYPE_BOOL=8\n * @property {number} TYPE_STRING=9\n * @property {number} TYPE_GROUP=10\n * @property {number} TYPE_MESSAGE=11\n * @property {number} TYPE_BYTES=12\n * @property {number} TYPE_UINT32=13\n * @property {number} TYPE_ENUM=14\n * @property {number} TYPE_SFIXED32=15\n * @property {number} TYPE_SFIXED64=16\n * @property {number} TYPE_SINT32=17\n * @property {number} TYPE_SINT64=18\n */\n\n/**\n * Properties of a FieldOptions message.\n * @interface IFieldOptions\n * @property {boolean} [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)\n * @property {IFieldOptionsJSType} [jstype] JavaScript value type (not used by protobuf.js)\n */\n\n/**\n * Values of the FieldOptions.JSType enum.\n * @typedef IFieldOptionsJSType\n * @type {number}\n * @property {number} JS_NORMAL=0\n * @property {number} JS_STRING=1\n * @property {number} JS_NUMBER=2\n */\n\n// copied here from parse.js\nvar numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;\n\n/**\n * Creates a field from a descriptor.\n * @param {IFieldDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n * @returns {Field} Field instance\n */\nField.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n  if (typeof descriptor.number !== \"number\") throw Error(\"missing field id\");\n\n  // Rewire field type\n  var fieldType;\n  if (descriptor.typeName && descriptor.typeName.length) fieldType = descriptor.typeName;else fieldType = fromDescriptorType(descriptor.type);\n\n  // Rewire field rule\n  var fieldRule;\n  switch (descriptor.label) {\n    // 0 is reserved for errors\n    case 1:\n      fieldRule = undefined;\n      break;\n    case 2:\n      fieldRule = \"required\";\n      break;\n    case 3:\n      fieldRule = \"repeated\";\n      break;\n    default:\n      throw Error(\"illegal label: \" + descriptor.label);\n  }\n  var extendee = descriptor.extendee;\n  if (descriptor.extendee !== undefined) {\n    extendee = extendee.length ? extendee : undefined;\n  }\n  var field = new Field(descriptor.name.length ? descriptor.name : \"field\" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);\n  field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);\n  if (descriptor.defaultValue && descriptor.defaultValue.length) {\n    var defaultValue = descriptor.defaultValue;\n    switch (defaultValue) {\n      case \"true\":\n      case \"TRUE\":\n        defaultValue = true;\n        break;\n      case \"false\":\n      case \"FALSE\":\n        defaultValue = false;\n        break;\n      default:\n        var match = numberRe.exec(defaultValue);\n        if (match) defaultValue = parseInt(defaultValue); // eslint-disable-line radix\n        break;\n    }\n    field.setOption(\"default\", defaultValue);\n  }\n  if (packableDescriptorType(descriptor.type)) {\n    if (syntax === \"proto3\") {\n      // defaults to packed=true (internal preset is packed=true)\n      if (descriptor.options && !descriptor.options.packed) field.setOption(\"packed\", false);\n    } else if (!(descriptor.options && descriptor.options.packed))\n      // defaults to packed=false\n      field.setOption(\"packed\", false);\n  }\n  return field;\n};\n\n/**\n * Converts a field to a descriptor.\n * @returns {Message<IFieldDescriptorProto>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */\nField.prototype.toDescriptor = function toDescriptor(syntax) {\n  var descriptor = exports.FieldDescriptorProto.create({\n    name: this.name,\n    number: this.id\n  });\n  if (this.map) {\n    descriptor.type = 11; // message\n    descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)\n    descriptor.label = 3; // repeated\n  } else {\n    // Rewire field type\n    switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {\n      case 10: // group\n      case 11: // type\n      case 14:\n        // enum\n        descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;\n        break;\n    }\n\n    // Rewire field rule\n    switch (this.rule) {\n      case \"repeated\":\n        descriptor.label = 3;\n        break;\n      case \"required\":\n        descriptor.label = 2;\n        break;\n      default:\n        descriptor.label = 1;\n        break;\n    }\n  }\n\n  // Handle extension field\n  descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;\n\n  // Handle part of oneof\n  if (this.partOf) if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0) throw Error(\"missing oneof\");\n  if (this.options) {\n    descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);\n    if (this.options[\"default\"] != null) descriptor.defaultValue = String(this.options[\"default\"]);\n  }\n  if (syntax === \"proto3\") {\n    // defaults to packed=true\n    if (!this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;\n  } else if (this.packed)\n    // defaults to packed=false\n    (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;\n  return descriptor;\n};\n\n// --- Enum ---\n\n/**\n * Properties of an EnumDescriptorProto message.\n * @interface IEnumDescriptorProto\n * @property {string} [name] Enum name\n * @property {IEnumValueDescriptorProto[]} [value] Enum values\n * @property {IEnumOptions} [options] Enum options\n */\n\n/**\n * Properties of an EnumValueDescriptorProto message.\n * @interface IEnumValueDescriptorProto\n * @property {string} [name] Name\n * @property {number} [number] Value\n * @property {*} [options] Not supported\n */\n\n/**\n * Properties of an EnumOptions message.\n * @interface IEnumOptions\n * @property {boolean} [allowAlias] Whether aliases are allowed\n * @property {boolean} [deprecated]\n */\n\nvar unnamedEnumIndex = 0;\n\n/**\n * Creates an enum from a descriptor.\n * @param {IEnumDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Enum} Enum instance\n */\nEnum.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.EnumDescriptorProto.decode(descriptor);\n\n  // Construct values object\n  var values = {};\n  if (descriptor.value) for (var i = 0; i < descriptor.value.length; ++i) {\n    var name = descriptor.value[i].name,\n      value = descriptor.value[i].number || 0;\n    values[name && name.length ? name : \"NAME\" + value] = value;\n  }\n  return new Enum(descriptor.name && descriptor.name.length ? descriptor.name : \"Enum\" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports.EnumOptions));\n};\n\n/**\n * Converts an enum to a descriptor.\n * @returns {Message<IEnumDescriptorProto>} Descriptor\n */\nEnum.prototype.toDescriptor = function toDescriptor() {\n  // Values\n  var values = [];\n  for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i) values.push(exports.EnumValueDescriptorProto.create({\n    name: ks[i],\n    number: this.values[ks[i]]\n  }));\n  return exports.EnumDescriptorProto.create({\n    name: this.name,\n    value: values,\n    options: toDescriptorOptions(this.options, exports.EnumOptions)\n  });\n};\n\n// --- OneOf ---\n\n/**\n * Properties of a OneofDescriptorProto message.\n * @interface IOneofDescriptorProto\n * @property {string} [name] Oneof name\n * @property {*} [options] Not supported\n */\n\nvar unnamedOneofIndex = 0;\n\n/**\n * Creates a oneof from a descriptor.\n * @param {IOneofDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {OneOf} OneOf instance\n */\nOneOf.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.OneofDescriptorProto.decode(descriptor);\n  return new OneOf(\n  // unnamedOneOfIndex is global, not per type, because we have no ref to a type here\n  descriptor.name && descriptor.name.length ? descriptor.name : \"oneof\" + unnamedOneofIndex++\n  // fromDescriptorOptions(descriptor.options, exports.OneofOptions) - only uninterpreted_option\n  );\n};\n\n/**\n * Converts a oneof to a descriptor.\n * @returns {Message<IOneofDescriptorProto>} Descriptor\n */\nOneOf.prototype.toDescriptor = function toDescriptor() {\n  return exports.OneofDescriptorProto.create({\n    name: this.name\n    // options: toDescriptorOptions(this.options, exports.OneofOptions) - only uninterpreted_option\n  });\n};\n\n// --- Service ---\n\n/**\n * Properties of a ServiceDescriptorProto message.\n * @interface IServiceDescriptorProto\n * @property {string} [name] Service name\n * @property {IMethodDescriptorProto[]} [method] Methods\n * @property {IServiceOptions} [options] Options\n */\n\n/**\n * Properties of a ServiceOptions message.\n * @interface IServiceOptions\n * @property {boolean} [deprecated]\n */\n\nvar unnamedServiceIndex = 0;\n\n/**\n * Creates a service from a descriptor.\n * @param {IServiceDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Service} Service instance\n */\nService.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.ServiceDescriptorProto.decode(descriptor);\n  var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : \"Service\" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));\n  if (descriptor.method) for (var i = 0; i < descriptor.method.length; ++i) service.add(Method.fromDescriptor(descriptor.method[i]));\n  return service;\n};\n\n/**\n * Converts a service to a descriptor.\n * @returns {Message<IServiceDescriptorProto>} Descriptor\n */\nService.prototype.toDescriptor = function toDescriptor() {\n  // Methods\n  var methods = [];\n  for (var i = 0; i < this.methodsArray.length; ++i) methods.push(this._methodsArray[i].toDescriptor());\n  return exports.ServiceDescriptorProto.create({\n    name: this.name,\n    method: methods,\n    options: toDescriptorOptions(this.options, exports.ServiceOptions)\n  });\n};\n\n// --- Method ---\n\n/**\n * Properties of a MethodDescriptorProto message.\n * @interface IMethodDescriptorProto\n * @property {string} [name] Method name\n * @property {string} [inputType] Request type name\n * @property {string} [outputType] Response type name\n * @property {IMethodOptions} [options] Not supported\n * @property {boolean} [clientStreaming=false] Whether requests are streamed\n * @property {boolean} [serverStreaming=false] Whether responses are streamed\n */\n\n/**\n * Properties of a MethodOptions message.\n * @interface IMethodOptions\n * @property {boolean} [deprecated]\n */\n\nvar unnamedMethodIndex = 0;\n\n/**\n * Creates a method from a descriptor.\n * @param {IMethodDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Method} Reflected method instance\n */\nMethod.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.MethodDescriptorProto.decode(descriptor);\n  return new Method(\n  // unnamedMethodIndex is global, not per service, because we have no ref to a service here\n  descriptor.name && descriptor.name.length ? descriptor.name : \"Method\" + unnamedMethodIndex++, \"rpc\", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports.MethodOptions));\n};\n\n/**\n * Converts a method to a descriptor.\n * @returns {Message<IMethodDescriptorProto>} Descriptor\n */\nMethod.prototype.toDescriptor = function toDescriptor() {\n  return exports.MethodDescriptorProto.create({\n    name: this.name,\n    inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,\n    outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,\n    clientStreaming: this.requestStream,\n    serverStreaming: this.responseStream,\n    options: toDescriptorOptions(this.options, exports.MethodOptions)\n  });\n};\n\n// --- utility ---\n\n// Converts a descriptor type to a protobuf.js basic type\nfunction fromDescriptorType(type) {\n  switch (type) {\n    // 0 is reserved for errors\n    case 1:\n      return \"double\";\n    case 2:\n      return \"float\";\n    case 3:\n      return \"int64\";\n    case 4:\n      return \"uint64\";\n    case 5:\n      return \"int32\";\n    case 6:\n      return \"fixed64\";\n    case 7:\n      return \"fixed32\";\n    case 8:\n      return \"bool\";\n    case 9:\n      return \"string\";\n    case 12:\n      return \"bytes\";\n    case 13:\n      return \"uint32\";\n    case 15:\n      return \"sfixed32\";\n    case 16:\n      return \"sfixed64\";\n    case 17:\n      return \"sint32\";\n    case 18:\n      return \"sint64\";\n  }\n  throw Error(\"illegal type: \" + type);\n}\n\n// Tests if a descriptor type is packable\nfunction packableDescriptorType(type) {\n  switch (type) {\n    case 1: // double\n    case 2: // float\n    case 3: // int64\n    case 4: // uint64\n    case 5: // int32\n    case 6: // fixed64\n    case 7: // fixed32\n    case 8: // bool\n    case 13: // uint32\n    case 14: // enum (!)\n    case 15: // sfixed32\n    case 16: // sfixed64\n    case 17: // sint32\n    case 18:\n      // sint64\n      return true;\n  }\n  return false;\n}\n\n// Converts a protobuf.js basic type to a descriptor type\nfunction toDescriptorType(type, resolvedType) {\n  switch (type) {\n    // 0 is reserved for errors\n    case \"double\":\n      return 1;\n    case \"float\":\n      return 2;\n    case \"int64\":\n      return 3;\n    case \"uint64\":\n      return 4;\n    case \"int32\":\n      return 5;\n    case \"fixed64\":\n      return 6;\n    case \"fixed32\":\n      return 7;\n    case \"bool\":\n      return 8;\n    case \"string\":\n      return 9;\n    case \"bytes\":\n      return 12;\n    case \"uint32\":\n      return 13;\n    case \"sfixed32\":\n      return 15;\n    case \"sfixed64\":\n      return 16;\n    case \"sint32\":\n      return 17;\n    case \"sint64\":\n      return 18;\n  }\n  if (resolvedType instanceof Enum) return 14;\n  if (resolvedType instanceof Type) return resolvedType.group ? 10 : 11;\n  throw Error(\"illegal type: \" + type);\n}\n\n// Converts descriptor options to an options object\nfunction fromDescriptorOptions(options, type) {\n  if (!options) return undefined;\n  var out = [];\n  for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i) if ((key = (field = type._fieldsArray[i]).name) !== \"uninterpretedOption\") if (options.hasOwnProperty(key)) {\n    // eslint-disable-line no-prototype-builtins\n    val = options[key];\n    if (field.resolvedType instanceof Enum && typeof val === \"number\" && field.resolvedType.valuesById[val] !== undefined) val = field.resolvedType.valuesById[val];\n    out.push(underScore(key), val);\n  }\n  return out.length ? $protobuf.util.toObject(out) : undefined;\n}\n\n// Converts an options object to descriptor options\nfunction toDescriptorOptions(options, type) {\n  if (!options) return undefined;\n  var out = [];\n  for (var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i) {\n    val = options[key = ks[i]];\n    if (key === \"default\") continue;\n    var field = type.fields[key];\n    if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)])) continue;\n    out.push(key, val);\n  }\n  return out.length ? type.fromObject($protobuf.util.toObject(out)) : undefined;\n}\n\n// Calculates the shortest relative path from `from` to `to`.\nfunction shortname(from, to) {\n  var fromPath = from.fullName.split(\".\"),\n    toPath = to.fullName.split(\".\"),\n    i = 0,\n    j = 0,\n    k = toPath.length - 1;\n  if (!(from instanceof Root) && to instanceof Namespace) while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {\n    var other = to.lookup(fromPath[i++], true);\n    if (other !== null && other !== to) break;\n    ++j;\n  } else for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);\n  return toPath.slice(j).join(\".\");\n}\n\n// copied here from cli/targets/proto.js\nfunction underScore(str) {\n  return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function ($0, $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n}\n\n// --- exports ---\n\n/**\n * Reflected file descriptor set.\n * @name FileDescriptorSet\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected file descriptor proto.\n * @name FileDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected descriptor proto.\n * @name DescriptorProto\n * @type {Type}\n * @property {Type} ExtensionRange\n * @property {Type} ReservedRange\n * @const\n * @tstype $protobuf.Type & {\n *     ExtensionRange: $protobuf.Type,\n *     ReservedRange: $protobuf.Type\n * }\n */\n\n/**\n * Reflected field descriptor proto.\n * @name FieldDescriptorProto\n * @type {Type}\n * @property {Enum} Label\n * @property {Enum} Type\n * @const\n * @tstype $protobuf.Type & {\n *     Label: $protobuf.Enum,\n *     Type: $protobuf.Enum\n * }\n */\n\n/**\n * Reflected oneof descriptor proto.\n * @name OneofDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum descriptor proto.\n * @name EnumDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected service descriptor proto.\n * @name ServiceDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum value descriptor proto.\n * @name EnumValueDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected method descriptor proto.\n * @name MethodDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected file options.\n * @name FileOptions\n * @type {Type}\n * @property {Enum} OptimizeMode\n * @const\n * @tstype $protobuf.Type & {\n *     OptimizeMode: $protobuf.Enum\n * }\n */\n\n/**\n * Reflected message options.\n * @name MessageOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected field options.\n * @name FieldOptions\n * @type {Type}\n * @property {Enum} CType\n * @property {Enum} JSType\n * @const\n * @tstype $protobuf.Type & {\n *     CType: $protobuf.Enum,\n *     JSType: $protobuf.Enum\n * }\n */\n\n/**\n * Reflected oneof options.\n * @name OneofOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum options.\n * @name EnumOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum value options.\n * @name EnumValueOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected service options.\n * @name ServiceOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected method options.\n * @name MethodOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected uninterpretet option.\n * @name UninterpretedOption\n * @type {Type}\n * @property {Type} NamePart\n * @const\n * @tstype $protobuf.Type & {\n *     NamePart: $protobuf.Type\n * }\n */\n\n/**\n * Reflected source code info.\n * @name SourceCodeInfo\n * @type {Type}\n * @property {Type} Location\n * @const\n * @tstype $protobuf.Type & {\n *     Location: $protobuf.Type\n * }\n */\n\n/**\n * Reflected generated code info.\n * @name GeneratedCodeInfo\n * @type {Type}\n * @property {Type} Annotation\n * @const\n * @tstype $protobuf.Type & {\n *     Annotation: $protobuf.Type\n * }\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/ext/descriptor/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/index.js":
/*!******************************************!*\
  !*** ./node_modules/protobufjs/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// full library entry point.\n\n\n\nmodule.exports = __webpack_require__(/*! ./src/index */ \"(ssr)/./node_modules/protobufjs/src/index.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFYTs7QUFDYkEsdUdBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL2luZGV4LmpzPzRmMjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZnVsbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4XCIpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/common.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/common.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = common;\nvar commonRe = /\\/|\\./;\n\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */\nfunction common(name, json) {\n  if (!commonRe.test(name)) {\n    name = \"google/protobuf/\" + name + \".proto\";\n    json = {\n      nested: {\n        google: {\n          nested: {\n            protobuf: {\n              nested: json\n            }\n          }\n        }\n      }\n    };\n  }\n  common[name] = json;\n}\n\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\n\ncommon(\"any\", {\n  /**\n   * Properties of a google.protobuf.Any message.\n   * @interface IAny\n   * @type {Object}\n   * @property {string} [typeUrl]\n   * @property {Uint8Array} [bytes]\n   * @memberof common\n   */\n  Any: {\n    fields: {\n      type_url: {\n        type: \"string\",\n        id: 1\n      },\n      value: {\n        type: \"bytes\",\n        id: 2\n      }\n    }\n  }\n});\nvar timeType;\ncommon(\"duration\", {\n  /**\n   * Properties of a google.protobuf.Duration message.\n   * @interface IDuration\n   * @type {Object}\n   * @property {number|Long} [seconds]\n   * @property {number} [nanos]\n   * @memberof common\n   */\n  Duration: timeType = {\n    fields: {\n      seconds: {\n        type: \"int64\",\n        id: 1\n      },\n      nanos: {\n        type: \"int32\",\n        id: 2\n      }\n    }\n  }\n});\ncommon(\"timestamp\", {\n  /**\n   * Properties of a google.protobuf.Timestamp message.\n   * @interface ITimestamp\n   * @type {Object}\n   * @property {number|Long} [seconds]\n   * @property {number} [nanos]\n   * @memberof common\n   */\n  Timestamp: timeType\n});\ncommon(\"empty\", {\n  /**\n   * Properties of a google.protobuf.Empty message.\n   * @interface IEmpty\n   * @memberof common\n   */\n  Empty: {\n    fields: {}\n  }\n});\ncommon(\"struct\", {\n  /**\n   * Properties of a google.protobuf.Struct message.\n   * @interface IStruct\n   * @type {Object}\n   * @property {Object.<string,IValue>} [fields]\n   * @memberof common\n   */\n  Struct: {\n    fields: {\n      fields: {\n        keyType: \"string\",\n        type: \"Value\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.Value message.\n   * @interface IValue\n   * @type {Object}\n   * @property {string} [kind]\n   * @property {0} [nullValue]\n   * @property {number} [numberValue]\n   * @property {string} [stringValue]\n   * @property {boolean} [boolValue]\n   * @property {IStruct} [structValue]\n   * @property {IListValue} [listValue]\n   * @memberof common\n   */\n  Value: {\n    oneofs: {\n      kind: {\n        oneof: [\"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\"]\n      }\n    },\n    fields: {\n      nullValue: {\n        type: \"NullValue\",\n        id: 1\n      },\n      numberValue: {\n        type: \"double\",\n        id: 2\n      },\n      stringValue: {\n        type: \"string\",\n        id: 3\n      },\n      boolValue: {\n        type: \"bool\",\n        id: 4\n      },\n      structValue: {\n        type: \"Struct\",\n        id: 5\n      },\n      listValue: {\n        type: \"ListValue\",\n        id: 6\n      }\n    }\n  },\n  NullValue: {\n    values: {\n      NULL_VALUE: 0\n    }\n  },\n  /**\n   * Properties of a google.protobuf.ListValue message.\n   * @interface IListValue\n   * @type {Object}\n   * @property {Array.<IValue>} [values]\n   * @memberof common\n   */\n  ListValue: {\n    fields: {\n      values: {\n        rule: \"repeated\",\n        type: \"Value\",\n        id: 1\n      }\n    }\n  }\n});\ncommon(\"wrappers\", {\n  /**\n   * Properties of a google.protobuf.DoubleValue message.\n   * @interface IDoubleValue\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  DoubleValue: {\n    fields: {\n      value: {\n        type: \"double\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.FloatValue message.\n   * @interface IFloatValue\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  FloatValue: {\n    fields: {\n      value: {\n        type: \"float\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.Int64Value message.\n   * @interface IInt64Value\n   * @type {Object}\n   * @property {number|Long} [value]\n   * @memberof common\n   */\n  Int64Value: {\n    fields: {\n      value: {\n        type: \"int64\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.UInt64Value message.\n   * @interface IUInt64Value\n   * @type {Object}\n   * @property {number|Long} [value]\n   * @memberof common\n   */\n  UInt64Value: {\n    fields: {\n      value: {\n        type: \"uint64\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.Int32Value message.\n   * @interface IInt32Value\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  Int32Value: {\n    fields: {\n      value: {\n        type: \"int32\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.UInt32Value message.\n   * @interface IUInt32Value\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  UInt32Value: {\n    fields: {\n      value: {\n        type: \"uint32\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.BoolValue message.\n   * @interface IBoolValue\n   * @type {Object}\n   * @property {boolean} [value]\n   * @memberof common\n   */\n  BoolValue: {\n    fields: {\n      value: {\n        type: \"bool\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.StringValue message.\n   * @interface IStringValue\n   * @type {Object}\n   * @property {string} [value]\n   * @memberof common\n   */\n  StringValue: {\n    fields: {\n      value: {\n        type: \"string\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.BytesValue message.\n   * @interface IBytesValue\n   * @type {Object}\n   * @property {Uint8Array} [value]\n   * @memberof common\n   */\n  BytesValue: {\n    fields: {\n      value: {\n        type: \"bytes\",\n        id: 1\n      }\n    }\n  }\n});\ncommon(\"field_mask\", {\n  /**\n   * Properties of a google.protobuf.FieldMask message.\n   * @interface IDoubleValue\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  FieldMask: {\n    fields: {\n      paths: {\n        rule: \"repeated\",\n        type: \"string\",\n        id: 1\n      }\n    }\n  }\n});\n\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */\ncommon.get = function get(file) {\n  return common[file] || null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/converter.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/converter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n  var defaultAlreadyEmitted = false;\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(d%s){\", prop);\n      for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n        // enum unknown values passthrough\n        if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {\n          gen(\"default:\")(\"if(typeof(d%s)===\\\"number\\\"){m%s=d%s;break}\", prop, prop, prop);\n          if (!field.repeated) gen // fallback to default value only for\n          // arrays, to avoid leaving holes.\n          (\"break\"); // for non-repeated fields, just ignore\n          defaultAlreadyEmitted = true;\n        }\n        gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n      }\n      gen(\"}\");\n    } else gen(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n        break;\n      case \"uint32\":\n      case \"fixed32\":\n        gen(\"m%s=d%s>>>0\", prop, prop);\n        break;\n      case \"int32\":\n      case \"sint32\":\n      case \"sfixed32\":\n        gen(\"m%s=d%s|0\", prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-next-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)(\"else if(typeof d%s===\\\"string\\\")\", prop)(\"m%s=parseInt(d%s,10)\", prop, prop)(\"else if(typeof d%s===\\\"number\\\")\", prop)(\"m%s=d%s\", prop, prop)(\"else if(typeof d%s===\\\"object\\\")\", prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n        break;\n      case \"bytes\":\n        gen(\"if(typeof d%s===\\\"string\\\")\", prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length >= 0)\", prop)(\"m%s=d%s\", prop, prop);\n        break;\n      case \"string\":\n        gen(\"m%s=String(d%s)\", prop, prop);\n        break;\n      case \"bool\":\n        gen(\"m%s=Boolean(d%s)\", prop, prop);\n        break;\n      /* default: gen\n          (\"m%s=d%s\", prop, prop);\n          break; */\n    }\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray;\n  var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n  if (!fields.length) return gen(\"return new this.ctor\");\n  gen(\"var m=new this.ctor\");\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      prop = util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(d%s){\", prop)(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[ks[i]]\")(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[i]\")(\"}\")(\"}\");\n\n      // Non-repeated fields\n    } else {\n      if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n      (\"if(d%s!=null){\", prop); // !== undefined && !== null\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop);\n      if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n    }\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-next-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(typeof m%s===\\\"number\\\")\", prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n        (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n        break;\n      case \"bytes\":\n        gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n        break;\n      default:\n        gen(\"d%s=m%s\", prop, prop);\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  if (!fields.length) return util.codegen()(\"return {}\");\n  var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n  var repeatedFields = [],\n    mapFields = [],\n    normalFields = [],\n    i = 0;\n  for (; i < fields.length; ++i) if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n  if (repeatedFields.length) {\n    gen(\"if(o.arrays||o.defaults){\");\n    for (i = 0; i < repeatedFields.length; ++i) gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n    gen(\"}\");\n  }\n  if (mapFields.length) {\n    gen(\"if(o.objects||o.defaults){\");\n    for (i = 0; i < mapFields.length; ++i) gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n    gen(\"}\");\n  }\n  if (normalFields.length) {\n    gen(\"if(o.defaults){\");\n    for (i = 0; i < normalFields.length; ++i) {\n      var field = normalFields[i],\n        prop = util.safeProp(field.name);\n      if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {\n        var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n        gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n      } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n    }\n    gen(\"}\");\n  }\n  var hasKs2 = false;\n  for (i = 0; i < fields.length; ++i) {\n    var field = fields[i],\n      index = mtype._fieldsArray.indexOf(field),\n      prop = util.safeProp(field.name);\n    if (field.map) {\n      if (!hasKs2) {\n        hasKs2 = true;\n        gen(\"var ks2\");\n      }\n      gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[ks2[j]]\")(\"}\");\n    } else if (field.repeated) {\n      gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[j]\")(\"}\");\n    } else {\n      gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n      genValuePartial_toObject(gen, field, /* sorted */index, prop);\n      if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n    }\n    gen(\"}\");\n  }\n  return gen(\"return d\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/converter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/decoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/decoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = decoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nfunction missing(field) {\n  return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function (field) {\n    return field.map;\n  }).length ? \",k,value\" : \"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\");\n  if (mtype.group) gen(\"if((t&7)===4)\")(\"break\");\n  gen(\"switch(t>>>3){\");\n  var i = 0;\n  for (; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n      ref = \"m\" + util.safeProp(field.name);\n    gen(\"case %i: {\", field.id);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(%s===util.emptyObject)\", ref)(\"%s={}\", ref)(\"var c2 = r.uint32()+r.pos\");\n      if (types.defaults[field.keyType] !== undefined) gen(\"k=%j\", types.defaults[field.keyType]);else gen(\"k=null\");\n      if (types.defaults[type] !== undefined) gen(\"value=%j\", types.defaults[type]);else gen(\"value=null\");\n      gen(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\", field.keyType)(\"case 2:\");\n      if (types.basic[type] === undefined) gen(\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n      else gen(\"value=r.%s()\", type);\n      gen(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\");\n      if (types.long[field.keyType] !== undefined) gen(\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=value\", ref);else gen(\"%s[k]=value\", ref);\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!(%s&&%s.length))\", ref, ref)(\"%s=[]\", ref);\n\n      // Packable (always check for forward and backward compatiblity)\n      if (types.packed[type] !== undefined) gen(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\", ref, type)(\"}else\");\n\n      // Non-packed\n      if (types.basic[type] === undefined) gen(field.resolvedType.group ? \"%s.push(types[%i].decode(r))\" : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);else gen(\"%s.push(r.%s())\", ref, type);\n\n      // Non-repeated\n    } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? \"%s=types[%i].decode(r)\" : \"%s=types[%i].decode(r,r.uint32())\", ref, i);else gen(\"%s=r.%s()\", ref, type);\n    gen(\"break\")(\"}\");\n    // Unknown fields\n  }\n  gen(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\");\n\n  // Field presence\n  for (i = 0; i < mtype._fieldsArray.length; ++i) {\n    var rfield = mtype._fieldsArray[i];\n    if (rfield.required) gen(\"if(!m.hasOwnProperty(%j))\", rfield.name)(\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/encoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/encoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = encoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n  return field.resolvedType.group ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")(\"if(!w)\")(\"w=Writer.create()\");\n  var i, ref;\n\n  // \"when a message is serialized its known fields should be written sequentially by field number\"\n  var fields = /* initializes */mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      index = mtype._fieldsArray.indexOf(field),\n      type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n      wireType = types.basic[type];\n    ref = \"m\" + util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n      (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n      if (wireType === undefined) gen(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n      else gen(\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n      gen(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n      // Packed repeated\n      if (field.packed && types.packed[type] !== undefined) {\n        gen(\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)(\"for(var i=0;i<%s.length;++i)\", ref)(\"w.%s(%s[i])\", type, ref)(\"w.ldelim()\");\n\n        // Non-packed\n      } else {\n        gen(\"for(var i=0;i<%s.length;++i)\", ref);\n        if (wireType === undefined) genTypePartial(gen, field, index, ref + \"[i]\");else gen(\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n      }\n      gen(\"}\");\n\n      // Non-repeated\n    } else {\n      if (field.optional) gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n      if (wireType === undefined) genTypePartial(gen, field, index, ref);else gen(\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n    }\n  }\n  return gen(\"return w\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/enum.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/enum.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */\nfunction Enum(name, values, options, comment, comments, valuesOptions) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n\n  /**\n   * Enum values by id.\n   * @type {Object.<number,string>}\n   */\n  this.valuesById = {};\n\n  /**\n   * Enum values by name.\n   * @type {Object.<string,number>}\n   */\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\n   * Enum comment text.\n   * @type {string|null}\n   */\n  this.comment = comment;\n\n  /**\n   * Value comment texts, if any.\n   * @type {Object.<string,string>}\n   */\n  this.comments = comments || {};\n\n  /**\n   * Values options, if any\n   * @type {Object<string, Object<string, *>>|undefined}\n   */\n  this.valuesOptions = valuesOptions;\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n  this.reserved = undefined; // toJSON\n\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) if (typeof values[keys[i]] === \"number\")\n    // use forward entries only\n    this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"valuesOptions\", this.valuesOptions, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment, options) {\n  // utilized by the parser but not by .fromJSON\n\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n  if (options) {\n    if (this.valuesOptions === undefined) this.valuesOptions = {};\n    this.valuesOptions[name] = options || null;\n  }\n  this.comments[name] = comment || null;\n  return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  if (this.valuesOptions) delete this.valuesOptions[name];\n  return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/field.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/field.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n  return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n\n  /**\n   * Field rule, if any.\n   * @type {string|undefined}\n   */\n  if (rule === \"proto3_optional\") {\n    rule = \"optional\";\n  }\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\n   * Field type.\n   * @type {string}\n   */\n  this.type = type; // toJSON\n\n  /**\n   * Unique field id.\n   * @type {number}\n   */\n  this.id = id; // toJSON, marker\n\n  /**\n   * Extended type if different from parent.\n   * @type {string|undefined}\n   */\n  this.extend = extend || undefined; // toJSON\n\n  /**\n   * Whether this field is required.\n   * @type {boolean}\n   */\n  this.required = rule === \"required\";\n\n  /**\n   * Whether this field is optional.\n   * @type {boolean}\n   */\n  this.optional = !this.required;\n\n  /**\n   * Whether this field is repeated.\n   * @type {boolean}\n   */\n  this.repeated = rule === \"repeated\";\n\n  /**\n   * Whether this field is a map or not.\n   * @type {boolean}\n   */\n  this.map = false;\n\n  /**\n   * Message this field belongs to.\n   * @type {Type|null}\n   */\n  this.message = null;\n\n  /**\n   * OneOf this field belongs to, if any,\n   * @type {OneOf|null}\n   */\n  this.partOf = null;\n\n  /**\n   * The field type's default value.\n   * @type {*}\n   */\n  this.typeDefault = null;\n\n  /**\n   * The field's default value on prototypes.\n   * @type {*}\n   */\n  this.defaultValue = null;\n\n  /**\n   * Whether this field's value should be treated as a long.\n   * @type {boolean}\n   */\n  this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;\n\n  /**\n   * Whether this field's value is a buffer.\n   * @type {boolean}\n   */\n  this.bytes = type === \"bytes\";\n\n  /**\n   * Resolved type if not a basic type.\n   * @type {Type|Enum|null}\n   */\n  this.resolvedType = null;\n\n  /**\n   * Sister-field within the extended type if a declaring extension field.\n   * @type {Field|null}\n   */\n  this.extensionField = null;\n\n  /**\n   * Sister-field within the declaring namespace if an extended field.\n   * @type {Field|null}\n   */\n  this.declaringField = null;\n\n  /**\n   * Internally remembers whether this field is packed.\n   * @type {boolean|null}\n   * @private\n   */\n  this._packed = null;\n\n  /**\n   * Comment for this field.\n   * @type {string|null}\n   */\n  this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function () {\n    // defaults to packed=true if not explicity set to false\n    if (this._packed === null) this._packed = this.getOption(\"packed\") !== false;\n    return this._packed;\n  }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (name === \"packed\")\n    // clear cached before setting\n    this._packed = null;\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else\n      // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } else if (this.options && this.options.proto3_optional) {\n    // proto3 scalar value marked optional; should default to null\n    this.typeDefault = null;\n  }\n\n  // use explicitly set default value if present\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  }\n\n  // remove unnecessary options\n  if (this.options) {\n    if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  }\n\n  // convert to internal data type if necesssary\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n    /* istanbul ignore else */\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  }\n\n  // take special care of maps and repeated fields\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;\n\n  // ensure proper value on prototype\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n\n  // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n  Type = Type_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index-light.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/index-light.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar protobuf = module.exports = __webpack_require__(/*! ./index-minimal */ \"(ssr)/./node_modules/protobufjs/src/index-minimal.js\");\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n  if (typeof root === \"function\") {\n    callback = root;\n    root = new protobuf.Root();\n  } else if (!root) root = new protobuf.Root();\n  return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n  if (!root) root = new protobuf.Root();\n  return root.loadSync(filename);\n}\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/protobufjs/src/encoder.js\");\nprotobuf.decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/protobufjs/src/decoder.js\");\nprotobuf.verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/protobufjs/src/verifier.js\");\nprotobuf.converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/protobufjs/src/converter.js\");\n\n// Reflection\nprotobuf.ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\nprotobuf.Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\nprotobuf.Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\");\nprotobuf.Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\");\nprotobuf.Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\");\nprotobuf.Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\");\nprotobuf.OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nprotobuf.MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\");\nprotobuf.Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\");\nprotobuf.Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\");\n\n// Runtime\nprotobuf.Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\");\nprotobuf.wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/protobufjs/src/wrappers.js\");\n\n// Utility\nprotobuf.types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\");\nprotobuf.util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index-light.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"(ssr)/./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"(ssr)/./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n  protobuf.util._configure();\n  protobuf.Writer._configure(protobuf.BufferWriter);\n  protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFJQSxRQUFRLEdBQUdDLE9BQU87O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxRQUFRLENBQUNFLEtBQUssR0FBRyxTQUFTOztBQUUxQjtBQUNBRixRQUFRLENBQUNHLE1BQU0sR0FBU0MsbUJBQU8sQ0FBQywrREFBVSxDQUFDO0FBQzNDSixRQUFRLENBQUNLLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyw2RUFBaUIsQ0FBQztBQUNsREosUUFBUSxDQUFDTSxNQUFNLEdBQVNGLG1CQUFPLENBQUMsK0RBQVUsQ0FBQztBQUMzQ0osUUFBUSxDQUFDTyxZQUFZLEdBQUdILG1CQUFPLENBQUMsNkVBQWlCLENBQUM7O0FBRWxEO0FBQ0FKLFFBQVEsQ0FBQ1EsSUFBSSxHQUFXSixtQkFBTyxDQUFDLDJFQUFnQixDQUFDO0FBQ2pESixRQUFRLENBQUNTLEdBQUcsR0FBWUwsbUJBQU8sQ0FBQyx5REFBTyxDQUFDO0FBQ3hDSixRQUFRLENBQUNVLEtBQUssR0FBVU4sbUJBQU8sQ0FBQyw2REFBUyxDQUFDO0FBQzFDSixRQUFRLENBQUNXLFNBQVMsR0FBTUEsU0FBUzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFNBQVNBLENBQUEsRUFBRztFQUNqQlgsUUFBUSxDQUFDUSxJQUFJLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0VBQzFCWixRQUFRLENBQUNHLE1BQU0sQ0FBQ1MsVUFBVSxDQUFDWixRQUFRLENBQUNLLFlBQVksQ0FBQztFQUNqREwsUUFBUSxDQUFDTSxNQUFNLENBQUNNLFVBQVUsQ0FBQ1osUUFBUSxDQUFDTyxZQUFZLENBQUM7QUFDckQ7O0FBRUE7QUFDQUksU0FBUyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanM/OTQzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IGV4cG9ydHM7XG5cbi8qKlxuICogQnVpbGQgdHlwZSwgb25lIG9mIGBcImZ1bGxcImAsIGBcImxpZ2h0XCJgIG9yIGBcIm1pbmltYWxcImAuXG4gKiBAbmFtZSBidWlsZFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xuXG4vLyBTZXJpYWxpemF0aW9uXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJfYnVmZmVyXCIpO1xucHJvdG9idWYuUmVhZGVyICAgICAgID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcblxuLy8gVXRpbGl0eVxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xucHJvdG9idWYucnBjICAgICAgICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xucHJvdG9idWYucm9vdHMgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdHNcIik7XG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIFJlY29uZmlndXJlcyB0aGUgbGlicmFyeSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50LlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlKCkge1xuICAgIHByb3RvYnVmLnV0aWwuX2NvbmZpZ3VyZSgpO1xuICAgIHByb3RvYnVmLldyaXRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlcldyaXRlcik7XG4gICAgcHJvdG9idWYuUmVhZGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyUmVhZGVyKTtcbn1cblxuLy8gU2V0IHVwIGJ1ZmZlciB1dGlsaXR5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnRcbmNvbmZpZ3VyZSgpO1xuIl0sIm5hbWVzIjpbInByb3RvYnVmIiwiZXhwb3J0cyIsImJ1aWxkIiwiV3JpdGVyIiwicmVxdWlyZSIsIkJ1ZmZlcldyaXRlciIsIlJlYWRlciIsIkJ1ZmZlclJlYWRlciIsInV0aWwiLCJycGMiLCJyb290cyIsImNvbmZpZ3VyZSIsIl9jb25maWd1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar protobuf = module.exports = __webpack_require__(/*! ./index-light */ \"(ssr)/./node_modules/protobufjs/src/index-light.js\");\nprotobuf.build = \"full\";\n\n// Parser\nprotobuf.tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/protobufjs/src/tokenize.js\");\nprotobuf.parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/protobufjs/src/parse.js\");\nprotobuf.common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/protobufjs/src/common.js\");\n\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBSUEsUUFBUSxHQUFHQywrR0FBeUM7QUFFeERELFFBQVEsQ0FBQ0ksS0FBSyxHQUFHLE1BQU07O0FBRXZCO0FBQ0FKLFFBQVEsQ0FBQ0ssUUFBUSxHQUFXRixtQkFBTyxDQUFDLG1FQUFZLENBQUM7QUFDakRILFFBQVEsQ0FBQ00sS0FBSyxHQUFjSCxtQkFBTyxDQUFDLDZEQUFTLENBQUM7QUFDOUNILFFBQVEsQ0FBQ08sTUFBTSxHQUFhSixtQkFBTyxDQUFDLCtEQUFVLENBQUM7O0FBRS9DO0FBQ0FILFFBQVEsQ0FBQ1EsSUFBSSxDQUFDQyxVQUFVLENBQUNULFFBQVEsQ0FBQ1UsSUFBSSxFQUFFVixRQUFRLENBQUNNLEtBQUssRUFBRU4sUUFBUSxDQUFDTyxNQUFNLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LmpzPzVhNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHJvdG9idWYgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2luZGV4LWxpZ2h0XCIpO1xuXG5wcm90b2J1Zi5idWlsZCA9IFwiZnVsbFwiO1xuXG4vLyBQYXJzZXJcbnByb3RvYnVmLnRva2VuaXplICAgICAgICAgPSByZXF1aXJlKFwiLi90b2tlbml6ZVwiKTtcbnByb3RvYnVmLnBhcnNlICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9wYXJzZVwiKTtcbnByb3RvYnVmLmNvbW1vbiAgICAgICAgICAgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5cbi8vIENvbmZpZ3VyZSBwYXJzZXJcbnByb3RvYnVmLlJvb3QuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlLCBwcm90b2J1Zi5wYXJzZSwgcHJvdG9idWYuY29tbW9uKTtcbiJdLCJuYW1lcyI6WyJwcm90b2J1ZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiYnVpbGQiLCJ0b2tlbml6ZSIsInBhcnNlIiwiY29tbW9uIiwiUm9vdCIsIl9jb25maWd1cmUiLCJUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/mapfield.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/mapfield.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = MapField;\n\n// extends Field\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n  Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n  /* istanbul ignore if */\n  if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n\n  /**\n   * Key type.\n   * @type {string}\n   */\n  this.keyType = keyType; // toJSON, marker\n\n  /**\n   * Resolved key type if not a basic type.\n   * @type {ReflectionObject|null}\n   */\n  this.resolvedKeyType = null;\n\n  // Overrides Field#map\n  this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n  return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"keyType\", this.keyType, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n\n  // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n  if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n  return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n  // submessage value: decorate the submessage and use its name as the type\n  if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name;\n\n  // enum reference value: create a reflected copy of the enum and keep reuseing it\n  else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n  return function mapFieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/mapfield.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/message.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/message.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Message;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n  // not used internally\n  if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n  return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n  return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n  return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n  return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n  return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n  return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n  return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n  return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/method.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/method.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n  /* istanbul ignore next */\n  if (util.isObject(requestStream)) {\n    options = requestStream;\n    requestStream = responseStream = undefined;\n  } else if (util.isObject(responseStream)) {\n    options = responseStream;\n    responseStream = undefined;\n  }\n\n  /* istanbul ignore if */\n  if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n\n  /* istanbul ignore if */\n  if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n\n  /* istanbul ignore if */\n  if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n  ReflectionObject.call(this, name, options);\n\n  /**\n   * Method type.\n   * @type {string}\n   */\n  this.type = type || \"rpc\"; // toJSON\n\n  /**\n   * Request type.\n   * @type {string}\n   */\n  this.requestType = requestType; // toJSON, marker\n\n  /**\n   * Whether requests are streamed or not.\n   * @type {boolean|undefined}\n   */\n  this.requestStream = requestStream ? true : undefined; // toJSON\n\n  /**\n   * Response type.\n   * @type {string}\n   */\n  this.responseType = responseType; // toJSON\n\n  /**\n   * Whether responses are streamed or not.\n   * @type {boolean|undefined}\n   */\n  this.responseStream = responseStream ? true : undefined; // toJSON\n\n  /**\n   * Resolved request type.\n   * @type {Type|null}\n   */\n  this.resolvedRequestType = null;\n\n  /**\n   * Resolved response type.\n   * @type {Type|null}\n   */\n  this.resolvedResponseType = null;\n\n  /**\n   * Comment for this method\n   * @type {string|null}\n   */\n  this.comment = comment;\n\n  /**\n   * Options properly parsed into an object\n   */\n  this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n  return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"type\", this.type !== \"rpc\" && /* istanbul ignore next */this.type || undefined, \"requestType\", this.requestType, \"requestStream\", this.requestStream, \"responseType\", this.responseType, \"responseStream\", this.responseStream, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined, \"parsedOptions\", this.parsedOptions]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n  /* istanbul ignore if */\n  if (this.resolved) return this;\n  this.resolvedRequestType = this.parent.lookupType(this.requestType);\n  this.resolvedResponseType = this.parent.lookupType(this.responseType);\n  return ReflectionObject.prototype.resolve.call(this);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/namespace.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/namespace.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nvar Type,\n  // cyclic\n  Service, Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n  return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n  if (!(array && array.length)) return undefined;\n  var obj = {};\n  for (var i = 0; i < array.length; ++i) obj[array[i].name] = array[i].toJSON(toJSONOptions);\n  return obj;\n}\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id) return true;\n  return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (reserved[i] === name) return true;\n  return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n  ReflectionObject.call(this, name, options);\n\n  /**\n   * Nested objects by name.\n   * @type {Object.<string,ReflectionObject>|undefined}\n   */\n  this.nested = undefined; // toJSON\n\n  /**\n   * Cached nested objects as an array.\n   * @type {ReflectionObject[]|null}\n   * @private\n   */\n  this._nestedArray = null;\n}\nfunction clearCache(namespace) {\n  namespace._nestedArray = null;\n  return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n  get: function () {\n    return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n  }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}\n */\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n  return util.toObject([\"options\", this.options, \"nested\", arrayToJSON(this.nestedArray, toJSONOptions)]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n  var ns = this;\n  /* istanbul ignore else */\n  if (nestedJson) {\n    for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n      nested = nestedJson[names[i]];\n      ns.add(\n      // most to least likely\n      (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n  return this.nested && this.nested[name] || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n  if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;\n  throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n  if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError(\"object must be a valid nested object\");\n  if (!this.nested) this.nested = {};else {\n    var prev = this.get(object.name);\n    if (prev) {\n      if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n        // replace plain namespace but keep existing nested elements and options\n        var nested = prev.nestedArray;\n        for (var i = 0; i < nested.length; ++i) object.add(nested[i]);\n        this.remove(prev);\n        if (!this.nested) this.nested = {};\n        object.setOptions(prev.options, true);\n      } else throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    }\n  }\n  this.nested[object.name] = object;\n  object.onAdd(this);\n  return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n  if (!(object instanceof ReflectionObject)) throw TypeError(\"object must be a ReflectionObject\");\n  if (object.parent !== this) throw Error(object + \" is not a member of \" + this);\n  delete this.nested[object.name];\n  if (!Object.keys(this.nested).length) this.nested = undefined;\n  object.onRemove(this);\n  return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n  if (util.isString(path)) path = path.split(\".\");else if (!Array.isArray(path)) throw TypeError(\"illegal path\");\n  if (path && path.length && path[0] === \"\") throw Error(\"path must be relative\");\n  var ptr = this;\n  while (path.length > 0) {\n    var part = path.shift();\n    if (ptr.nested && ptr.nested[part]) {\n      ptr = ptr.nested[part];\n      if (!(ptr instanceof Namespace)) throw Error(\"path conflicts with non-namespace objects\");\n    } else ptr.add(ptr = new Namespace(part));\n  }\n  if (json) ptr.addJSON(json);\n  return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n  var nested = this.nestedArray,\n    i = 0;\n  while (i < nested.length) if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();\n  return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n  /* istanbul ignore next */\n  if (typeof filterTypes === \"boolean\") {\n    parentAlreadyChecked = filterTypes;\n    filterTypes = undefined;\n  } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];\n  if (util.isString(path) && path.length) {\n    if (path === \".\") return this.root;\n    path = path.split(\".\");\n  } else if (!path.length) return this;\n\n  // Start at root if path is absolute\n  if (path[0] === \"\") return this.root.lookup(path.slice(1), filterTypes);\n\n  // Test if the first part matches any nested object, and if so, traverse if path contains more\n  var found = this.get(path[0]);\n  if (found) {\n    if (path.length === 1) {\n      if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;\n    } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;\n\n    // Otherwise try each nested namespace\n  } else for (var i = 0; i < this.nestedArray.length; ++i) if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;\n\n  // If there hasn't been a match, try again at the parent\n  if (this.parent === null || parentAlreadyChecked) return null;\n  return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n  var found = this.lookup(path, [Type]);\n  if (!found) throw Error(\"no such type: \" + path);\n  return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n  var found = this.lookup(path, [Enum]);\n  if (!found) throw Error(\"no such Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n  var found = this.lookup(path, [Type, Enum]);\n  if (!found) throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n  var found = this.lookup(path, [Service]);\n  if (!found) throw Error(\"no such Service '\" + path + \"' in \" + this);\n  return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function (Type_, Service_, Enum_) {\n  Type = Type_;\n  Service = Service_;\n  Enum = Enum_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/namespace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/object.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/object.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n\n  /**\n   * Options.\n   * @type {Object.<string,*>|undefined}\n   */\n  this.options = options; // toJSON\n\n  /**\n   * Parsed Options.\n   * @type {Array.<Object.<string,*>>|undefined}\n   */\n  this.parsedOptions = null;\n\n  /**\n   * Unique name within its namespace.\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * Parent namespace.\n   * @type {Namespace|null}\n   */\n  this.parent = null;\n\n  /**\n   * Whether already resolved or not.\n   * @type {boolean}\n   */\n  this.resolved = false;\n\n  /**\n   * Comment text, if any.\n   * @type {string|null}\n   */\n  this.comment = null;\n\n  /**\n   * Defining file name.\n   * @type {string|null}\n   */\n  this.filename = null;\n}\nObject.defineProperties(ReflectionObject.prototype, {\n  /**\n   * Reference to the root namespace.\n   * @name ReflectionObject#root\n   * @type {Root}\n   * @readonly\n   */\n  root: {\n    get: function () {\n      var ptr = this;\n      while (ptr.parent !== null) ptr = ptr.parent;\n      return ptr;\n    }\n  },\n  /**\n   * Full name including leading dot.\n   * @name ReflectionObject#fullName\n   * @type {string}\n   * @readonly\n   */\n  fullName: {\n    get: function () {\n      var path = [this.name],\n        ptr = this.parent;\n      while (ptr) {\n        path.unshift(ptr.name);\n        ptr = ptr.parent;\n      }\n      return path.join(\".\");\n    }\n  }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */function toJSON() {\n  throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n  if (this.parent && this.parent !== parent) this.parent.remove(this);\n  this.parent = parent;\n  this.resolved = false;\n  var root = parent.root;\n  if (root instanceof Root) root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n  var root = parent.root;\n  if (root instanceof Root) root._handleRemove(this);\n  this.parent = null;\n  this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if (this.root instanceof Root) this.resolved = true; // only if part of a root\n  return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n  if (this.options) return this.options[name];\n  return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;\n  return this;\n};\n\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n  if (!this.parsedOptions) {\n    this.parsedOptions = [];\n  }\n  var parsedOptions = this.parsedOptions;\n  if (propName) {\n    // If setting a sub property of an option then try to merge it\n    // with an existing option\n    var opt = parsedOptions.find(function (opt) {\n      return Object.prototype.hasOwnProperty.call(opt, name);\n    });\n    if (opt) {\n      // If we found an existing option - just merge the property value\n      var newValue = opt[name];\n      util.setProperty(newValue, propName, value);\n    } else {\n      // otherwise, create a new option, set it's property and add it to the list\n      opt = {};\n      opt[name] = util.setProperty({}, propName, value);\n      parsedOptions.push(opt);\n    }\n  } else {\n    // Always create a new option when setting the value of the option itself\n    var newOpt = {};\n    newOpt[name] = value;\n    parsedOptions.push(newOpt);\n  }\n  return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n  if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) this.setOption(keys[i], options[keys[i]], ifNotSet);\n  return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n  var className = this.constructor.className,\n    fullName = this.fullName;\n  if (fullName.length) return className + \" \" + fullName;\n  return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function (Root_) {\n  Root = Root_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/oneof.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/oneof.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n  if (!Array.isArray(fieldNames)) {\n    options = fieldNames;\n    fieldNames = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n\n  /* istanbul ignore if */\n  if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError(\"fieldNames must be an Array\");\n\n  /**\n   * Field names that belong to this oneof.\n   * @type {string[]}\n   */\n  this.oneof = fieldNames || []; // toJSON, marker\n\n  /**\n   * Fields that belong to this oneof as an array for iteration.\n   * @type {Field[]}\n   * @readonly\n   */\n  this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n  /**\n   * Comment for this field.\n   * @type {string|null}\n   */\n  this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n  return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"oneof\", this.oneof, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n  if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  if (field.parent && field.parent !== this.parent) field.parent.remove(field);\n  this.oneof.push(field.name);\n  this.fieldsArray.push(field);\n  field.partOf = this; // field.parent remains null\n  addFieldsToParent(this);\n  return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  var index = this.fieldsArray.indexOf(field);\n\n  /* istanbul ignore if */\n  if (index < 0) throw Error(field + \" is not a member of \" + this);\n  this.fieldsArray.splice(index, 1);\n  index = this.oneof.indexOf(field.name);\n\n  /* istanbul ignore else */\n  if (index > -1)\n    // theoretical\n    this.oneof.splice(index, 1);\n  field.partOf = null;\n  return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n  ReflectionObject.prototype.onAdd.call(this, parent);\n  var self = this;\n  // Collect present fields\n  for (var i = 0; i < this.oneof.length; ++i) {\n    var field = parent.get(this.oneof[i]);\n    if (field && !field.partOf) {\n      field.partOf = self;\n      self.fieldsArray.push(field);\n    }\n  }\n  // Add not yet present fields\n  addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n  for (var i = 0, field; i < this.fieldsArray.length; ++i) if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);\n  ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n  var fieldNames = new Array(arguments.length),\n    index = 0;\n  while (index < arguments.length) fieldNames[index] = arguments[index++];\n  return function oneOfDecorator(prototype, oneofName) {\n    util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));\n    Object.defineProperty(prototype, oneofName, {\n      get: util.oneOfGetter(fieldNames),\n      set: util.oneOfSetter(fieldNames)\n    });\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/oneof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/parse.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/parse.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n  keepCase: false\n};\nvar tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/protobufjs/src/tokenize.js\"),\n  Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\"),\n  Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\"),\n  Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"),\n  Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\"),\n  Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar base10Re = /^[1-9][0-9]*$/,\n  base10NegRe = /^-?[1-9][0-9]*$/,\n  base16Re = /^0[x][0-9a-fA-F]+$/,\n  base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n  base8Re = /^0[0-7]+$/,\n  base8NegRe = /^-?0[0-7]+$/,\n  numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n  nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n  typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n  fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n  /* eslint-disable callback-return */\n  if (!(root instanceof Root)) {\n    options = root;\n    root = new Root();\n  }\n  if (!options) options = parse.defaults;\n  var preferTrailingComment = options.preferTrailingComment || false;\n  var tn = tokenize(source, options.alternateCommentMode || false),\n    next = tn.next,\n    push = tn.push,\n    peek = tn.peek,\n    skip = tn.skip,\n    cmnt = tn.cmnt;\n  var head = true,\n    pkg,\n    imports,\n    weakImports,\n    syntax,\n    isProto3 = false;\n  var ptr = root;\n  var applyCase = options.keepCase ? function (name) {\n    return name;\n  } : util.camelCase;\n\n  /* istanbul ignore next */\n  function illegal(token, name, insideTryCatch) {\n    var filename = parse.filename;\n    if (!insideTryCatch) parse.filename = null;\n    return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n  }\n  function readString() {\n    var values = [],\n      token;\n    do {\n      /* istanbul ignore if */\n      if ((token = next()) !== \"\\\"\" && token !== \"'\") throw illegal(token);\n      values.push(next());\n      skip(token);\n      token = peek();\n    } while (token === \"\\\"\" || token === \"'\");\n    return values.join(\"\");\n  }\n  function readValue(acceptTypeRef) {\n    var token = next();\n    switch (token) {\n      case \"'\":\n      case \"\\\"\":\n        push(token);\n        return readString();\n      case \"true\":\n      case \"TRUE\":\n        return true;\n      case \"false\":\n      case \"FALSE\":\n        return false;\n    }\n    try {\n      return parseNumber(token, /* insideTryCatch */true);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (acceptTypeRef && typeRefRe.test(token)) return token;\n\n      /* istanbul ignore next */\n      throw illegal(token, \"value\");\n    }\n  }\n  function readRanges(target, acceptStrings) {\n    var token, start;\n    do {\n      if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\")) target.push(readString());else target.push([start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start]);\n    } while (skip(\",\", true));\n    skip(\";\");\n  }\n  function parseNumber(token, insideTryCatch) {\n    var sign = 1;\n    if (token.charAt(0) === \"-\") {\n      sign = -1;\n      token = token.substring(1);\n    }\n    switch (token) {\n      case \"inf\":\n      case \"INF\":\n      case \"Inf\":\n        return sign * Infinity;\n      case \"nan\":\n      case \"NAN\":\n      case \"Nan\":\n      case \"NaN\":\n        return NaN;\n      case \"0\":\n        return 0;\n    }\n    if (base10Re.test(token)) return sign * parseInt(token, 10);\n    if (base16Re.test(token)) return sign * parseInt(token, 16);\n    if (base8Re.test(token)) return sign * parseInt(token, 8);\n\n    /* istanbul ignore else */\n    if (numberRe.test(token)) return sign * parseFloat(token);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"number\", insideTryCatch);\n  }\n  function parseId(token, acceptNegative) {\n    switch (token) {\n      case \"max\":\n      case \"MAX\":\n      case \"Max\":\n        return 536870911;\n      case \"0\":\n        return 0;\n    }\n\n    /* istanbul ignore if */\n    if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n    if (base10NegRe.test(token)) return parseInt(token, 10);\n    if (base16NegRe.test(token)) return parseInt(token, 16);\n\n    /* istanbul ignore else */\n    if (base8NegRe.test(token)) return parseInt(token, 8);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"id\");\n  }\n  function parsePackage() {\n    /* istanbul ignore if */\n    if (pkg !== undefined) throw illegal(\"package\");\n    pkg = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n    ptr = ptr.define(pkg);\n    skip(\";\");\n  }\n  function parseImport() {\n    var token = peek();\n    var whichImports;\n    switch (token) {\n      case \"weak\":\n        whichImports = weakImports || (weakImports = []);\n        next();\n        break;\n      case \"public\":\n        next();\n      // eslint-disable-next-line no-fallthrough\n      default:\n        whichImports = imports || (imports = []);\n        break;\n    }\n    token = readString();\n    skip(\";\");\n    whichImports.push(token);\n  }\n  function parseSyntax() {\n    skip(\"=\");\n    syntax = readString();\n    isProto3 = syntax === \"proto3\";\n\n    /* istanbul ignore if */\n    if (!isProto3 && syntax !== \"proto2\") throw illegal(syntax, \"syntax\");\n    skip(\";\");\n  }\n  function parseCommon(parent, token) {\n    switch (token) {\n      case \"option\":\n        parseOption(parent, token);\n        skip(\";\");\n        return true;\n      case \"message\":\n        parseType(parent, token);\n        return true;\n      case \"enum\":\n        parseEnum(parent, token);\n        return true;\n      case \"service\":\n        parseService(parent, token);\n        return true;\n      case \"extend\":\n        parseExtension(parent, token);\n        return true;\n    }\n    return false;\n  }\n  function ifBlock(obj, fnIf, fnElse) {\n    var trailingLine = tn.line;\n    if (obj) {\n      if (typeof obj.comment !== \"string\") {\n        obj.comment = cmnt(); // try block-type comment\n      }\n\n      obj.filename = parse.filename;\n    }\n    if (skip(\"{\", true)) {\n      var token;\n      while ((token = next()) !== \"}\") fnIf(token);\n      skip(\";\", true);\n    } else {\n      if (fnElse) fnElse();\n      skip(\";\");\n      if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n    }\n  }\n\n  function parseType(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n    var type = new Type(token);\n    ifBlock(type, function parseType_block(token) {\n      if (parseCommon(type, token)) return;\n      switch (token) {\n        case \"map\":\n          parseMapField(type, token);\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"oneof\":\n          parseOneOf(type, token);\n          break;\n        case \"extensions\":\n          readRanges(type.extensions || (type.extensions = []));\n          break;\n        case \"reserved\":\n          readRanges(type.reserved || (type.reserved = []), true);\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(type, \"optional\");\n          break;\n      }\n    });\n    parent.add(type);\n  }\n  function parseField(parent, rule, extend) {\n    var type = next();\n    if (type === \"group\") {\n      parseGroup(parent, rule);\n      return;\n    }\n    // Type names can consume multiple tokens, in multiple variants:\n    //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    // Keep reading tokens until we get a type name with no period at the end,\n    // and the next token does not start with a period.\n    while (type.endsWith(\".\") || peek().startsWith(\".\")) {\n      type += next();\n    }\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    name = applyCase(name);\n    skip(\"=\");\n    var field = new Field(name, parseId(next()), type, rule, extend);\n    ifBlock(field, function parseField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseField_line() {\n      parseInlineOptions(field);\n    });\n    if (rule === \"proto3_optional\") {\n      // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n      var oneof = new OneOf(\"_\" + name);\n      field.setOption(\"proto3_optional\", true);\n      oneof.add(field);\n      parent.add(oneof);\n    } else {\n      parent.add(field);\n    }\n\n    // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n    // parsing proto2 descriptors without the option, where applicable. This must be done for\n    // all known packable types and anything that could be an enum (= is not a basic type).\n    if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption(\"packed\", false, /* ifNotSet */true);\n  }\n  function parseGroup(parent, rule) {\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    var fieldName = util.lcFirst(name);\n    if (name === fieldName) name = util.ucFirst(name);\n    skip(\"=\");\n    var id = parseId(next());\n    var type = new Type(name);\n    type.group = true;\n    var field = new Field(fieldName, id, name, rule);\n    field.filename = parse.filename;\n    ifBlock(type, function parseGroup_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(type, token);\n          skip(\";\");\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"message\":\n          parseType(type, token);\n          break;\n        case \"enum\":\n          parseEnum(type, token);\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw illegal(token);\n        // there are no groups with proto3 semantics\n      }\n    });\n\n    parent.add(type).add(field);\n  }\n  function parseMapField(parent) {\n    skip(\"<\");\n    var keyType = next();\n\n    /* istanbul ignore if */\n    if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n    skip(\",\");\n    var valueType = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n    skip(\">\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    skip(\"=\");\n    var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n    ifBlock(field, function parseMapField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseMapField_line() {\n      parseInlineOptions(field);\n    });\n    parent.add(field);\n  }\n  function parseOneOf(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var oneof = new OneOf(applyCase(token));\n    ifBlock(oneof, function parseOneOf_block(token) {\n      if (token === \"option\") {\n        parseOption(oneof, token);\n        skip(\";\");\n      } else {\n        push(token);\n        parseField(oneof, \"optional\");\n      }\n    });\n    parent.add(oneof);\n  }\n  function parseEnum(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var enm = new Enum(token);\n    ifBlock(enm, function parseEnum_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(enm, token);\n          skip(\";\");\n          break;\n        case \"reserved\":\n          readRanges(enm.reserved || (enm.reserved = []), true);\n          break;\n        default:\n          parseEnumValue(enm, token);\n      }\n    });\n    parent.add(enm);\n  }\n  function parseEnumValue(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token)) throw illegal(token, \"name\");\n    skip(\"=\");\n    var value = parseId(next(), true),\n      dummy = {\n        options: undefined\n      };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseEnumValue_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseEnumValue_line() {\n      parseInlineOptions(dummy); // skip\n    });\n\n    parent.add(token, value, dummy.comment, dummy.options);\n  }\n  function parseOption(parent, token) {\n    var isCustom = skip(\"(\", true);\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token;\n    var option = name;\n    var propName;\n    if (isCustom) {\n      skip(\")\");\n      name = \"(\" + name + \")\";\n      option = name;\n      token = peek();\n      if (fqTypeRefRe.test(token)) {\n        propName = token.slice(1); //remove '.' before property name\n        name += token;\n        next();\n      }\n    }\n    skip(\"=\");\n    var optionValue = parseOptionValue(parent, name);\n    setParsedOption(parent, option, optionValue, propName);\n  }\n  function parseOptionValue(parent, name) {\n    // { a: \"foo\" b { c: \"bar\" } }\n    if (skip(\"{\", true)) {\n      var objectResult = {};\n      while (!skip(\"}\", true)) {\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next())) {\n          throw illegal(token, \"name\");\n        }\n        if (token === null) {\n          throw illegal(token, \"end of input\");\n        }\n        var value;\n        var propName = token;\n        skip(\":\", true);\n        if (peek() === \"{\") value = parseOptionValue(parent, name + \".\" + token);else if (peek() === \"[\") {\n          // option (my_option) = {\n          //     repeated_value: [ \"foo\", \"bar\" ]\n          // };\n          value = [];\n          var lastValue;\n          if (skip(\"[\", true)) {\n            do {\n              lastValue = readValue(true);\n              value.push(lastValue);\n            } while (skip(\",\", true));\n            skip(\"]\");\n            if (typeof lastValue !== \"undefined\") {\n              setOption(parent, name + \".\" + token, lastValue);\n            }\n          }\n        } else {\n          value = readValue(true);\n          setOption(parent, name + \".\" + token, value);\n        }\n        var prevValue = objectResult[propName];\n        if (prevValue) value = [].concat(prevValue).concat(value);\n        objectResult[propName] = value;\n\n        // Semicolons and commas can be optional\n        skip(\",\", true);\n        skip(\";\", true);\n      }\n      return objectResult;\n    }\n    var simpleValue = readValue(true);\n    setOption(parent, name, simpleValue);\n    return simpleValue;\n    // Does not enforce a delimiter to be universal\n  }\n\n  function setOption(parent, name, value) {\n    if (parent.setOption) parent.setOption(name, value);\n  }\n  function setParsedOption(parent, name, value, propName) {\n    if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n  }\n  function parseInlineOptions(parent) {\n    if (skip(\"[\", true)) {\n      do {\n        parseOption(parent, \"option\");\n      } while (skip(\",\", true));\n      skip(\"]\");\n    }\n    return parent;\n  }\n  function parseService(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n    var service = new Service(token);\n    ifBlock(service, function parseService_block(token) {\n      if (parseCommon(service, token)) return;\n\n      /* istanbul ignore else */\n      if (token === \"rpc\") parseMethod(service, token);else throw illegal(token);\n    });\n    parent.add(service);\n  }\n  function parseMethod(parent, token) {\n    // Get the comment of the preceding line now (if one exists) in case the\n    // method is defined across multiple lines.\n    var commentText = cmnt();\n    var type = token;\n\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token,\n      requestType,\n      requestStream,\n      responseType,\n      responseStream;\n    skip(\"(\");\n    if (skip(\"stream\", true)) requestStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    requestType = token;\n    skip(\")\");\n    skip(\"returns\");\n    skip(\"(\");\n    if (skip(\"stream\", true)) responseStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    responseType = token;\n    skip(\")\");\n    var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n    method.comment = commentText;\n    ifBlock(method, function parseMethod_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(method, token);\n        skip(\";\");\n      } else throw illegal(token);\n    });\n    parent.add(method);\n  }\n  function parseExtension(parent, token) {\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n    var reference = token;\n    ifBlock(null, function parseExtension_block(token) {\n      switch (token) {\n        case \"required\":\n        case \"repeated\":\n          parseField(parent, token, reference);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(parent, \"proto3_optional\", reference);\n          } else {\n            parseField(parent, \"optional\", reference);\n          }\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(parent, \"optional\", reference);\n          break;\n      }\n    });\n  }\n  var token;\n  while ((token = next()) !== null) {\n    switch (token) {\n      case \"package\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parsePackage();\n        break;\n      case \"import\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseImport();\n        break;\n      case \"syntax\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseSyntax();\n        break;\n      case \"option\":\n        parseOption(ptr, token);\n        skip(\";\");\n        break;\n      default:\n        /* istanbul ignore else */\n        if (parseCommon(ptr, token)) {\n          head = false;\n          continue;\n        }\n\n        /* istanbul ignore next */\n        throw illegal(token);\n    }\n  }\n  parse.filename = null;\n  return {\n    \"package\": pkg,\n    \"imports\": imports,\n    weakImports: weakImports,\n    syntax: syntax,\n    root: root\n  };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Reader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar BufferReader; // cyclic\n\nvar LongBits = util.LongBits,\n  utf8 = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n  return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n  /**\n   * Read buffer.\n   * @type {Uint8Array}\n   */\n  this.buf = buffer;\n\n  /**\n   * Read buffer position.\n   * @type {number}\n   */\n  this.pos = 0;\n\n  /**\n   * Read buffer length.\n   * @type {number}\n   */\n  this.len = buffer.length;\n}\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n  if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n}\n/* istanbul ignore next */ : function create_array(buffer) {\n  if (Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n};\nvar create = function create() {\n  return util.Buffer ? function create_buffer_setup(buffer) {\n    return (Reader.create = function create_buffer(buffer) {\n      return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n      /* istanbul ignore next */ : create_array(buffer);\n    })(buffer);\n  }\n  /* istanbul ignore next */ : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = function read_uint32_setup() {\n  var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n  return function read_uint32() {\n    value = (this.buf[this.pos] & 127) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n\n    /* istanbul ignore if */\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len;\n      throw indexOutOfRange(this, 10);\n    }\n    return value;\n  };\n}();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n  return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n  var value = this.uint32();\n  return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n  // tends to deopt with local vars for octet etc.\n  var bits = new LongBits(0, 0);\n  var i = 0;\n  if (this.len - this.pos > 4) {\n    // fast route (lo)\n    for (; i < 4; ++i) {\n      // 1st..4th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 5th\n    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n    bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n    if (this.buf[this.pos++] < 128) return bits;\n    i = 0;\n  } else {\n    for (; i < 3; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 1st..3th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 4th\n    bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n    return bits;\n  }\n  if (this.len - this.pos > 4) {\n    // fast route (hi)\n    for (; i < 5; ++i) {\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  } else {\n    for (; i < 5; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  }\n  /* istanbul ignore next */\n  throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n  return this.uint32() !== 0;\n};\nfunction readFixed32_end(buf, end) {\n  // note that this uses `end`, not `pos`\n  return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64( /* this: Reader */\n) {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n  return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readFloatLE(this.buf, this.pos);\n  this.pos += 4;\n  return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readDoubleLE(this.buf, this.pos);\n  this.pos += 8;\n  return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n  var length = this.uint32(),\n    start = this.pos,\n    end = this.pos + length;\n\n  /* istanbul ignore if */\n  if (end > this.len) throw indexOutOfRange(this, length);\n  this.pos += length;\n  if (Array.isArray(this.buf))\n    // plain array\n    return this.buf.slice(start, end);\n  if (start === end) {\n    // fix for IE 10/Win8 and others' subarray returning array of size 1\n    var nativeBuffer = util.Buffer;\n    return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n  }\n  return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n  var bytes = this.bytes();\n  return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n  if (typeof length === \"number\") {\n    /* istanbul ignore if */\n    if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n  } else {\n    do {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n    } while (this.buf[this.pos++] & 128);\n  }\n  return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function (wireType) {\n  switch (wireType) {\n    case 0:\n      this.skip();\n      break;\n    case 1:\n      this.skip(8);\n      break;\n    case 2:\n      this.skip(this.uint32());\n      break;\n    case 3:\n      while ((wireType = this.uint32() & 7) !== 4) {\n        this.skipType(wireType);\n      }\n      break;\n    case 5:\n      this.skip(4);\n      break;\n\n    /* istanbul ignore next */\n    default:\n      throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n  }\n  return this;\n};\nReader._configure = function (BufferReader_) {\n  BufferReader = BufferReader_;\n  Reader.create = create();\n  BufferReader._configure();\n  var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n  util.merge(Reader.prototype, {\n    int64: function read_int64() {\n      return readLongVarint.call(this)[fn](false);\n    },\n    uint64: function read_uint64() {\n      return readLongVarint.call(this)[fn](true);\n    },\n    sint64: function read_sint64() {\n      return readLongVarint.call(this).zzDecode()[fn](false);\n    },\n    fixed64: function read_fixed64() {\n      return readFixed64.call(this)[fn](true);\n    },\n    sfixed64: function read_sfixed64() {\n      return readFixed64.call(this)[fn](false);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n  Reader.call(this, buffer);\n\n  /**\n   * Read buffer.\n   * @name BufferReader#buf\n   * @type {Buffer}\n   */\n}\n\nBufferReader._configure = function () {\n  /* istanbul ignore else */\n  if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n  var len = this.uint32(); // modifies pos\n  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLCtEQUFVLENBQUM7QUFDaEMsQ0FBQ0YsWUFBWSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFlBQVk7QUFFckYsSUFBSU8sSUFBSSxHQUFHTCxtQkFBTyxDQUFDLDJFQUFnQixDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNGLFlBQVlBLENBQUNRLE1BQU0sRUFBRTtFQUMxQlAsTUFBTSxDQUFDUSxJQUFJLENBQUMsSUFBSSxFQUFFRCxNQUFNLENBQUM7O0VBRXpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVIsWUFBWSxDQUFDVSxVQUFVLEdBQUcsWUFBWTtFQUNsQztFQUNBLElBQUlILElBQUksQ0FBQ0ksTUFBTSxFQUNYWCxZQUFZLENBQUNHLFNBQVMsQ0FBQ1MsTUFBTSxHQUFHTCxJQUFJLENBQUNJLE1BQU0sQ0FBQ1IsU0FBUyxDQUFDVSxLQUFLO0FBQ25FLENBQUM7O0FBR0Q7QUFDQTtBQUNBO0FBQ0FiLFlBQVksQ0FBQ0csU0FBUyxDQUFDVyxNQUFNLEdBQUcsU0FBU0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDMUQsSUFBSUMsR0FBRyxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pCLE9BQU8sSUFBSSxDQUFDQyxHQUFHLENBQUNDLFNBQVMsR0FDbkIsSUFBSSxDQUFDRCxHQUFHLENBQUNDLFNBQVMsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDRixHQUFHLEdBQUdKLEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUcsQ0FBQyxDQUFDLEdBQzNFLElBQUksQ0FBQ0UsR0FBRyxDQUFDSyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ0gsR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNGLEdBQUcsR0FBR0osR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRyxDQUFDLENBQUM7QUFDN0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFoQixZQUFZLENBQUNVLFVBQVUsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzPzUwODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlclJlYWRlcjtcblxuLy8gZXh0ZW5kcyBSZWFkZXJcbnZhciBSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG4oQnVmZmVyUmVhZGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVhZGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyUmVhZGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciByZWFkZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBSZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlclJlYWRlcihidWZmZXIpIHtcbiAgICBSZWFkZXIuY2FsbCh0aGlzLCBidWZmZXIpO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICovXG59XG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHV0aWwuQnVmZmVyKVxuICAgICAgICBCdWZmZXJSZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZ19idWZmZXIoKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMudWludDMyKCk7IC8vIG1vZGlmaWVzIHBvc1xuICAgIHJldHVybiB0aGlzLmJ1Zi51dGY4U2xpY2VcbiAgICAgICAgPyB0aGlzLmJ1Zi51dGY4U2xpY2UodGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSlcbiAgICAgICAgOiB0aGlzLmJ1Zi50b1N0cmluZyhcInV0Zi04XCIsIHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQG5hbWUgQnVmZmVyUmVhZGVyI2J5dGVzXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcbiAqL1xuXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSgpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCdWZmZXJSZWFkZXIiLCJSZWFkZXIiLCJyZXF1aXJlIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ1dGlsIiwiYnVmZmVyIiwiY2FsbCIsIl9jb25maWd1cmUiLCJCdWZmZXIiLCJfc2xpY2UiLCJzbGljZSIsInN0cmluZyIsInJlYWRfc3RyaW5nX2J1ZmZlciIsImxlbiIsInVpbnQzMiIsImJ1ZiIsInV0ZjhTbGljZSIsInBvcyIsIk1hdGgiLCJtaW4iLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/root.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/root.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Type,\n  // cyclic\n  parse,\n  // might be excluded\n  common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n\n  /**\n   * Deferred extension fields.\n   * @type {Field[]}\n   */\n  this.deferred = [];\n\n  /**\n   * Resolved file names of loaded files.\n   * @type {string[]}\n   */\n  this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n\n  // Finishes loading by calling the callback (exactly once)\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    var cb = callback;\n    callback = null;\n    if (sync) throw err;\n    cb(err, root);\n  }\n\n  // Bundled definition existence checking\n  function getBundledFileName(filename) {\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) return altname;\n    }\n    return null;\n  }\n\n  // Processes a single file\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n          resolved,\n          i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n      }\n    } catch (err) {\n      finish(err);\n    }\n    if (!sync && !queued) finish(null, self); // only once anyway\n  }\n\n  // Fetches a single file\n  function fetch(filename, weak) {\n    filename = getBundledFileName(filename) || filename;\n\n    // Skip if already loaded / attempted\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename);\n\n    // Shortcut bundled definitions\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    }\n\n    // Otherwise fetch from disk or network\n    if (sync) {\n      var source;\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n      process(filename, source);\n    } else {\n      ++queued;\n      self.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n        if (!callback) return; // terminated meanwhile\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued)\n            // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n        process(filename, source);\n      });\n    }\n  }\n  var queued = 0;\n\n  // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n  if (util.isString(filename)) filename = [filename];\n  for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    //do not allow to extend same field twice to prevent the error\n    if (extendedType.get(sisterField.name)) {\n      return true;\n    }\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field (implies not part of a oneof) */object.extend !== undefined && /* not already handled */!object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf)) /* everything else is a namespace */{\n      if (object instanceof Type)\n        // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n      for (var j = 0; j < /* initializes */object.nestedArray.length; ++j)\n      // recurse into the namespace\n      this._handleAdd(object._nestedArray[j]);\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n  // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field */object.extend !== undefined) {\n      if ( /* already handled */object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i < /* initializes */object.nestedArray.length; ++i)\n    // recurse into the namespace\n    this._handleRemove(object._nestedArray[i]);\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/root.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQzs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcz8xZjkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBOYW1lZCByb290cy5cbiAqIFRoaXMgaXMgd2hlcmUgcGJqcyBzdG9yZXMgZ2VuZXJhdGVkIHN0cnVjdHVyZXMgKHRoZSBvcHRpb24gYC1yLCAtLXJvb3RgIHNwZWNpZmllcyBhIG5hbWUpLlxuICogQ2FuIGFsc28gYmUgdXNlZCBtYW51YWxseSB0byBtYWtlIHJvb3RzIGF2YWlsYWJsZSBhY3Jvc3MgbW9kdWxlcy5cbiAqIEBuYW1lIHJvb3RzXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsUm9vdD59XG4gKiBAZXhhbXBsZVxuICogLy8gcGJqcyAtciBteXJvb3QgLW8gY29tcGlsZWQuanMgLi4uXG4gKlxuICogLy8gaW4gYW5vdGhlciBtb2R1bGU6XG4gKiByZXF1aXJlKFwiLi9jb21waWxlZC5qc1wiKTtcbiAqXG4gKiAvLyBpbiBhbnkgc3Vic2VxdWVudCBtb2R1bGU6XG4gKiB2YXIgcm9vdCA9IHByb3RvYnVmLnJvb3RzW1wibXlyb290XCJdO1xuICovXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/roots.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"(ssr)/./node_modules/protobufjs/src/rpc/service.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsR0FBRyxHQUFHQyxPQUFPOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFELEdBQUcsQ0FBQ0UsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlFQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy5qcz80Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFN0cmVhbWluZyBSUEMgaGVscGVycy5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHJwYyA9IGV4cG9ydHM7XG5cbi8qKlxuICogUlBDIGltcGxlbWVudGF0aW9uIHBhc3NlZCB0byB7QGxpbmsgU2VydmljZSNjcmVhdGV9IHBlcmZvcm1pbmcgYSBzZXJ2aWNlIHJlcXVlc3Qgb24gbmV0d29yayBsZXZlbCwgaS5lLiBieSB1dGlsaXppbmcgaHR0cCByZXF1ZXN0cyBvciB3ZWJzb2NrZXRzLlxuICogQHR5cGVkZWYgUlBDSW1wbFxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8TWVzc2FnZTx7fT4sTWVzc2FnZTx7fT4+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2QgYmVpbmcgY2FsbGVkXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHJlcXVlc3REYXRhIFJlcXVlc3QgZGF0YVxuICogQHBhcmFtIHtSUENJbXBsQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIHJwY0ltcGwobWV0aG9kLCByZXF1ZXN0RGF0YSwgY2FsbGJhY2spIHtcbiAqICAgICBpZiAocHJvdG9idWYudXRpbC5sY0ZpcnN0KG1ldGhvZC5uYW1lKSAhPT0gXCJteU1ldGhvZFwiKSAvLyBjb21wYXRpYmxlIHdpdGggc3RhdGljIGNvZGVcbiAqICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIG1ldGhvZFwiKTtcbiAqICAgICBhc3luY2hyb25vdXNseU9idGFpbkFSZXNwb25zZShyZXF1ZXN0RGF0YSwgZnVuY3Rpb24oZXJyLCByZXNwb25zZURhdGEpIHtcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZURhdGEpO1xuICogICAgIH0pO1xuICogfVxuICovXG5cbi8qKlxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBSUENJbXBsfS5cbiAqIEB0eXBlZGVmIFJQQ0ltcGxDYWxsYmFja1xuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8bnVsbH0gW3Jlc3BvbnNlXSBSZXNwb25zZSBkYXRhIG9yIGBudWxsYCB0byBzaWduYWwgZW5kIG9mIHN0cmVhbSwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxucnBjLlNlcnZpY2UgPSByZXF1aXJlKFwiLi9ycGMvc2VydmljZVwiKTtcbiJdLCJuYW1lcyI6WyJycGMiLCJleHBvcnRzIiwiU2VydmljZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Service;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n  util.EventEmitter.call(this);\n\n  /**\n   * RPC implementation. Becomes `null` once the service is ended.\n   * @type {RPCImpl|null}\n   */\n  this.rpcImpl = rpcImpl;\n\n  /**\n   * Whether requests are length-delimited.\n   * @type {boolean}\n   */\n  this.requestDelimited = Boolean(requestDelimited);\n\n  /**\n   * Whether responses are length-delimited.\n   * @type {boolean}\n   */\n  this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n  if (!request) throw TypeError(\"request must be specified\");\n  var self = this;\n  if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n  if (!self.rpcImpl) {\n    setTimeout(function () {\n      callback(Error(\"already ended\"));\n    }, 0);\n    return undefined;\n  }\n  try {\n    return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n      if (err) {\n        self.emit(\"error\", err, method);\n        return callback(err);\n      }\n      if (response === null) {\n        self.end( /* endedByRPC */true);\n        return undefined;\n      }\n      if (!(response instanceof responseCtor)) {\n        try {\n          response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n        } catch (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n      }\n      self.emit(\"data\", response, method);\n      return callback(null, response);\n    });\n  } catch (err) {\n    self.emit(\"error\", err, method);\n    setTimeout(function () {\n      callback(err);\n    }, 0);\n    return undefined;\n  }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC)\n      // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n  return this;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/service.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/service.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"),\n  rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/protobufjs/src/rpc.js\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Service methods.\n   * @type {Object.<string,Method>}\n   */\n  this.methods = {}; // toJSON, marker\n\n  /**\n   * Cached methods as an array.\n   * @type {Method[]|null}\n   * @private\n   */\n  this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  if (json.nested) service.addJSON(json.nested);\n  service.comment = json.comment;\n  return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */{}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n  return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n  for (var i = 0, method; i < /* initializes */this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n  return rpcService;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/tokenize.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/tokenize.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = tokenize;\nvar delimRe = /[\\s{}=;:[\\],'\"()<>]/g,\n  stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n  stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\nvar setCommentRe = /^ *[*/]+ */,\n  setCommentAltRe = /^\\s*\\*?\\/*/,\n  setCommentSplitRe = /\\n/g,\n  whitespaceRe = /\\s/,\n  unescapeRe = /\\\\(.?)/g;\nvar unescapeMap = {\n  \"0\": \"\\0\",\n  \"r\": \"\\r\",\n  \"n\": \"\\n\",\n  \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n  return str.replace(unescapeRe, function ($0, $1) {\n    switch ($1) {\n      case \"\\\\\":\n      case \"\":\n        return $1;\n      default:\n        return unescapeMap[$1] || \"\";\n    }\n  });\n}\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n  /* eslint-disable callback-return */\n  source = source.toString();\n  var offset = 0,\n    length = source.length,\n    line = 1,\n    lastCommentLine = 0,\n    comments = {};\n  var stack = [];\n  var stringDelim = null;\n\n  /* istanbul ignore next */\n  /**\n   * Creates an error for illegal syntax.\n   * @param {string} subject Subject\n   * @returns {Error} Error created\n   * @inner\n   */\n  function illegal(subject) {\n    return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n  }\n\n  /**\n   * Reads a string till its end.\n   * @returns {string} String read\n   * @inner\n   */\n  function readString() {\n    var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n    re.lastIndex = offset - 1;\n    var match = re.exec(source);\n    if (!match) throw illegal(\"string\");\n    offset = re.lastIndex;\n    push(stringDelim);\n    stringDelim = null;\n    return unescape(match[1]);\n  }\n\n  /**\n   * Gets the character at `pos` within the source.\n   * @param {number} pos Position\n   * @returns {string} Character\n   * @inner\n   */\n  function charAt(pos) {\n    return source.charAt(pos);\n  }\n\n  /**\n   * Sets the current comment text.\n   * @param {number} start Start offset\n   * @param {number} end End offset\n   * @param {boolean} isLeading set if a leading comment\n   * @returns {undefined}\n   * @inner\n   */\n  function setComment(start, end, isLeading) {\n    var comment = {\n      type: source.charAt(start++),\n      lineEmpty: false,\n      leading: isLeading\n    };\n    var lookback;\n    if (alternateCommentMode) {\n      lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n    } else {\n      lookback = 3; // \"///\" or \"/**\"\n    }\n\n    var commentOffset = start - lookback,\n      c;\n    do {\n      if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n        comment.lineEmpty = true;\n        break;\n      }\n    } while (c === \" \" || c === \"\\t\");\n    var lines = source.substring(start, end).split(setCommentSplitRe);\n    for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n    comment.text = lines.join(\"\\n\").trim();\n    comments[line] = comment;\n    lastCommentLine = line;\n  }\n  function isDoubleSlashCommentLine(startOffset) {\n    var endOffset = findEndOfLine(startOffset);\n\n    // see if remaining line matches comment pattern\n    var lineText = source.substring(startOffset, endOffset);\n    var isComment = /^\\s*\\/\\//.test(lineText);\n    return isComment;\n  }\n  function findEndOfLine(cursor) {\n    // find end of cursor's line\n    var endOffset = cursor;\n    while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n      endOffset++;\n    }\n    return endOffset;\n  }\n\n  /**\n   * Obtains the next token.\n   * @returns {string|null} Next token or `null` on eof\n   * @inner\n   */\n  function next() {\n    if (stack.length > 0) return stack.shift();\n    if (stringDelim) return readString();\n    var repeat,\n      prev,\n      curr,\n      start,\n      isDoc,\n      isLeadingComment = offset === 0;\n    do {\n      if (offset === length) return null;\n      repeat = false;\n      while (whitespaceRe.test(curr = charAt(offset))) {\n        if (curr === \"\\n\") {\n          isLeadingComment = true;\n          ++line;\n        }\n        if (++offset === length) return null;\n      }\n      if (charAt(offset) === \"/\") {\n        if (++offset === length) {\n          throw illegal(\"comment\");\n        }\n        if (charAt(offset) === \"/\") {\n          // Line\n          if (!alternateCommentMode) {\n            // check for triple-slash comment\n            isDoc = charAt(start = offset + 1) === \"/\";\n            while (charAt(++offset) !== \"\\n\") {\n              if (offset === length) {\n                return null;\n              }\n            }\n            ++offset;\n            if (isDoc) {\n              setComment(start, offset - 1, isLeadingComment);\n              // Trailing comment cannot not be multi-line,\n              // so leading comment state should be reset to handle potential next comments\n              isLeadingComment = true;\n            }\n            ++line;\n            repeat = true;\n          } else {\n            // check for double-slash comments, consolidating consecutive lines\n            start = offset;\n            isDoc = false;\n            if (isDoubleSlashCommentLine(offset - 1)) {\n              isDoc = true;\n              do {\n                offset = findEndOfLine(offset);\n                if (offset === length) {\n                  break;\n                }\n                offset++;\n                if (!isLeadingComment) {\n                  // Trailing comment cannot not be multi-line\n                  break;\n                }\n              } while (isDoubleSlashCommentLine(offset));\n            } else {\n              offset = Math.min(length, findEndOfLine(offset) + 1);\n            }\n            if (isDoc) {\n              setComment(start, offset, isLeadingComment);\n              isLeadingComment = true;\n            }\n            line++;\n            repeat = true;\n          }\n        } else if ((curr = charAt(offset)) === \"*\") {\n          /* Block */\n          // check for /** (regular comment mode) or /* (alternate comment mode)\n          start = offset + 1;\n          isDoc = alternateCommentMode || charAt(start) === \"*\";\n          do {\n            if (curr === \"\\n\") {\n              ++line;\n            }\n            if (++offset === length) {\n              throw illegal(\"comment\");\n            }\n            prev = curr;\n            curr = charAt(offset);\n          } while (prev !== \"*\" || curr !== \"/\");\n          ++offset;\n          if (isDoc) {\n            setComment(start, offset - 2, isLeadingComment);\n            isLeadingComment = true;\n          }\n          repeat = true;\n        } else {\n          return \"/\";\n        }\n      }\n    } while (repeat);\n\n    // offset !== length if we got here\n\n    var end = offset;\n    delimRe.lastIndex = 0;\n    var delim = delimRe.test(charAt(end++));\n    if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;\n    var token = source.substring(offset, offset = end);\n    if (token === \"\\\"\" || token === \"'\") stringDelim = token;\n    return token;\n  }\n\n  /**\n   * Pushes a token back to the stack.\n   * @param {string} token Token\n   * @returns {undefined}\n   * @inner\n   */\n  function push(token) {\n    stack.push(token);\n  }\n\n  /**\n   * Peeks for the next token.\n   * @returns {string|null} Token or `null` on eof\n   * @inner\n   */\n  function peek() {\n    if (!stack.length) {\n      var token = next();\n      if (token === null) return null;\n      push(token);\n    }\n    return stack[0];\n  }\n\n  /**\n   * Skips a token.\n   * @param {string} expected Expected token\n   * @param {boolean} [optional=false] Whether the token is optional\n   * @returns {boolean} `true` when skipped, `false` if not\n   * @throws {Error} When a required token is not present\n   * @inner\n   */\n  function skip(expected, optional) {\n    var actual = peek(),\n      equals = actual === expected;\n    if (equals) {\n      next();\n      return true;\n    }\n    if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n    return false;\n  }\n\n  /**\n   * Gets a comment.\n   * @param {number} [trailingLine] Line number if looking for a trailing comment\n   * @returns {string|null} Comment text\n   * @inner\n   */\n  function cmnt(trailingLine) {\n    var ret = null;\n    var comment;\n    if (trailingLine === undefined) {\n      comment = comments[line - 1];\n      delete comments[line - 1];\n      if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n        ret = comment.leading ? comment.text : null;\n      }\n    } else {\n      /* istanbul ignore else */\n      if (lastCommentLine < trailingLine) {\n        peek();\n      }\n      comment = comments[trailingLine];\n      delete comments[trailingLine];\n      if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n        ret = comment.leading ? null : comment.text;\n      }\n    }\n    return ret;\n  }\n  return Object.defineProperty({\n    next: next,\n    peek: peek,\n    push: push,\n    skip: skip,\n    cmnt: cmnt\n  }, \"line\", {\n    get: function () {\n      return line;\n    }\n  });\n  /* eslint-enable callback-return */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/tokenize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/type.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/type.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"),\n  Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\"),\n  Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\"),\n  Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\"),\n  Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\"),\n  Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"),\n  encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/protobufjs/src/encoder.js\"),\n  decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/protobufjs/src/decoder.js\"),\n  verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/protobufjs/src/verifier.js\"),\n  converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/protobufjs/src/converter.js\"),\n  wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/protobufjs/src/wrappers.js\");\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Message fields.\n   * @type {Object.<string,Field>}\n   */\n  this.fields = {}; // toJSON, marker\n\n  /**\n   * Oneofs declared within this namespace, if any.\n   * @type {Object.<string,OneOf>}\n   */\n  this.oneofs = undefined; // toJSON\n\n  /**\n   * Extension ranges, if any.\n   * @type {number[][]}\n   */\n  this.extensions = undefined; // toJSON\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n  this.reserved = undefined; // toJSON\n\n  /*?\n   * Whether this type is a legacy group.\n   * @type {boolean|undefined}\n   */\n  this.group = undefined; // toJSON\n\n  /**\n   * Cached fields by id.\n   * @type {Object.<number,Field>|null}\n   * @private\n   */\n  this._fieldsById = null;\n\n  /**\n   * Cached fields as an array.\n   * @type {Field[]|null}\n   * @private\n   */\n  this._fieldsArray = null;\n\n  /**\n   * Cached oneofs as an array.\n   * @type {OneOf[]|null}\n   * @private\n   */\n  this._oneofsArray = null;\n\n  /**\n   * Cached constructor.\n   * @type {Constructor<{}>}\n   * @private\n   */\n  this._ctor = null;\n}\nObject.defineProperties(Type.prototype, {\n  /**\n   * Message fields by id.\n   * @name Type#fieldsById\n   * @type {Object.<number,Field>}\n   * @readonly\n   */\n  fieldsById: {\n    get: function () {\n      /* istanbul ignore if */\n      if (this._fieldsById) return this._fieldsById;\n      this._fieldsById = {};\n      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n        var field = this.fields[names[i]],\n          id = field.id;\n\n        /* istanbul ignore if */\n        if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this._fieldsById[id] = field;\n      }\n      return this._fieldsById;\n    }\n  },\n  /**\n   * Fields of this message as an array for iteration.\n   * @name Type#fieldsArray\n   * @type {Field[]}\n   * @readonly\n   */\n  fieldsArray: {\n    get: function () {\n      return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n    }\n  },\n  /**\n   * Oneofs of this message as an array for iteration.\n   * @name Type#oneofsArray\n   * @type {OneOf[]}\n   * @readonly\n   */\n  oneofsArray: {\n    get: function () {\n      return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n    }\n  },\n  /**\n   * The registered constructor, if any registered, otherwise a generic constructor.\n   * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n   * @name Type#ctor\n   * @type {Constructor<{}>}\n   */\n  ctor: {\n    get: function () {\n      return this._ctor || (this.ctor = Type.generateConstructor(this)());\n    },\n    set: function (ctor) {\n      // Ensure proper prototype\n      var prototype = ctor.prototype;\n      if (!(prototype instanceof Message)) {\n        (ctor.prototype = new Message()).constructor = ctor;\n        util.merge(ctor.prototype, prototype);\n      }\n\n      // Classes and messages reference their reflected type\n      ctor.$type = ctor.prototype.$type = this;\n\n      // Mix in static methods\n      util.merge(ctor, Message, true);\n      this._ctor = ctor;\n\n      // Messages have non-enumerable default values on their prototype\n      var i = 0;\n      for (; i < /* initializes */this.fieldsArray.length; ++i) this._fieldsArray[i].resolve(); // ensures a proper value\n\n      // Messages have non-enumerable getters and setters for each virtual oneof field\n      var ctorProperties = {};\n      for (i = 0; i < /* initializes */this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {\n        get: util.oneOfGetter(this._oneofsArray[i].oneof),\n        set: util.oneOfSetter(this._oneofsArray[i].oneof)\n      };\n      if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n    }\n  }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"p\"], mtype.name);\n  // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n  for (var i = 0, field; i < mtype.fieldsArray.length; ++i) if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n  return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n  (\"this[ks[i]]=p[ks[i]]\");\n  /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n  type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n  delete type.encode;\n  delete type.decode;\n  delete type.verify;\n  return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n  var type = new Type(name, json.options);\n  type.extensions = json.extensions;\n  type.reserved = json.reserved;\n  var names = Object.keys(json.fields),\n    i = 0;\n  for (; i < names.length; ++i) type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n  if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n  if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n    var nested = json.nested[names[i]];\n    type.add(\n    // most to least likely\n    (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n  }\n  if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n  if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n  if (json.group) type.group = true;\n  if (json.comment) type.comment = json.comment;\n  return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"oneofs\", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), \"fields\", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {\n    return !obj.declaringField;\n  }), toJSONOptions) || {}, \"extensions\", this.extensions && this.extensions.length ? this.extensions : undefined, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"group\", this.group || undefined, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n  var fields = this.fieldsArray,\n    i = 0;\n  while (i < fields.length) fields[i++].resolve();\n  var oneofs = this.oneofsArray;\n  i = 0;\n  while (i < oneofs.length) oneofs[i++].resolve();\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n  return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Field && object.extend === undefined) {\n    // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n    // The root object takes care of adding distinct sister-fields to the respective extended\n    // type instead.\n\n    // avoids calling the getter if not absolutely necessary because it's called quite frequently\n    if (this._fieldsById ? /* istanbul ignore next */this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n    if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n    if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n    if (object.parent) object.parent.remove(object);\n    this.fields[object.name] = object;\n    object.message = this;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    if (!this.oneofs) this.oneofs = {};\n    this.oneofs[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n  if (object instanceof Field && object.extend === undefined) {\n    // See Type#add for the reason why extension fields are excluded here.\n\n    /* istanbul ignore if */\n    if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.fields[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    /* istanbul ignore if */\n    if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.oneofs[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n  return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n  // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n  // multiple times (V8, soft-deopt prototype-check).\n\n  var fullName = this.fullName,\n    types = [];\n  for (var i = 0; i < /* initializes */this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType);\n\n  // Replace setup methods with type-specific generated functions\n  this.encode = encoder(this)({\n    Writer: Writer,\n    types: types,\n    util: util\n  });\n  this.decode = decoder(this)({\n    Reader: Reader,\n    types: types,\n    util: util\n  });\n  this.verify = verifier(this)({\n    types: types,\n    util: util\n  });\n  this.fromObject = converter.fromObject(this)({\n    types: types,\n    util: util\n  });\n  this.toObject = converter.toObject(this)({\n    types: types,\n    util: util\n  });\n\n  // Inject custom wrappers for common types\n  var wrapper = wrappers[fullName];\n  if (wrapper) {\n    var originalThis = Object.create(this);\n    // if (wrapper.fromObject) {\n    originalThis.fromObject = this.fromObject;\n    this.fromObject = wrapper.fromObject.bind(originalThis);\n    // }\n    // if (wrapper.toObject) {\n    originalThis.toObject = this.toObject;\n    this.toObject = wrapper.toObject.bind(originalThis);\n    // }\n  }\n\n  return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n  return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n  return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n  if (!(reader instanceof Reader)) reader = Reader.create(reader);\n  return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n  return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n  return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n  return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n  return function typeDecorator(target) {\n    util.decorateType(target, typeName);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/types.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/types.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar s = [\"double\",\n// 0\n\"float\",\n// 1\n\"int32\",\n// 2\n\"uint32\",\n// 3\n\"sint32\",\n// 4\n\"fixed32\",\n// 5\n\"sfixed32\",\n// 6\n\"int64\",\n// 7\n\"uint64\",\n// 8\n\"sint64\",\n// 9\n\"fixed64\",\n// 10\n\"sfixed64\",\n// 11\n\"bool\",\n// 12\n\"string\",\n// 13\n\"bytes\" // 14\n];\n\nfunction bake(values, offset) {\n  var i = 0,\n    o = {};\n  offset |= 0;\n  while (i < values.length) o[s[i + offset]] = values[i++];\n  return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2, /* bytes    */2]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([/* double   */0, /* float    */0, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */0, /* sfixed32 */0, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */0, /* sfixed64 */0, /* bool     */false, /* string   */\"\", /* bytes    */util.emptyArray, /* message  */null]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([/* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([/* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU87QUFFbkIsSUFBSUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFRLENBQUM7QUFFNUIsSUFBSUMsQ0FBQyxHQUFHLENBQ0osUUFBUTtBQUFJO0FBQ1osT0FBTztBQUFLO0FBQ1osT0FBTztBQUFLO0FBQ1osUUFBUTtBQUFJO0FBQ1osUUFBUTtBQUFJO0FBQ1osU0FBUztBQUFHO0FBQ1osVUFBVTtBQUFFO0FBQ1osT0FBTztBQUFLO0FBQ1osUUFBUTtBQUFJO0FBQ1osUUFBUTtBQUFJO0FBQ1osU0FBUztBQUFHO0FBQ1osVUFBVTtBQUFFO0FBQ1osTUFBTTtBQUFNO0FBQ1osUUFBUTtBQUFJO0FBQ1osT0FBTyxDQUFLO0FBQUEsQ0FDZjs7QUFFRCxTQUFTQyxJQUFJQSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtFQUMxQixJQUFJQyxDQUFDLEdBQUcsQ0FBQztJQUFFQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ2pCRixNQUFNLElBQUksQ0FBQztFQUNYLE9BQU9DLENBQUMsR0FBR0YsTUFBTSxDQUFDSSxNQUFNLEVBQUVELENBQUMsQ0FBQ0wsQ0FBQyxDQUFDSSxDQUFDLEdBQUdELE1BQU0sQ0FBQyxDQUFDLEdBQUdELE1BQU0sQ0FBQ0UsQ0FBQyxFQUFFLENBQUM7RUFDeEQsT0FBT0MsQ0FBQztBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVQsS0FBSyxDQUFDVyxLQUFLLEdBQUdOLElBQUksQ0FBQyxDQUNmLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLENBQ25CLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FMLEtBQUssQ0FBQ1ksUUFBUSxHQUFHUCxJQUFJLENBQUMsQ0FDbEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxLQUFLLEVBQ3BCLGNBQWUsRUFBRSxFQUNqQixjQUFlSCxJQUFJLENBQUNXLFVBQVUsRUFDOUIsY0FBZSxJQUFJLENBQ3RCLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWIsS0FBSyxDQUFDYyxJQUFJLEdBQUdULElBQUksQ0FBQyxDQUNkLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsQ0FDbkIsRUFBRSxDQUFDLENBQUM7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBTCxLQUFLLENBQUNlLE1BQU0sR0FBR1YsSUFBSSxDQUFDLENBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLENBQ25CLEVBQUUsQ0FBQyxDQUFDOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBTCxLQUFLLENBQUNnQixNQUFNLEdBQUdYLElBQUksQ0FBQyxDQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsRUFDaEIsY0FBZSxDQUFDLEVBQ2hCLGNBQWUsQ0FBQyxFQUNoQixjQUFlLENBQUMsQ0FDbkIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRiYWJlLW5leHRqcy1taWdyYXRpb24vLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdHlwZXMuanM/OTZhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb21tb24gdHlwZSBjb25zdGFudHMuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbnZhciB0eXBlcyA9IGV4cG9ydHM7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIHMgPSBbXG4gICAgXCJkb3VibGVcIiwgICAvLyAwXG4gICAgXCJmbG9hdFwiLCAgICAvLyAxXG4gICAgXCJpbnQzMlwiLCAgICAvLyAyXG4gICAgXCJ1aW50MzJcIiwgICAvLyAzXG4gICAgXCJzaW50MzJcIiwgICAvLyA0XG4gICAgXCJmaXhlZDMyXCIsICAvLyA1XG4gICAgXCJzZml4ZWQzMlwiLCAvLyA2XG4gICAgXCJpbnQ2NFwiLCAgICAvLyA3XG4gICAgXCJ1aW50NjRcIiwgICAvLyA4XG4gICAgXCJzaW50NjRcIiwgICAvLyA5XG4gICAgXCJmaXhlZDY0XCIsICAvLyAxMFxuICAgIFwic2ZpeGVkNjRcIiwgLy8gMTFcbiAgICBcImJvb2xcIiwgICAgIC8vIDEyXG4gICAgXCJzdHJpbmdcIiwgICAvLyAxM1xuICAgIFwiYnl0ZXNcIiAgICAgLy8gMTRcbl07XG5cbmZ1bmN0aW9uIGJha2UodmFsdWVzLCBvZmZzZXQpIHtcbiAgICB2YXIgaSA9IDAsIG8gPSB7fTtcbiAgICBvZmZzZXQgfD0gMDtcbiAgICB3aGlsZSAoaSA8IHZhbHVlcy5sZW5ndGgpIG9bc1tpICsgb2Zmc2V0XV0gPSB2YWx1ZXNbaSsrXTtcbiAgICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBCYXNpYyB0eXBlIHdpcmUgdHlwZXMuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn1cbiAqIEBjb25zdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRvdWJsZT0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZmxvYXQ9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvb2w9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3RyaW5nPTIgTGRlbGltIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJ5dGVzPTIgTGRlbGltIHdpcmUgdHlwZVxuICovXG50eXBlcy5iYXNpYyA9IGJha2UoW1xuICAgIC8qIGRvdWJsZSAgICovIDEsXG4gICAgLyogZmxvYXQgICAgKi8gNSxcbiAgICAvKiBpbnQzMiAgICAqLyAwLFxuICAgIC8qIHVpbnQzMiAgICovIDAsXG4gICAgLyogc2ludDMyICAgKi8gMCxcbiAgICAvKiBmaXhlZDMyICAqLyA1LFxuICAgIC8qIHNmaXhlZDMyICovIDUsXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMSxcbiAgICAvKiBzZml4ZWQ2NCAqLyAxLFxuICAgIC8qIGJvb2wgICAgICovIDAsXG4gICAgLyogc3RyaW5nICAgKi8gMixcbiAgICAvKiBieXRlcyAgICAqLyAyXG5dKTtcblxuLyoqXG4gKiBCYXNpYyB0eXBlIGRlZmF1bHRzLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxuICogQGNvbnN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZG91YmxlPTAgRG91YmxlIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmbG9hdD0wIEZsb2F0IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQzMj0wIEludDMyIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50MzI9MCBVaW50MzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFNpbnQzMiBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj0wIEZpeGVkMzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDMyPTAgU2ZpeGVkMzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgSW50NjQgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFVpbnQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgU2ludDMyIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTAgRml4ZWQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MCBTZml4ZWQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGJvb2w9ZmFsc2UgQm9vbCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RyaW5nPVwiXCIgU3RyaW5nIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj59IGJ5dGVzPUFycmF5KDApIEJ5dGVzIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVsbH0gbWVzc2FnZT1udWxsIE1lc3NhZ2UgZGVmYXVsdFxuICovXG50eXBlcy5kZWZhdWx0cyA9IGJha2UoW1xuICAgIC8qIGRvdWJsZSAgICovIDAsXG4gICAgLyogZmxvYXQgICAgKi8gMCxcbiAgICAvKiBpbnQzMiAgICAqLyAwLFxuICAgIC8qIHVpbnQzMiAgICovIDAsXG4gICAgLyogc2ludDMyICAgKi8gMCxcbiAgICAvKiBmaXhlZDMyICAqLyAwLFxuICAgIC8qIHNmaXhlZDMyICovIDAsXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMCxcbiAgICAvKiBzZml4ZWQ2NCAqLyAwLFxuICAgIC8qIGJvb2wgICAgICovIGZhbHNlLFxuICAgIC8qIHN0cmluZyAgICovIFwiXCIsXG4gICAgLyogYnl0ZXMgICAgKi8gdXRpbC5lbXB0eUFycmF5LFxuICAgIC8qIG1lc3NhZ2UgICovIG51bGxcbl0pO1xuXG4vKipcbiAqIEJhc2ljIGxvbmcgdHlwZSB3aXJlIHR5cGVzLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLG51bWJlcj59XG4gKiBAY29uc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqL1xudHlwZXMubG9uZyA9IGJha2UoW1xuICAgIC8qIGludDY0ICAgICovIDAsXG4gICAgLyogdWludDY0ICAgKi8gMCxcbiAgICAvKiBzaW50NjQgICAqLyAwLFxuICAgIC8qIGZpeGVkNjQgICovIDEsXG4gICAgLyogc2ZpeGVkNjQgKi8gMVxuXSwgNyk7XG5cbi8qKlxuICogQWxsb3dlZCB0eXBlcyBmb3IgbWFwIGtleXMgd2l0aCB0aGVpciBhc3NvY2lhdGVkIHdpcmUgdHlwZS5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxuICogQGNvbnN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDMyPTUgRml4ZWQzMiB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm9vbD0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdHJpbmc9MiBMZGVsaW0gd2lyZSB0eXBlXG4gKi9cbnR5cGVzLm1hcEtleSA9IGJha2UoW1xuICAgIC8qIGludDMyICAgICovIDAsXG4gICAgLyogdWludDMyICAgKi8gMCxcbiAgICAvKiBzaW50MzIgICAqLyAwLFxuICAgIC8qIGZpeGVkMzIgICovIDUsXG4gICAgLyogc2ZpeGVkMzIgKi8gNSxcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxuICAgIC8qIHVpbnQ2NCAgICovIDAsXG4gICAgLyogc2ludDY0ICAgKi8gMCxcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxuICAgIC8qIHNmaXhlZDY0ICovIDEsXG4gICAgLyogYm9vbCAgICAgKi8gMCxcbiAgICAvKiBzdHJpbmcgICAqLyAyXG5dLCAyKTtcblxuLyoqXG4gKiBBbGxvd2VkIHR5cGVzIGZvciBwYWNrZWQgcmVwZWF0ZWQgZmllbGRzIHdpdGggdGhlaXIgYXNzb2NpYXRlZCB3aXJlIHR5cGUuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn1cbiAqIEBjb25zdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRvdWJsZT0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZmxvYXQ9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvb2w9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKi9cbnR5cGVzLnBhY2tlZCA9IGJha2UoW1xuICAgIC8qIGRvdWJsZSAgICovIDEsXG4gICAgLyogZmxvYXQgICAgKi8gNSxcbiAgICAvKiBpbnQzMiAgICAqLyAwLFxuICAgIC8qIHVpbnQzMiAgICovIDAsXG4gICAgLyogc2ludDMyICAgKi8gMCxcbiAgICAvKiBmaXhlZDMyICAqLyA1LFxuICAgIC8qIHNmaXhlZDMyICovIDUsXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMSxcbiAgICAvKiBzZml4ZWQ2NCAqLyAxLFxuICAgIC8qIGJvb2wgICAgICovIDBcbl0pO1xuIl0sIm5hbWVzIjpbInR5cGVzIiwiZXhwb3J0cyIsInV0aWwiLCJyZXF1aXJlIiwicyIsImJha2UiLCJ2YWx1ZXMiLCJvZmZzZXQiLCJpIiwibyIsImxlbmd0aCIsImJhc2ljIiwiZGVmYXVsdHMiLCJlbXB0eUFycmF5IiwibG9uZyIsIm1hcEtleSIsInBhY2tlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/protobufjs/src/roots.js\");\nvar Type,\n  // cyclic\n  Enum;\nutil.codegen = __webpack_require__(/*! @protobufjs/codegen */ \"(ssr)/./node_modules/@protobufjs/codegen/index.js\");\nutil.fetch = __webpack_require__(/*! @protobufjs/fetch */ \"(ssr)/./node_modules/@protobufjs/fetch/index.js\");\nutil.path = __webpack_require__(/*! @protobufjs/path */ \"(ssr)/./node_modules/@protobufjs/path/index.js\");\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n  if (object) {\n    var keys = Object.keys(object),\n      array = new Array(keys.length),\n      index = 0;\n    while (index < keys.length) array[index] = object[keys[index++]];\n    return array;\n  }\n  return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n  var object = {},\n    index = 0;\n  while (index < array.length) {\n    var key = array[index++],\n      val = array[index++];\n    if (val !== undefined) object[key] = val;\n  }\n  return object;\n};\nvar safePropBackslashRe = /\\\\/g,\n  safePropQuoteRe = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n  return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n  if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop)) return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n  return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n  return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function ($0, $1) {\n    return $1.toUpperCase();\n  });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n  return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n  /* istanbul ignore if */\n  if (ctor.$type) {\n    if (typeName && ctor.$type.name !== typeName) {\n      util.decorateRoot.remove(ctor.$type);\n      ctor.$type.name = typeName;\n      util.decorateRoot.add(ctor.$type);\n    }\n    return ctor.$type;\n  }\n\n  /* istanbul ignore next */\n  if (!Type) Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\");\n  var type = new Type(typeName || ctor.name);\n  util.decorateRoot.add(type);\n  type.ctor = ctor; // sets up .encode, .decode etc.\n  Object.defineProperty(ctor, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  Object.defineProperty(ctor.prototype, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  return type;\n};\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n  /* istanbul ignore if */\n  if (object.$type) return object.$type;\n\n  /* istanbul ignore next */\n  if (!Enum) Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\");\n  var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n  util.decorateRoot.add(enm);\n  Object.defineProperty(object, \"$type\", {\n    value: enm,\n    enumerable: false\n  });\n  return enm;\n};\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n  function setProp(dst, path, value) {\n    var part = path.shift();\n    if (part === \"__proto__\" || part === \"prototype\") {\n      return dst;\n    }\n    if (path.length > 0) {\n      dst[part] = setProp(dst[part] || {}, path, value);\n    } else {\n      var prevValue = dst[part];\n      if (prevValue) value = [].concat(prevValue).concat(value);\n      dst[part] = value;\n    }\n    return dst;\n  }\n  if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n  if (!path) throw TypeError(\"path must be specified\");\n  path = path.split(\".\");\n  return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n  get: function () {\n    return roots[\"decorated\"] || (roots[\"decorated\"] = new (__webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\"))());\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = LongBits;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n  // note that the casts below are theoretically unnecessary as of today, but older statically\n  // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n  /**\n   * Low bits.\n   * @type {number}\n   */\n  this.lo = lo >>> 0;\n\n  /**\n   * High bits.\n   * @type {number}\n   */\n  this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function () {\n  return 0;\n};\nzero.zzEncode = zero.zzDecode = function () {\n  return this;\n};\nzero.length = function () {\n  return 1;\n};\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n  if (value === 0) return zero;\n  var sign = value < 0;\n  if (sign) value = -value;\n  var lo = value >>> 0,\n    hi = (value - lo) / 4294967296 >>> 0;\n  if (sign) {\n    hi = ~hi >>> 0;\n    lo = ~lo >>> 0;\n    if (++lo > 4294967295) {\n      lo = 0;\n      if (++hi > 4294967295) hi = 0;\n    }\n  }\n  return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n  if (typeof value === \"number\") return LongBits.fromNumber(value);\n  if (util.isString(value)) {\n    /* istanbul ignore else */\n    if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n  }\n  return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n  if (!unsigned && this.hi >>> 31) {\n    var lo = ~this.lo + 1 >>> 0,\n      hi = ~this.hi >>> 0;\n    if (!lo) hi = hi + 1 >>> 0;\n    return -(lo + hi * 4294967296);\n  }\n  return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n  return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n  /* istanbul ignore next */ : {\n    low: this.lo | 0,\n    high: this.hi | 0,\n    unsigned: Boolean(unsigned)\n  };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n  if (hash === zeroHash) return zero;\n  return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n  var mask = this.hi >> 31;\n  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n  this.lo = (this.lo << 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n  var mask = -(this.lo & 1);\n  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n  this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n  var part0 = this.lo,\n    part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n    part2 = this.hi >>> 24;\n  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9sb25nYml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFFBQVE7QUFFekIsSUFBSUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDRFQUFpQixDQUFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0YsUUFBUUEsQ0FBQ0csRUFBRSxFQUFFQyxFQUFFLEVBQUU7RUFFdEI7RUFDQTs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtFQUNJLElBQUksQ0FBQ0QsRUFBRSxHQUFHQSxFQUFFLEtBQUssQ0FBQzs7RUFFbEI7QUFDSjtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNDLEVBQUUsR0FBR0EsRUFBRSxLQUFLLENBQUM7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLElBQUksR0FBR0wsUUFBUSxDQUFDSyxJQUFJLEdBQUcsSUFBSUwsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFN0NLLElBQUksQ0FBQ0MsUUFBUSxHQUFHLFlBQVc7RUFBRSxPQUFPLENBQUM7QUFBRSxDQUFDO0FBQ3hDRCxJQUFJLENBQUNFLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxRQUFRLEdBQUcsWUFBVztFQUFFLE9BQU8sSUFBSTtBQUFFLENBQUM7QUFDM0RILElBQUksQ0FBQ0ksTUFBTSxHQUFHLFlBQVc7RUFBRSxPQUFPLENBQUM7QUFBRSxDQUFDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsUUFBUSxHQUFHVixRQUFRLENBQUNVLFFBQVEsR0FBRyxrQkFBa0I7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVYsUUFBUSxDQUFDVyxVQUFVLEdBQUcsU0FBU0EsVUFBVUEsQ0FBQ0MsS0FBSyxFQUFFO0VBQzdDLElBQUlBLEtBQUssS0FBSyxDQUFDLEVBQ1gsT0FBT1AsSUFBSTtFQUNmLElBQUlRLElBQUksR0FBR0QsS0FBSyxHQUFHLENBQUM7RUFDcEIsSUFBSUMsSUFBSSxFQUNKRCxLQUFLLEdBQUcsQ0FBQ0EsS0FBSztFQUNsQixJQUFJVCxFQUFFLEdBQUdTLEtBQUssS0FBSyxDQUFDO0lBQ2hCUixFQUFFLEdBQUcsQ0FBQ1EsS0FBSyxHQUFHVCxFQUFFLElBQUksVUFBVSxLQUFLLENBQUM7RUFDeEMsSUFBSVUsSUFBSSxFQUFFO0lBQ05ULEVBQUUsR0FBRyxDQUFDQSxFQUFFLEtBQUssQ0FBQztJQUNkRCxFQUFFLEdBQUcsQ0FBQ0EsRUFBRSxLQUFLLENBQUM7SUFDZCxJQUFJLEVBQUVBLEVBQUUsR0FBRyxVQUFVLEVBQUU7TUFDbkJBLEVBQUUsR0FBRyxDQUFDO01BQ04sSUFBSSxFQUFFQyxFQUFFLEdBQUcsVUFBVSxFQUNqQkEsRUFBRSxHQUFHLENBQUM7SUFDZDtFQUNKO0VBQ0EsT0FBTyxJQUFJSixRQUFRLENBQUNHLEVBQUUsRUFBRUMsRUFBRSxDQUFDO0FBQy9CLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSixRQUFRLENBQUNjLElBQUksR0FBRyxTQUFTQSxJQUFJQSxDQUFDRixLQUFLLEVBQUU7RUFDakMsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUN6QixPQUFPWixRQUFRLENBQUNXLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDO0VBQ3JDLElBQUlYLElBQUksQ0FBQ2MsUUFBUSxDQUFDSCxLQUFLLENBQUMsRUFBRTtJQUN0QjtJQUNBLElBQUlYLElBQUksQ0FBQ2UsSUFBSSxFQUNUSixLQUFLLEdBQUdYLElBQUksQ0FBQ2UsSUFBSSxDQUFDQyxVQUFVLENBQUNMLEtBQUssQ0FBQyxDQUFDLEtBRXBDLE9BQU9aLFFBQVEsQ0FBQ1csVUFBVSxDQUFDTyxRQUFRLENBQUNOLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztFQUN2RDtFQUNBLE9BQU9BLEtBQUssQ0FBQ08sR0FBRyxJQUFJUCxLQUFLLENBQUNRLElBQUksR0FBRyxJQUFJcEIsUUFBUSxDQUFDWSxLQUFLLENBQUNPLEdBQUcsS0FBSyxDQUFDLEVBQUVQLEtBQUssQ0FBQ1EsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHZixJQUFJO0FBQzNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBTCxRQUFRLENBQUNxQixTQUFTLENBQUNmLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFDZ0IsUUFBUSxFQUFFO0VBQ3RELElBQUksQ0FBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQ2xCLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDN0IsSUFBSUQsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDQSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUM7TUFDdkJDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQ0EsRUFBRSxLQUFTLENBQUM7SUFDM0IsSUFBSSxDQUFDRCxFQUFFLEVBQ0hDLEVBQUUsR0FBR0EsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3JCLE9BQU8sRUFBRUQsRUFBRSxHQUFHQyxFQUFFLEdBQUcsVUFBVSxDQUFDO0VBQ2xDO0VBQ0EsT0FBTyxJQUFJLENBQUNELEVBQUUsR0FBRyxJQUFJLENBQUNDLEVBQUUsR0FBRyxVQUFVO0FBQ3pDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSixRQUFRLENBQUNxQixTQUFTLENBQUNFLE1BQU0sR0FBRyxTQUFTQSxNQUFNQSxDQUFDRCxRQUFRLEVBQUU7RUFDbEQsT0FBT3JCLElBQUksQ0FBQ2UsSUFBSSxHQUNWLElBQUlmLElBQUksQ0FBQ2UsSUFBSSxDQUFDLElBQUksQ0FBQ2IsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEVBQUVvQixPQUFPLENBQUNGLFFBQVEsQ0FBQztFQUMzRCw2QkFDRTtJQUFFSCxHQUFHLEVBQUUsSUFBSSxDQUFDaEIsRUFBRSxHQUFHLENBQUM7SUFBRWlCLElBQUksRUFBRSxJQUFJLENBQUNoQixFQUFFLEdBQUcsQ0FBQztJQUFFa0IsUUFBUSxFQUFFRSxPQUFPLENBQUNGLFFBQVE7RUFBRSxDQUFDO0FBQzlFLENBQUM7QUFFRCxJQUFJRyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0wsU0FBUyxDQUFDSSxVQUFVOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0F6QixRQUFRLENBQUMyQixRQUFRLEdBQUcsU0FBU0EsUUFBUUEsQ0FBQ0MsSUFBSSxFQUFFO0VBQ3hDLElBQUlBLElBQUksS0FBS2xCLFFBQVEsRUFDakIsT0FBT0wsSUFBSTtFQUNmLE9BQU8sSUFBSUwsUUFBUSxDQUNmLENBQUV5QixVQUFVLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUN4QkgsVUFBVSxDQUFDSSxJQUFJLENBQUNELElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQzdCSCxVQUFVLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FDOUJILFVBQVUsQ0FBQ0ksSUFBSSxDQUFDRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFFdkMsQ0FBRUgsVUFBVSxDQUFDSSxJQUFJLENBQUNELElBQUksRUFBRSxDQUFDLENBQUMsR0FDeEJILFVBQVUsQ0FBQ0ksSUFBSSxDQUFDRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUM3QkgsVUFBVSxDQUFDSSxJQUFJLENBQUNELElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQzlCSCxVQUFVLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUMxQyxDQUFDO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBNUIsUUFBUSxDQUFDcUIsU0FBUyxDQUFDUyxNQUFNLEdBQUcsU0FBU0EsTUFBTUEsQ0FBQSxFQUFHO0VBQzFDLE9BQU9KLE1BQU0sQ0FBQ0ssWUFBWSxDQUN0QixJQUFJLENBQUM1QixFQUFFLEdBQVUsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxDQUFDLEdBQUksR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUFFLEVBQ2QsSUFBSSxDQUFDQyxFQUFFLEdBQVUsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxDQUFDLEdBQUksR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUNoQixDQUFDO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBSixRQUFRLENBQUNxQixTQUFTLENBQUNkLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFBLEVBQUc7RUFDOUMsSUFBSXlCLElBQUksR0FBSyxJQUFJLENBQUM1QixFQUFFLElBQUksRUFBRTtFQUMxQixJQUFJLENBQUNBLEVBQUUsR0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDQSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQ0QsRUFBRSxLQUFLLEVBQUUsSUFBSTZCLElBQUksTUFBTSxDQUFDO0VBQ3pELElBQUksQ0FBQzdCLEVBQUUsR0FBSSxDQUFFLElBQUksQ0FBQ0EsRUFBRSxJQUFJLENBQUMsR0FBcUI2QixJQUFJLE1BQU0sQ0FBQztFQUN6RCxPQUFPLElBQUk7QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0FoQyxRQUFRLENBQUNxQixTQUFTLENBQUNiLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFBLEVBQUc7RUFDOUMsSUFBSXdCLElBQUksR0FBRyxFQUFFLElBQUksQ0FBQzdCLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDekIsSUFBSSxDQUFDQSxFQUFFLEdBQUksQ0FBQyxDQUFDLElBQUksQ0FBQ0EsRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUNDLEVBQUUsSUFBSSxFQUFFLElBQUk0QixJQUFJLE1BQU0sQ0FBQztFQUN6RCxJQUFJLENBQUM1QixFQUFFLEdBQUksQ0FBRSxJQUFJLENBQUNBLEVBQUUsS0FBSyxDQUFDLEdBQW9CNEIsSUFBSSxNQUFNLENBQUM7RUFDekQsT0FBTyxJQUFJO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBaEMsUUFBUSxDQUFDcUIsU0FBUyxDQUFDWixNQUFNLEdBQUcsU0FBU0EsTUFBTUEsQ0FBQSxFQUFHO0VBQzFDLElBQUl3QixLQUFLLEdBQUksSUFBSSxDQUFDOUIsRUFBRTtJQUNoQitCLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQy9CLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0MrQixLQUFLLEdBQUksSUFBSSxDQUFDL0IsRUFBRSxLQUFLLEVBQUU7RUFDM0IsT0FBTytCLEtBQUssS0FBSyxDQUFDLEdBQ1hELEtBQUssS0FBSyxDQUFDLEdBQ1RELEtBQUssR0FBRyxLQUFLLEdBQ1hBLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDbkJBLEtBQUssR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDekJDLEtBQUssR0FBRyxLQUFLLEdBQ1hBLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDbkJBLEtBQUssR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDM0JDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDL0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRiYWJlLW5leHRqcy1taWdyYXRpb24vLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9sb25nYml0cy5qcz9hNTZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBMb25nQml0cztcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cy5cbiAqIEBjbGFzc2Rlc2MgSGVscGVyIGNsYXNzIGZvciB3b3JraW5nIHdpdGggdGhlIGxvdyBhbmQgaGlnaCBiaXRzIG9mIGEgNjQgYml0IHZhbHVlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGxvIExvdyAzMiBiaXRzLCB1bnNpZ25lZFxuICogQHBhcmFtIHtudW1iZXJ9IGhpIEhpZ2ggMzIgYml0cywgdW5zaWduZWRcbiAqL1xuZnVuY3Rpb24gTG9uZ0JpdHMobG8sIGhpKSB7XG5cbiAgICAvLyBub3RlIHRoYXQgdGhlIGNhc3RzIGJlbG93IGFyZSB0aGVvcmV0aWNhbGx5IHVubmVjZXNzYXJ5IGFzIG9mIHRvZGF5LCBidXQgb2xkZXIgc3RhdGljYWxseVxuICAgIC8vIGdlbmVyYXRlZCBjb252ZXJ0ZXIgY29kZSBtaWdodCBzdGlsbCBjYWxsIHRoZSBjdG9yIHdpdGggc2lnbmVkIDMyYml0cy4ga2VwdCBmb3IgY29tcGF0LlxuXG4gICAgLyoqXG4gICAgICogTG93IGJpdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxvID0gbG8gPj4+IDA7XG5cbiAgICAvKipcbiAgICAgKiBIaWdoIGJpdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmhpID0gaGkgPj4+IDA7XG59XG5cbi8qKlxuICogWmVybyBiaXRzLlxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcbiAqIEB0eXBlIHt1dGlsLkxvbmdCaXRzfVxuICovXG52YXIgemVybyA9IExvbmdCaXRzLnplcm8gPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XG5cbnplcm8udG9OdW1iZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG56ZXJvLnp6RW5jb2RlID0gemVyby56ekRlY29kZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcbnplcm8ubGVuZ3RoID0gZnVuY3Rpb24oKSB7IHJldHVybiAxOyB9O1xuXG4vKipcbiAqIFplcm8gaGFzaC5cbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG52YXIgemVyb0hhc2ggPSBMb25nQml0cy56ZXJvSGFzaCA9IFwiXFwwXFwwXFwwXFwwXFwwXFwwXFwwXFwwXCI7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWVcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxuICovXG5Mb25nQml0cy5mcm9tTnVtYmVyID0gZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDA7XG4gICAgaWYgKHNpZ24pXG4gICAgICAgIHZhbHVlID0gLXZhbHVlO1xuICAgIHZhciBsbyA9IHZhbHVlID4+PiAwLFxuICAgICAgICBoaSA9ICh2YWx1ZSAtIGxvKSAvIDQyOTQ5NjcyOTYgPj4+IDA7XG4gICAgaWYgKHNpZ24pIHtcbiAgICAgICAgaGkgPSB+aGkgPj4+IDA7XG4gICAgICAgIGxvID0gfmxvID4+PiAwO1xuICAgICAgICBpZiAoKytsbyA+IDQyOTQ5NjcyOTUpIHtcbiAgICAgICAgICAgIGxvID0gMDtcbiAgICAgICAgICAgIGlmICgrK2hpID4gNDI5NDk2NzI5NSlcbiAgICAgICAgICAgICAgICBoaSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhsbywgaGkpO1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSBhIG51bWJlciwgbG9uZyBvciBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWVcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxuICovXG5Mb25nQml0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBMb25nQml0cy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKHV0aWwuTG9uZylcbiAgICAgICAgICAgIHZhbHVlID0gdXRpbC5Mb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcihwYXJzZUludCh2YWx1ZSwgMTApKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLmxvdyB8fCB2YWx1ZS5oaWdoID8gbmV3IExvbmdCaXRzKHZhbHVlLmxvdyA+Pj4gMCwgdmFsdWUuaGlnaCA+Pj4gMCkgOiB6ZXJvO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIHBvc3NpYmx5IHVuc2FmZSBKYXZhU2NyaXB0IG51bWJlci5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge251bWJlcn0gUG9zc2libHkgdW5zYWZlIG51bWJlclxuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlcih1bnNpZ25lZCkge1xuICAgIGlmICghdW5zaWduZWQgJiYgdGhpcy5oaSA+Pj4gMzEpIHtcbiAgICAgICAgdmFyIGxvID0gfnRoaXMubG8gKyAxID4+PiAwLFxuICAgICAgICAgICAgaGkgPSB+dGhpcy5oaSAgICAgPj4+IDA7XG4gICAgICAgIGlmICghbG8pXG4gICAgICAgICAgICBoaSA9IGhpICsgMSA+Pj4gMDtcbiAgICAgICAgcmV0dXJuIC0obG8gKyBoaSAqIDQyOTQ5NjcyOTYpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sbyArIHRoaXMuaGkgKiA0Mjk0OTY3Mjk2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIGxvbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtMb25nfSBMb25nXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b0xvbmcgPSBmdW5jdGlvbiB0b0xvbmcodW5zaWduZWQpIHtcbiAgICByZXR1cm4gdXRpbC5Mb25nXG4gICAgICAgID8gbmV3IHV0aWwuTG9uZyh0aGlzLmxvIHwgMCwgdGhpcy5oaSB8IDAsIEJvb2xlYW4odW5zaWduZWQpKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IHsgbG93OiB0aGlzLmxvIHwgMCwgaGlnaDogdGhpcy5oaSB8IDAsIHVuc2lnbmVkOiBCb29sZWFuKHVuc2lnbmVkKSB9O1xufTtcblxudmFyIGNoYXJDb2RlQXQgPSBTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQ7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggSGFzaFxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEJpdHNcbiAqL1xuTG9uZ0JpdHMuZnJvbUhhc2ggPSBmdW5jdGlvbiBmcm9tSGFzaChoYXNoKSB7XG4gICAgaWYgKGhhc2ggPT09IHplcm9IYXNoKVxuICAgICAgICByZXR1cm4gemVybztcbiAgICByZXR1cm4gbmV3IExvbmdCaXRzKFxuICAgICAgICAoIGNoYXJDb2RlQXQuY2FsbChoYXNoLCAwKVxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAxKSA8PCA4XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDIpIDw8IDE2XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDMpIDw8IDI0KSA+Pj4gMFxuICAgICxcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNClcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNSkgPDwgOFxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA2KSA8PCAxNlxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA3KSA8PCAyNCkgPj4+IDBcbiAgICApO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIDggY2hhcmFjdGVycyBsb25nIGhhc2guXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b0hhc2ggPSBmdW5jdGlvbiB0b0hhc2goKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgIHRoaXMubG8gICAgICAgICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiA4ICAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gMTYgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDI0ICAgICAgLFxuICAgICAgICB0aGlzLmhpICAgICAgICAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gOCAgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDE2ICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiAyNFxuICAgICk7XG59O1xuXG4vKipcbiAqIFppZy16YWcgZW5jb2RlcyB0aGlzIGxvbmcgYml0cy5cbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnp6RW5jb2RlID0gZnVuY3Rpb24genpFbmNvZGUoKSB7XG4gICAgdmFyIG1hc2sgPSAgIHRoaXMuaGkgPj4gMzE7XG4gICAgdGhpcy5oaSAgPSAoKHRoaXMuaGkgPDwgMSB8IHRoaXMubG8gPj4+IDMxKSBeIG1hc2spID4+PiAwO1xuICAgIHRoaXMubG8gID0gKCB0aGlzLmxvIDw8IDEgICAgICAgICAgICAgICAgICAgXiBtYXNrKSA+Pj4gMDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogWmlnLXphZyBkZWNvZGVzIHRoaXMgbG9uZyBiaXRzLlxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IGB0aGlzYFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUuenpEZWNvZGUgPSBmdW5jdGlvbiB6ekRlY29kZSgpIHtcbiAgICB2YXIgbWFzayA9IC0odGhpcy5sbyAmIDEpO1xuICAgIHRoaXMubG8gID0gKCh0aGlzLmxvID4+PiAxIHwgdGhpcy5oaSA8PCAzMSkgXiBtYXNrKSA+Pj4gMDtcbiAgICB0aGlzLmhpICA9ICggdGhpcy5oaSA+Pj4gMSAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGlzIGxvbmdiaXRzIHdoZW4gZW5jb2RlZCBhcyBhIHZhcmludC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IExlbmd0aFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgIHZhciBwYXJ0MCA9ICB0aGlzLmxvLFxuICAgICAgICBwYXJ0MSA9ICh0aGlzLmxvID4+PiAyOCB8IHRoaXMuaGkgPDwgNCkgPj4+IDAsXG4gICAgICAgIHBhcnQyID0gIHRoaXMuaGkgPj4+IDI0O1xuICAgIHJldHVybiBwYXJ0MiA9PT0gMFxuICAgICAgICAgPyBwYXJ0MSA9PT0gMFxuICAgICAgICAgICA/IHBhcnQwIDwgMTYzODRcbiAgICAgICAgICAgICA/IHBhcnQwIDwgMTI4ID8gMSA6IDJcbiAgICAgICAgICAgICA6IHBhcnQwIDwgMjA5NzE1MiA/IDMgOiA0XG4gICAgICAgICAgIDogcGFydDEgPCAxNjM4NFxuICAgICAgICAgICAgID8gcGFydDEgPCAxMjggPyA1IDogNlxuICAgICAgICAgICAgIDogcGFydDEgPCAyMDk3MTUyID8gNyA6IDhcbiAgICAgICAgIDogcGFydDIgPCAxMjggPyA5IDogMTA7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJMb25nQml0cyIsInV0aWwiLCJyZXF1aXJlIiwibG8iLCJoaSIsInplcm8iLCJ0b051bWJlciIsInp6RW5jb2RlIiwienpEZWNvZGUiLCJsZW5ndGgiLCJ6ZXJvSGFzaCIsImZyb21OdW1iZXIiLCJ2YWx1ZSIsInNpZ24iLCJmcm9tIiwiaXNTdHJpbmciLCJMb25nIiwiZnJvbVN0cmluZyIsInBhcnNlSW50IiwibG93IiwiaGlnaCIsInByb3RvdHlwZSIsInVuc2lnbmVkIiwidG9Mb25nIiwiQm9vbGVhbiIsImNoYXJDb2RlQXQiLCJTdHJpbmciLCJmcm9tSGFzaCIsImhhc2giLCJjYWxsIiwidG9IYXNoIiwiZnJvbUNoYXJDb2RlIiwibWFzayIsInBhcnQwIiwicGFydDEiLCJwYXJ0MiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(ssr)/./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"(ssr)/./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"(ssr)/./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"(ssr)/./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(ssr)/./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"(ssr)/./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"(ssr)/./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"(ssr)/./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\" && global && global.process && global.process.versions && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global ||  false && 0 || typeof self !== \"undefined\" && self || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n  return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n  return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n  var value = obj[prop];\n  if (value != null && obj.hasOwnProperty(prop))\n    // eslint-disable-line eqeqeq, no-prototype-builtins\n    return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n  return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = function () {\n  try {\n    var Buffer = util.inquire(\"buffer\").Buffer;\n    // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n    return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n  } catch (e) {\n    /* istanbul ignore next */\n    return null;\n  }\n}();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n  /* istanbul ignore next */\n  return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n  return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n  var bits = util.LongBits.fromHash(hash);\n  if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n  return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) {\n  // used by converters\n  for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n  return dst;\n}\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n  return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n  function CustomError(message, properties) {\n    if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n    // Error.call(this, message);\n    // ^ just returns a new error instance because the ctor can be called as a function\n\n    Object.defineProperty(this, \"message\", {\n      get: function () {\n        return message;\n      }\n    });\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace)\n      // node\n      Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n      value: new Error().stack || \"\"\n    });\n    if (properties) merge(this, properties);\n  }\n  CustomError.prototype = Object.create(Error.prototype, {\n    constructor: {\n      value: CustomError,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    name: {\n      get: function get() {\n        return name;\n      },\n      set: undefined,\n      enumerable: false,\n      // configurable: false would accurately preserve the behavior of\n      // the original, but I'm guessing that was not intentional.\n      // For an actual error subclass, this property would\n      // be configurable.\n      configurable: true\n    },\n    toString: {\n      value: function value() {\n        return this.name + \": \" + this.message;\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  });\n  return CustomError;\n}\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n  var fieldMap = {};\n  for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n  /**\n   * @returns {string|undefined} Set field name, if any\n   * @this Object\n   * @ignore\n   */\n  return function () {\n    // eslint-disable-line consistent-return\n    for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n  };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n  /**\n   * @param {string} name Field name\n   * @returns {undefined}\n   * @this Object\n   * @ignore\n   */\n  return function (name) {\n    for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n  };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function () {\n  var Buffer = util.Buffer;\n  /* istanbul ignore if */\n  if (!Buffer) {\n    util._Buffer_from = util._Buffer_allocUnsafe = null;\n    return;\n  }\n  // because node 4.x buffers are incompatible & immutable\n  // see: https://github.com/dcodeIO/protobuf.js/pull/665\n  util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n  function Buffer_from(value, encoding) {\n    return new Buffer(value, encoding);\n  };\n  util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n  function Buffer_allocUnsafe(size) {\n    return new Buffer(size);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9taW5pbWFsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQUlBLElBQUksR0FBR0MsT0FBTzs7QUFFbEI7QUFDQUQsSUFBSSxDQUFDRSxTQUFTLEdBQUdDLG1CQUFPLENBQUMsa0ZBQXVCLENBQUM7O0FBRWpEO0FBQ0FILElBQUksQ0FBQ0ksTUFBTSxHQUFHRCxtQkFBTyxDQUFDLDRFQUFvQixDQUFDOztBQUUzQztBQUNBSCxJQUFJLENBQUNLLFlBQVksR0FBR0YsbUJBQU8sQ0FBQyx3RkFBMEIsQ0FBQzs7QUFFdkQ7QUFDQUgsSUFBSSxDQUFDTSxLQUFLLEdBQUdILG1CQUFPLENBQUMsMEVBQW1CLENBQUM7O0FBRXpDO0FBQ0FILElBQUksQ0FBQ08sT0FBTyxHQUFHSixtQkFBTyxDQUFDLDhFQUFxQixDQUFDOztBQUU3QztBQUNBSCxJQUFJLENBQUNRLElBQUksR0FBR0wsbUJBQU8sQ0FBQyx3RUFBa0IsQ0FBQzs7QUFFdkM7QUFDQUgsSUFBSSxDQUFDUyxJQUFJLEdBQUdOLG1CQUFPLENBQUMsd0VBQWtCLENBQUM7O0FBRXZDO0FBQ0FILElBQUksQ0FBQ1UsUUFBUSxHQUFHUCxtQkFBTyxDQUFDLHdFQUFZLENBQUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUgsSUFBSSxDQUFDVyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxPQUFPQyxNQUFNLEtBQUssV0FBVyxJQUM3QkEsTUFBTSxJQUNOQSxNQUFNLENBQUNDLE9BQU8sSUFDZEQsTUFBTSxDQUFDQyxPQUFPLENBQUNDLFFBQVEsSUFDdkJGLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQzs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBaEIsSUFBSSxDQUFDYSxNQUFNLEdBQUdiLElBQUksQ0FBQ1csTUFBTSxJQUFJRSxNQUFNLElBQ3JCLFVBQWlDSSxDQUFNLElBQ3ZDLE9BQU9DLElBQUksS0FBTyxXQUFXLElBQUlBLElBQUksSUFDckMsSUFBSSxDQUFDLENBQUM7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBbEIsSUFBSSxDQUFDbUIsVUFBVSxHQUFHQyxNQUFNLENBQUNDLE1BQU0sR0FBR0QsTUFBTSxDQUFDQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsMEJBQTJCLEVBQUUsQ0FBQyxDQUFDOztBQUVyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FyQixJQUFJLENBQUNzQixXQUFXLEdBQUdGLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHRCxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLDBCQUEyQixDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUV0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXJCLElBQUksQ0FBQ3VCLFNBQVMsR0FBR0MsTUFBTSxDQUFDRCxTQUFTLElBQUksMEJBQTJCLFNBQVNBLFNBQVNBLENBQUNFLEtBQUssRUFBRTtFQUN0RixPQUFPLE9BQU9BLEtBQUssS0FBSyxRQUFRLElBQUlDLFFBQVEsQ0FBQ0QsS0FBSyxDQUFDLElBQUlFLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxLQUFLLENBQUMsS0FBS0EsS0FBSztBQUN0RixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXpCLElBQUksQ0FBQzZCLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFDSixLQUFLLEVBQUU7RUFDckMsT0FBTyxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJQSxLQUFLLFlBQVlLLE1BQU07QUFDL0QsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E5QixJQUFJLENBQUMrQixRQUFRLEdBQUcsU0FBU0EsUUFBUUEsQ0FBQ04sS0FBSyxFQUFFO0VBQ3JDLE9BQU9BLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUTtBQUM3QyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXpCLElBQUksQ0FBQ2dDLEtBQUs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWhDLElBQUksQ0FBQ2lDLEtBQUssR0FBRyxTQUFTQSxLQUFLQSxDQUFDQyxHQUFHLEVBQUVDLElBQUksRUFBRTtFQUNuQyxJQUFJVixLQUFLLEdBQUdTLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDO0VBQ3JCLElBQUlWLEtBQUssSUFBSSxJQUFJLElBQUlTLEdBQUcsQ0FBQ0UsY0FBYyxDQUFDRCxJQUFJLENBQUM7SUFBRTtJQUMzQyxPQUFPLE9BQU9WLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQ1ksS0FBSyxDQUFDQyxPQUFPLENBQUNiLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUNjLE1BQU0sR0FBR25CLE1BQU0sQ0FBQ29CLElBQUksQ0FBQ2YsS0FBSyxDQUFDLENBQUNjLE1BQU0sSUFBSSxDQUFDO0VBQzdHLE9BQU8sS0FBSztBQUNoQixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBdkMsSUFBSSxDQUFDeUMsTUFBTSxHQUFJLFlBQVc7RUFDdEIsSUFBSTtJQUNBLElBQUlBLE1BQU0sR0FBR3pDLElBQUksQ0FBQ08sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDa0MsTUFBTTtJQUMxQztJQUNBLE9BQU9BLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEdBQUdGLE1BQU0sR0FBRywwQkFBMkIsSUFBSTtFQUNoRixDQUFDLENBQUMsT0FBT0csQ0FBQyxFQUFFO0lBQ1I7SUFDQSxPQUFPLElBQUk7RUFDZjtBQUNKLENBQUMsQ0FBRSxDQUFDOztBQUVKO0FBQ0E1QyxJQUFJLENBQUM2QyxZQUFZLEdBQUcsSUFBSTs7QUFFeEI7QUFDQTdDLElBQUksQ0FBQzhDLG1CQUFtQixHQUFHLElBQUk7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTlDLElBQUksQ0FBQytDLFNBQVMsR0FBRyxTQUFTQSxTQUFTQSxDQUFDQyxXQUFXLEVBQUU7RUFDN0M7RUFDQSxPQUFPLE9BQU9BLFdBQVcsS0FBSyxRQUFRLEdBQ2hDaEQsSUFBSSxDQUFDeUMsTUFBTSxHQUNQekMsSUFBSSxDQUFDOEMsbUJBQW1CLENBQUNFLFdBQVcsQ0FBQyxHQUNyQyxJQUFJaEQsSUFBSSxDQUFDcUMsS0FBSyxDQUFDVyxXQUFXLENBQUMsR0FDL0JoRCxJQUFJLENBQUN5QyxNQUFNLEdBQ1B6QyxJQUFJLENBQUM2QyxZQUFZLENBQUNHLFdBQVcsQ0FBQyxHQUM5QixPQUFPQyxVQUFVLEtBQUssV0FBVyxHQUM3QkQsV0FBVyxHQUNYLElBQUlDLFVBQVUsQ0FBQ0QsV0FBVyxDQUFDO0FBQzdDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQWhELElBQUksQ0FBQ3FDLEtBQUssR0FBRyxPQUFPWSxVQUFVLEtBQUssV0FBVyxHQUFHQSxVQUFVLENBQUMsNkJBQTZCWixLQUFLOztBQUU5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FyQyxJQUFJLENBQUNrRCxJQUFJLEdBQUcsMEJBQTJCbEQsSUFBSSxDQUFDYSxNQUFNLENBQUNzQyxPQUFPLElBQUksMEJBQTJCbkQsSUFBSSxDQUFDYSxNQUFNLENBQUNzQyxPQUFPLENBQUNELElBQUksSUFDckcsMEJBQTJCbEQsSUFBSSxDQUFDYSxNQUFNLENBQUNxQyxJQUFJLElBQzNDbEQsSUFBSSxDQUFDTyxPQUFPLENBQUMsTUFBTSxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FQLElBQUksQ0FBQ29ELE1BQU0sR0FBRyxrQkFBa0I7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXBELElBQUksQ0FBQ3FELE9BQU8sR0FBRyx1QkFBdUI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXJELElBQUksQ0FBQ3NELE9BQU8sR0FBRyw0Q0FBNEM7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXRELElBQUksQ0FBQ3VELFVBQVUsR0FBRyxTQUFTQSxVQUFVQSxDQUFDOUIsS0FBSyxFQUFFO0VBQ3pDLE9BQU9BLEtBQUssR0FDTnpCLElBQUksQ0FBQ1UsUUFBUSxDQUFDOEMsSUFBSSxDQUFDL0IsS0FBSyxDQUFDLENBQUNnQyxNQUFNLENBQUMsQ0FBQyxHQUNsQ3pELElBQUksQ0FBQ1UsUUFBUSxDQUFDZ0QsUUFBUTtBQUNoQyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBMUQsSUFBSSxDQUFDMkQsWUFBWSxHQUFHLFNBQVNBLFlBQVlBLENBQUNDLElBQUksRUFBRUMsUUFBUSxFQUFFO0VBQ3RELElBQUlDLElBQUksR0FBRzlELElBQUksQ0FBQ1UsUUFBUSxDQUFDcUQsUUFBUSxDQUFDSCxJQUFJLENBQUM7RUFDdkMsSUFBSTVELElBQUksQ0FBQ2tELElBQUksRUFDVCxPQUFPbEQsSUFBSSxDQUFDa0QsSUFBSSxDQUFDYyxRQUFRLENBQUNGLElBQUksQ0FBQ0csRUFBRSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsRUFBRUwsUUFBUSxDQUFDO0VBQ3pELE9BQU9DLElBQUksQ0FBQ0ssUUFBUSxDQUFDdkQsT0FBTyxDQUFDaUQsUUFBUSxDQUFDLENBQUM7QUFDM0MsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sS0FBS0EsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtFQUFFO0VBQ2pDLEtBQUssSUFBSS9CLElBQUksR0FBR3BCLE1BQU0sQ0FBQ29CLElBQUksQ0FBQzhCLEdBQUcsQ0FBQyxFQUFFRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdoQyxJQUFJLENBQUNELE1BQU0sRUFBRSxFQUFFaUMsQ0FBQyxFQUN6RCxJQUFJSCxHQUFHLENBQUM3QixJQUFJLENBQUNnQyxDQUFDLENBQUMsQ0FBQyxLQUFLQyxTQUFTLElBQUksQ0FBQ0YsUUFBUSxFQUN2Q0YsR0FBRyxDQUFDN0IsSUFBSSxDQUFDZ0MsQ0FBQyxDQUFDLENBQUMsR0FBR0YsR0FBRyxDQUFDOUIsSUFBSSxDQUFDZ0MsQ0FBQyxDQUFDLENBQUM7RUFDbkMsT0FBT0gsR0FBRztBQUNkO0FBRUFyRSxJQUFJLENBQUNvRSxLQUFLLEdBQUdBLEtBQUs7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXBFLElBQUksQ0FBQzBFLE9BQU8sR0FBRyxTQUFTQSxPQUFPQSxDQUFDQyxHQUFHLEVBQUU7RUFDakMsT0FBT0EsR0FBRyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLEdBQUdGLEdBQUcsQ0FBQ0csU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFFBQVFBLENBQUNDLElBQUksRUFBRTtFQUVwQixTQUFTQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUVDLFVBQVUsRUFBRTtJQUV0QyxJQUFJLEVBQUUsSUFBSSxZQUFZRixXQUFXLENBQUMsRUFDOUIsT0FBTyxJQUFJQSxXQUFXLENBQUNDLE9BQU8sRUFBRUMsVUFBVSxDQUFDOztJQUUvQztJQUNBOztJQUVBL0QsTUFBTSxDQUFDZ0UsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7TUFBRUMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBVztRQUFFLE9BQU9ILE9BQU87TUFBRTtJQUFFLENBQUMsQ0FBQzs7SUFFL0U7SUFDQSxJQUFJSSxLQUFLLENBQUNDLGlCQUFpQjtNQUFFO01BQ3pCRCxLQUFLLENBQUNDLGlCQUFpQixDQUFDLElBQUksRUFBRU4sV0FBVyxDQUFDLENBQUMsS0FFM0M3RCxNQUFNLENBQUNnRSxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtNQUFFM0QsS0FBSyxFQUFFLElBQUk2RCxLQUFLLENBQUMsQ0FBQyxDQUFDRSxLQUFLLElBQUk7SUFBRyxDQUFDLENBQUM7SUFFNUUsSUFBSUwsVUFBVSxFQUNWZixLQUFLLENBQUMsSUFBSSxFQUFFZSxVQUFVLENBQUM7RUFDL0I7RUFFQUYsV0FBVyxDQUFDdkMsU0FBUyxHQUFHdEIsTUFBTSxDQUFDcUUsTUFBTSxDQUFDSCxLQUFLLENBQUM1QyxTQUFTLEVBQUU7SUFDbkRnRCxXQUFXLEVBQUU7TUFDVGpFLEtBQUssRUFBRXdELFdBQVc7TUFDbEJVLFFBQVEsRUFBRSxJQUFJO01BQ2RDLFVBQVUsRUFBRSxLQUFLO01BQ2pCQyxZQUFZLEVBQUU7SUFDbEIsQ0FBQztJQUNEYixJQUFJLEVBQUU7TUFDRkssR0FBRyxFQUFFLFNBQVNBLEdBQUdBLENBQUEsRUFBRztRQUFFLE9BQU9MLElBQUk7TUFBRSxDQUFDO01BQ3BDYyxHQUFHLEVBQUVyQixTQUFTO01BQ2RtQixVQUFVLEVBQUUsS0FBSztNQUNqQjtNQUNBO01BQ0E7TUFDQTtNQUNBQyxZQUFZLEVBQUU7SUFDbEIsQ0FBQztJQUNERSxRQUFRLEVBQUU7TUFDTnRFLEtBQUssRUFBRSxTQUFTQSxLQUFLQSxDQUFBLEVBQUc7UUFBRSxPQUFPLElBQUksQ0FBQ3VELElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDRSxPQUFPO01BQUUsQ0FBQztNQUNuRVMsUUFBUSxFQUFFLElBQUk7TUFDZEMsVUFBVSxFQUFFLEtBQUs7TUFDakJDLFlBQVksRUFBRTtJQUNsQjtFQUNKLENBQUMsQ0FBQztFQUVGLE9BQU9aLFdBQVc7QUFDdEI7QUFFQWpGLElBQUksQ0FBQytFLFFBQVEsR0FBR0EsUUFBUTs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBL0UsSUFBSSxDQUFDZ0csYUFBYSxHQUFHakIsUUFBUSxDQUFDLGVBQWUsQ0FBQzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBL0UsSUFBSSxDQUFDaUcsV0FBVyxHQUFHLFNBQVNDLFFBQVFBLENBQUNDLFVBQVUsRUFBRTtFQUM3QyxJQUFJQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0VBQ2pCLEtBQUssSUFBSTVCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzJCLFVBQVUsQ0FBQzVELE1BQU0sRUFBRSxFQUFFaUMsQ0FBQyxFQUN0QzRCLFFBQVEsQ0FBQ0QsVUFBVSxDQUFDM0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDOztFQUUvQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksT0FBTyxZQUFXO0lBQUU7SUFDaEIsS0FBSyxJQUFJaEMsSUFBSSxHQUFHcEIsTUFBTSxDQUFDb0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFZ0MsQ0FBQyxHQUFHaEMsSUFBSSxDQUFDRCxNQUFNLEdBQUcsQ0FBQyxFQUFFaUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsRUFDL0QsSUFBSTRCLFFBQVEsQ0FBQzVELElBQUksQ0FBQ2dDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQ2hDLElBQUksQ0FBQ2dDLENBQUMsQ0FBQyxDQUFDLEtBQUtDLFNBQVMsSUFBSSxJQUFJLENBQUNqQyxJQUFJLENBQUNnQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFDaEYsT0FBT2hDLElBQUksQ0FBQ2dDLENBQUMsQ0FBQztFQUMxQixDQUFDO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0F4RSxJQUFJLENBQUNxRyxXQUFXLEdBQUcsU0FBU0MsUUFBUUEsQ0FBQ0gsVUFBVSxFQUFFO0VBRTdDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJLE9BQU8sVUFBU25CLElBQUksRUFBRTtJQUNsQixLQUFLLElBQUlSLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzJCLFVBQVUsQ0FBQzVELE1BQU0sRUFBRSxFQUFFaUMsQ0FBQyxFQUN0QyxJQUFJMkIsVUFBVSxDQUFDM0IsQ0FBQyxDQUFDLEtBQUtRLElBQUksRUFDdEIsT0FBTyxJQUFJLENBQUNtQixVQUFVLENBQUMzQixDQUFDLENBQUMsQ0FBQztFQUN0QyxDQUFDO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBeEUsSUFBSSxDQUFDdUcsYUFBYSxHQUFHO0VBQ2pCQyxLQUFLLEVBQUUxRSxNQUFNO0VBQ2IyRSxLQUFLLEVBQUUzRSxNQUFNO0VBQ2I0RSxLQUFLLEVBQUU1RSxNQUFNO0VBQ2I2RSxJQUFJLEVBQUU7QUFDVixDQUFDOztBQUVEO0FBQ0EzRyxJQUFJLENBQUM0RyxVQUFVLEdBQUcsWUFBVztFQUN6QixJQUFJbkUsTUFBTSxHQUFHekMsSUFBSSxDQUFDeUMsTUFBTTtFQUN4QjtFQUNBLElBQUksQ0FBQ0EsTUFBTSxFQUFFO0lBQ1R6QyxJQUFJLENBQUM2QyxZQUFZLEdBQUc3QyxJQUFJLENBQUM4QyxtQkFBbUIsR0FBRyxJQUFJO0lBQ25EO0VBQ0o7RUFDQTtFQUNBO0VBQ0E5QyxJQUFJLENBQUM2QyxZQUFZLEdBQUdKLE1BQU0sQ0FBQ2UsSUFBSSxLQUFLUCxVQUFVLENBQUNPLElBQUksSUFBSWYsTUFBTSxDQUFDZSxJQUFJLElBQzlEO0VBQ0EsU0FBU3FELFdBQVdBLENBQUNwRixLQUFLLEVBQUVxRixRQUFRLEVBQUU7SUFDbEMsT0FBTyxJQUFJckUsTUFBTSxDQUFDaEIsS0FBSyxFQUFFcUYsUUFBUSxDQUFDO0VBQ3RDLENBQUM7RUFDTDlHLElBQUksQ0FBQzhDLG1CQUFtQixHQUFHTCxNQUFNLENBQUNzRSxXQUFXLElBQ3pDO0VBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDQyxJQUFJLEVBQUU7SUFDOUIsT0FBTyxJQUFJeEUsTUFBTSxDQUFDd0UsSUFBSSxDQUFDO0VBQzNCLENBQUM7QUFDVCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL21pbmltYWwuanM/ZmUxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gZXhwb3J0cztcblxuLy8gdXNlZCB0byByZXR1cm4gYSBQcm9taXNlIHdoZXJlIGNhbGxiYWNrIGlzIG9taXR0ZWRcbnV0aWwuYXNQcm9taXNlID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2FzcHJvbWlzZVwiKTtcblxuLy8gY29udmVydHMgdG8gLyBmcm9tIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwuYmFzZTY0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Jhc2U2NFwiKTtcblxuLy8gYmFzZSBjbGFzcyBvZiBycGMuU2VydmljZVxudXRpbC5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyXCIpO1xuXG4vLyBmbG9hdCBoYW5kbGluZyBhY2Nyb3NzIGJyb3dzZXJzXG51dGlsLmZsb2F0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Zsb2F0XCIpO1xuXG4vLyByZXF1aXJlcyBtb2R1bGVzIG9wdGlvbmFsbHkgYW5kIGhpZGVzIHRoZSBjYWxsIGZyb20gYnVuZGxlcnNcbnV0aWwuaW5xdWlyZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9pbnF1aXJlXCIpO1xuXG4vLyBjb252ZXJ0cyB0byAvIGZyb20gdXRmOCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwudXRmOCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy91dGY4XCIpO1xuXG4vLyBwcm92aWRlcyBhIG5vZGUtbGlrZSBidWZmZXIgcG9vbCBpbiB0aGUgYnJvd3NlclxudXRpbC5wb29sID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL3Bvb2xcIik7XG5cbi8vIHV0aWxpdHkgdG8gd29yayB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZVxudXRpbC5Mb25nQml0cyA9IHJlcXVpcmUoXCIuL2xvbmdiaXRzXCIpO1xuXG4vKipcbiAqIFdoZXRoZXIgcnVubmluZyB3aXRoaW4gbm9kZSBvciBub3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbnV0aWwuaXNOb2RlID0gQm9vbGVhbih0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsLnByb2Nlc3NcbiAgICAgICAgICAgICAgICAgICAmJiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uc1xuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbC5wcm9jZXNzLnZlcnNpb25zLm5vZGUpO1xuXG4vKipcbiAqIEdsb2JhbCBvYmplY3QgcmVmZXJlbmNlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnV0aWwuZ2xvYmFsID0gdXRpbC5pc05vZGUgJiYgZ2xvYmFsXG4gICAgICAgICAgIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XG4gICAgICAgICAgIHx8IHR5cGVvZiBzZWxmICAgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZlxuICAgICAgICAgICB8fCB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4vKipcbiAqIEFuIGltbXVhYmxlIGVtcHR5IGFycmF5LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtBcnJheS48Kj59XG4gKiBAY29uc3RcbiAqL1xudXRpbC5lbXB0eUFycmF5ID0gT2JqZWN0LmZyZWV6ZSA/IE9iamVjdC5mcmVlemUoW10pIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gW107IC8vIHVzZWQgb24gcHJvdG90eXBlc1xuXG4vKipcbiAqIEFuIGltbXV0YWJsZSBlbXB0eSBvYmplY3QuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGNvbnN0XG4gKi9cbnV0aWwuZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplID8gT2JqZWN0LmZyZWV6ZSh7fSkgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7fTsgLy8gdXNlZCBvbiBwcm90b3R5cGVzXG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIGludGVnZXJcbiAqL1xudXRpbC5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIHN0cmluZy5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBzdHJpbmdcbiAqL1xudXRpbC5pc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG5vbi1udWxsIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBub24tbnVsbCBvYmplY3RcbiAqL1xudXRpbC5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIHV0aWwuaXNTZXR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc3NldCA9XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogUGxhaW4gb2JqZWN0IG9yIG1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgY29uc2lkZXJlZCB0byBiZSBwcmVzZW50LCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG51dGlsLmlzU2V0ID0gZnVuY3Rpb24gaXNTZXQob2JqLCBwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEsIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpID4gMDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgYSBtaW5pbWFsIHN0YW5kLWFsb25lIGRlZmluaXRpb24gb2YgYSBCdWZmZXIgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IG5vZGUncyB0eXBpbmdzLlxuICogQGludGVyZmFjZSBCdWZmZXJcbiAqIEBleHRlbmRzIFVpbnQ4QXJyYXlcbiAqL1xuXG4vKipcbiAqIE5vZGUncyBCdWZmZXIgY2xhc3MgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge0NvbnN0cnVjdG9yPEJ1ZmZlcj59XG4gKi9cbnV0aWwuQnVmZmVyID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBCdWZmZXIgPSB1dGlsLmlucXVpcmUoXCJidWZmZXJcIikuQnVmZmVyO1xuICAgICAgICAvLyByZWZ1c2UgdG8gdXNlIG5vbi1ub2RlIGJ1ZmZlcnMgaWYgbm90IGV4cGxpY2l0bHkgYXNzaWduZWQgKHBlcmYgcmVhc29ucyk6XG4gICAgICAgIHJldHVybiBCdWZmZXIucHJvdG90eXBlLnV0ZjhXcml0ZSA/IEJ1ZmZlciA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59KSgpO1xuXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZnVsbCBmb3IgQnVmZmVyLmZyb20uXG51dGlsLl9CdWZmZXJfZnJvbSA9IG51bGw7XG5cbi8vIEludGVybmFsIGFsaWFzIG9mIG9yIHBvbHlmaWxsIGZvciBCdWZmZXIuYWxsb2NVbnNhZmUuXG51dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYnVmZmVyIG9mIHdoYXRldmVyIHR5cGUgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfG51bWJlcltdfSBbc2l6ZU9yQXJyYXk9MF0gQnVmZmVyIHNpemUgb3IgbnVtYmVyIGFycmF5XG4gKiBAcmV0dXJucyB7VWludDhBcnJheXxCdWZmZXJ9IEJ1ZmZlclxuICovXG51dGlsLm5ld0J1ZmZlciA9IGZ1bmN0aW9uIG5ld0J1ZmZlcihzaXplT3JBcnJheSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHR5cGVvZiBzaXplT3JBcnJheSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IHV0aWwuQnVmZmVyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZShzaXplT3JBcnJheSlcbiAgICAgICAgICAgIDogbmV3IHV0aWwuQXJyYXkoc2l6ZU9yQXJyYXkpXG4gICAgICAgIDogdXRpbC5CdWZmZXJcbiAgICAgICAgICAgID8gdXRpbC5fQnVmZmVyX2Zyb20oc2l6ZU9yQXJyYXkpXG4gICAgICAgICAgICA6IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBzaXplT3JBcnJheVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoc2l6ZU9yQXJyYXkpO1xufTtcblxuLyoqXG4gKiBBcnJheSBpbXBsZW1lbnRhdGlvbiB1c2VkIGluIHRoZSBicm93c2VyLiBgVWludDhBcnJheWAgaWYgc3VwcG9ydGVkLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxVaW50OEFycmF5Pn1cbiAqL1xudXRpbC5BcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gVWludDhBcnJheSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA6IEFycmF5O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIExvbmcgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIGEgbWluaW1hbCBzdGFuZC1hbG9uZSBkZWZpbml0aW9uIG9mIGEgTG9uZyBpbnN0YW5jZS4gVGhlIGFjdHVhbCB0eXBlIGlzIHRoYXQgZXhwb3J0ZWQgYnkgbG9uZy5qcy5cbiAqIEBpbnRlcmZhY2UgTG9uZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvdyBMb3cgYml0c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGhpZ2ggSGlnaCBiaXRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKi9cblxuLyoqXG4gKiBMb25nLmpzJ3MgTG9uZyBjbGFzcyBpZiBhdmFpbGFibGUuXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8TG9uZz59XG4gKi9cbnV0aWwuTG9uZyA9IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8gJiYgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuZGNvZGVJTy5Mb25nXG4gICAgICAgICB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLmdsb2JhbC5Mb25nXG4gICAgICAgICB8fCB1dGlsLmlucXVpcmUoXCJsb25nXCIpO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSAyIGJpdCAoYGJvb2xgKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkyUmUgPSAvXnRydWV8ZmFsc2V8MHwxJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDMyIGJpdCAoYGludDMyYCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkzMlJlID0gL14tPyg/OjB8WzEtOV1bMC05XSopJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDY0IGJpdCAoYGludDY0YCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXk2NFJlID0gL14oPzpbXFxcXHgwMC1cXFxceGZmXXs4fXwtPyg/OjB8WzEtOV1bMC05XSopKSQvO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIG9yIGxvbmcgdG8gYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbnV0aWwubG9uZ1RvSGFzaCA9IGZ1bmN0aW9uIGxvbmdUb0hhc2godmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyB1dGlsLkxvbmdCaXRzLmZyb20odmFsdWUpLnRvSGFzaCgpXG4gICAgICAgIDogdXRpbC5Mb25nQml0cy56ZXJvSGFzaDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcgdG8gYSBsb25nIG9yIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge0xvbmd8bnVtYmVyfSBPcmlnaW5hbCB2YWx1ZVxuICovXG51dGlsLmxvbmdGcm9tSGFzaCA9IGZ1bmN0aW9uIGxvbmdGcm9tSGFzaChoYXNoLCB1bnNpZ25lZCkge1xuICAgIHZhciBiaXRzID0gdXRpbC5Mb25nQml0cy5mcm9tSGFzaChoYXNoKTtcbiAgICBpZiAodXRpbC5Mb25nKVxuICAgICAgICByZXR1cm4gdXRpbC5Mb25nLmZyb21CaXRzKGJpdHMubG8sIGJpdHMuaGksIHVuc2lnbmVkKTtcbiAgICByZXR1cm4gYml0cy50b051bWJlcihCb29sZWFuKHVuc2lnbmVkKSk7XG59O1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc291cmNlIG9iamVjdCBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZHN0IERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gc3JjIFNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmTm90U2V0PWZhbHNlXSBNZXJnZXMgb25seSBpZiB0aGUga2V5IGlzIG5vdCBhbHJlYWR5IHNldFxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXN0aW5hdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoZHN0LCBzcmMsIGlmTm90U2V0KSB7IC8vIHVzZWQgYnkgY29udmVydGVyc1xuICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChkc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCB8fCAhaWZOb3RTZXQpXG4gICAgICAgICAgICBkc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgcmV0dXJuIGRzdDtcbn1cblxudXRpbC5tZXJnZSA9IG1lcmdlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgdG8gbG93ZXIgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcbiAqL1xudXRpbC5sY0ZpcnN0ID0gZnVuY3Rpb24gbGNGaXJzdChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGN1c3RvbSBlcnJvciBjb25zdHJ1Y3Rvci5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFcnJvciBuYW1lXG4gKiBAcmV0dXJucyB7Q29uc3RydWN0b3I8RXJyb3I+fSBDdXN0b20gZXJyb3IgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gbmV3RXJyb3IobmFtZSkge1xuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXJyb3IobWVzc2FnZSwgcHJvcGVydGllcykge1xuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDdXN0b21FcnJvcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgICAgIC8vIF4ganVzdCByZXR1cm5zIGEgbmV3IGVycm9yIGluc3RhbmNlIGJlY2F1c2UgdGhlIGN0b3IgY2FuIGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uXG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVzc2FnZVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtZXNzYWdlOyB9IH0pO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgLy8gbm9kZVxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ3VzdG9tRXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGFja1wiLCB7IHZhbHVlOiBuZXcgRXJyb3IoKS5zdGFjayB8fCBcIlwiIH0pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgbWVyZ2UodGhpcywgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgQ3VzdG9tRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgIHZhbHVlOiBDdXN0b21FcnJvcixcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgeyByZXR1cm4gbmFtZTsgfSxcbiAgICAgICAgICAgIHNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBjb25maWd1cmFibGU6IGZhbHNlIHdvdWxkIGFjY3VyYXRlbHkgcHJlc2VydmUgdGhlIGJlaGF2aW9yIG9mXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwsIGJ1dCBJJ20gZ3Vlc3NpbmcgdGhhdCB3YXMgbm90IGludGVudGlvbmFsLlxuICAgICAgICAgICAgLy8gRm9yIGFuIGFjdHVhbCBlcnJvciBzdWJjbGFzcywgdGhpcyBwcm9wZXJ0eSB3b3VsZFxuICAgICAgICAgICAgLy8gYmUgY29uZmlndXJhYmxlLlxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB0b1N0cmluZzoge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkgeyByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlOyB9LFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBDdXN0b21FcnJvcjtcbn1cblxudXRpbC5uZXdFcnJvciA9IG5ld0Vycm9yO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcHJvdG9jb2wgZXJyb3IuXG4gKiBAY2xhc3NkZXNjIEVycm9yIHN1YmNsYXNzIGluZGljYXRpbmcgYSBwcm90b2NvbCBzcGVjaWZjIGVycm9yLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIEFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQGV4YW1wbGVcbiAqIHRyeSB7XG4gKiAgICAgTXlNZXNzYWdlLmRlY29kZShzb21lQnVmZmVyKTsgLy8gdGhyb3dzIGlmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICogfSBjYXRjaCAoZSkge1xuICogICAgIGlmIChlIGluc3RhbmNlb2YgUHJvdG9jb2xFcnJvciAmJiBlLmluc3RhbmNlKVxuICogICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZWQgc28gZmFyOiBcIiArIEpTT04uc3RyaW5naWZ5KGUuaW5zdGFuY2UpKTtcbiAqIH1cbiAqL1xudXRpbC5Qcm90b2NvbEVycm9yID0gbmV3RXJyb3IoXCJQcm90b2NvbEVycm9yXCIpO1xuXG4vKipcbiAqIFNvIGZhciBkZWNvZGVkIG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAbmFtZSB1dGlsLlByb3RvY29sRXJyb3IjaW5zdGFuY2VcbiAqIEB0eXBlIHtNZXNzYWdlPFQ+fVxuICovXG5cbi8qKlxuICogQSBPbmVPZiBnZXR0ZXIgYXMgcmV0dXJuZWQgYnkge0BsaW5rIHV0aWwub25lT2ZHZXR0ZXJ9LlxuICogQHR5cGVkZWYgT25lT2ZHZXR0ZXJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBTZXQgZmllbGQgbmFtZSwgaWYgYW55XG4gKi9cblxuLyoqXG4gKiBCdWlsZHMgYSBnZXR0ZXIgZm9yIGEgb25lb2YncyBwcmVzZW50IGZpZWxkIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXG4gKiBAcmV0dXJucyB7T25lT2ZHZXR0ZXJ9IFVuYm91bmQgZ2V0dGVyXG4gKi9cbnV0aWwub25lT2ZHZXR0ZXIgPSBmdW5jdGlvbiBnZXRPbmVPZihmaWVsZE5hbWVzKSB7XG4gICAgdmFyIGZpZWxkTWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICBmaWVsZE1hcFtmaWVsZE5hbWVzW2ldXSA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxuICAgICAqIEB0aGlzIE9iamVjdFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpLCBpID0ga2V5cy5sZW5ndGggLSAxOyBpID4gLTE7IC0taSlcbiAgICAgICAgICAgIGlmIChmaWVsZE1hcFtrZXlzW2ldXSA9PT0gMSAmJiB0aGlzW2tleXNbaV1dICE9PSB1bmRlZmluZWQgJiYgdGhpc1trZXlzW2ldXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5c1tpXTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBIE9uZU9mIHNldHRlciBhcyByZXR1cm5lZCBieSB7QGxpbmsgdXRpbC5vbmVPZlNldHRlcn0uXG4gKiBAdHlwZWRlZiBPbmVPZlNldHRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSB2YWx1ZSBGaWVsZCBuYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogQnVpbGRzIGEgc2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZmllbGROYW1lcyBGaWVsZCBuYW1lc1xuICogQHJldHVybnMge09uZU9mU2V0dGVyfSBVbmJvdW5kIHNldHRlclxuICovXG51dGlsLm9uZU9mU2V0dGVyID0gZnVuY3Rpb24gc2V0T25lT2YoZmllbGROYW1lcykge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHRoaXMgT2JqZWN0XG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWVzW2ldICE9PSBuYW1lKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2ZpZWxkTmFtZXNbaV1dO1xuICAgIH07XG59O1xuXG4vKipcbiAqIERlZmF1bHQgY29udmVyc2lvbiBvcHRpb25zIHVzZWQgZm9yIHtAbGluayBNZXNzYWdlI3RvSlNPTn0gaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIFRoZXNlIG9wdGlvbnMgYXJlIGNsb3NlIHRvIHByb3RvMydzIEpTT04gbWFwcGluZyB3aXRoIHRoZSBleGNlcHRpb24gdGhhdCBpbnRlcm5hbCB0eXBlcyBsaWtlIEFueSBhcmUgaGFuZGxlZCBqdXN0IGxpa2UgbWVzc2FnZXMuIE1vcmUgcHJlY2lzZWx5OlxuICpcbiAqIC0gTG9uZ3MgYmVjb21lIHN0cmluZ3NcbiAqIC0gRW51bXMgYmVjb21lIHN0cmluZyBrZXlzXG4gKiAtIEJ5dGVzIGJlY29tZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKiAtIChTdWItKU1lc3NhZ2VzIGJlY29tZSBwbGFpbiBvYmplY3RzXG4gKiAtIE1hcHMgYmVjb21lIHBsYWluIG9iamVjdHMgd2l0aCBhbGwgc3RyaW5nIGtleXNcbiAqIC0gUmVwZWF0ZWQgZmllbGRzIGJlY29tZSBhcnJheXNcbiAqIC0gTmFOIGFuZCBJbmZpbml0eSBmb3IgZmxvYXQgYW5kIGRvdWJsZSBmaWVsZHMgYmVjb21lIHN0cmluZ3NcbiAqXG4gKiBAdHlwZSB7SUNvbnZlcnNpb25PcHRpb25zfVxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zP2hsPWVuI2pzb25cbiAqL1xudXRpbC50b0pTT05PcHRpb25zID0ge1xuICAgIGxvbmdzOiBTdHJpbmcsXG4gICAgZW51bXM6IFN0cmluZyxcbiAgICBieXRlczogU3RyaW5nLFxuICAgIGpzb246IHRydWVcbn07XG5cbi8vIFNldHMgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudCAoY2FsbGVkIGluIGluZGV4LW1pbmltYWwpXG51dGlsLl9jb25maWd1cmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgQnVmZmVyID0gdXRpbC5CdWZmZXI7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFCdWZmZXIpIHtcbiAgICAgICAgdXRpbC5fQnVmZmVyX2Zyb20gPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJlY2F1c2Ugbm9kZSA0LnggYnVmZmVycyBhcmUgaW5jb21wYXRpYmxlICYgaW1tdXRhYmxlXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9wcm90b2J1Zi5qcy9wdWxsLzY2NVxuICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSAmJiBCdWZmZXIuZnJvbSB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfZnJvbSh2YWx1ZSwgZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlLCBlbmNvZGluZyk7XG4gICAgICAgIH07XG4gICAgdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gQnVmZmVyLmFsbG9jVW5zYWZlIHx8XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGZ1bmN0aW9uIEJ1ZmZlcl9hbGxvY1Vuc2FmZShzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICAgICAgfTtcbn07XG4iXSwibmFtZXMiOlsidXRpbCIsImV4cG9ydHMiLCJhc1Byb21pc2UiLCJyZXF1aXJlIiwiYmFzZTY0IiwiRXZlbnRFbWl0dGVyIiwiZmxvYXQiLCJpbnF1aXJlIiwidXRmOCIsInBvb2wiLCJMb25nQml0cyIsImlzTm9kZSIsIkJvb2xlYW4iLCJnbG9iYWwiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwid2luZG93Iiwic2VsZiIsImVtcHR5QXJyYXkiLCJPYmplY3QiLCJmcmVlemUiLCJlbXB0eU9iamVjdCIsImlzSW50ZWdlciIsIk51bWJlciIsInZhbHVlIiwiaXNGaW5pdGUiLCJNYXRoIiwiZmxvb3IiLCJpc1N0cmluZyIsIlN0cmluZyIsImlzT2JqZWN0IiwiaXNzZXQiLCJpc1NldCIsIm9iaiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImtleXMiLCJCdWZmZXIiLCJwcm90b3R5cGUiLCJ1dGY4V3JpdGUiLCJlIiwiX0J1ZmZlcl9mcm9tIiwiX0J1ZmZlcl9hbGxvY1Vuc2FmZSIsIm5ld0J1ZmZlciIsInNpemVPckFycmF5IiwiVWludDhBcnJheSIsIkxvbmciLCJkY29kZUlPIiwia2V5MlJlIiwia2V5MzJSZSIsImtleTY0UmUiLCJsb25nVG9IYXNoIiwiZnJvbSIsInRvSGFzaCIsInplcm9IYXNoIiwibG9uZ0Zyb21IYXNoIiwiaGFzaCIsInVuc2lnbmVkIiwiYml0cyIsImZyb21IYXNoIiwiZnJvbUJpdHMiLCJsbyIsImhpIiwidG9OdW1iZXIiLCJtZXJnZSIsImRzdCIsInNyYyIsImlmTm90U2V0IiwiaSIsInVuZGVmaW5lZCIsImxjRmlyc3QiLCJzdHIiLCJjaGFyQXQiLCJ0b0xvd2VyQ2FzZSIsInN1YnN0cmluZyIsIm5ld0Vycm9yIiwibmFtZSIsIkN1c3RvbUVycm9yIiwibWVzc2FnZSIsInByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0IiwidG9TdHJpbmciLCJQcm90b2NvbEVycm9yIiwib25lT2ZHZXR0ZXIiLCJnZXRPbmVPZiIsImZpZWxkTmFtZXMiLCJmaWVsZE1hcCIsIm9uZU9mU2V0dGVyIiwic2V0T25lT2YiLCJ0b0pTT05PcHRpb25zIiwibG9uZ3MiLCJlbnVtcyIsImJ5dGVzIiwianNvbiIsIl9jb25maWd1cmUiLCJCdWZmZXJfZnJvbSIsImVuY29kaW5nIiwiYWxsb2NVbnNhZmUiLCJCdWZmZXJfYWxsb2NVbnNhZmUiLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/verifier.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/verifier.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = verifier;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nfunction invalid(field, expected) {\n  return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n      for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n      gen(\"break\")(\"}\");\n    } else {\n      gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n    }\n  } else {\n    switch (field.type) {\n      case \"int32\":\n      case \"uint32\":\n      case \"sint32\":\n      case \"fixed32\":\n      case \"sfixed32\":\n        gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n        break;\n      case \"int64\":\n      case \"uint64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n        break;\n      case \"float\":\n      case \"double\":\n        gen(\"if(typeof %s!==\\\"number\\\")\", ref)(\"return%j\", invalid(field, \"number\"));\n        break;\n      case \"bool\":\n        gen(\"if(typeof %s!==\\\"boolean\\\")\", ref)(\"return%j\", invalid(field, \"boolean\"));\n        break;\n      case \"string\":\n        gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n        break;\n      case \"bytes\":\n        gen(\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  switch (field.keyType) {\n    case \"int32\":\n    case \"uint32\":\n    case \"sint32\":\n    case \"fixed32\":\n    case \"sfixed32\":\n      gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n      break;\n    case \"int64\":\n    case \"uint64\":\n    case \"sint64\":\n    case \"fixed64\":\n    case \"sfixed64\":\n      gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n      (\"return%j\", invalid(field, \"integer|Long key\"));\n      break;\n    case \"bool\":\n      gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n      break;\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n\n  var gen = util.codegen([\"m\"], mtype.name + \"$verify\")(\"if(typeof m!==\\\"object\\\"||m===null)\")(\"return%j\", \"object expected\");\n  var oneofs = mtype.oneofsArray,\n    seenFirstField = {};\n  if (oneofs.length) gen(\"var p={}\");\n  for (var i = 0; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      ref = \"m\" + util.safeProp(field.name);\n    if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n    // map fields\n    if (field.map) {\n      gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n      genVerifyKey(gen, field, \"k[i]\");\n      genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n\n      // repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n      genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n\n      // required or present fields\n    } else {\n      if (field.partOf) {\n        var oneofProp = util.safeProp(field.partOf.name);\n        if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n        seenFirstField[field.partOf.name] = 1;\n        gen(\"p%s=1\", oneofProp);\n      }\n      genVerifyValue(gen, field, i, ref);\n    }\n    if (field.optional) gen(\"}\");\n  }\n  return gen(\"return null\");\n  /* eslint-enable no-unexpected-multiline */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/verifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/wrappers.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/wrappers.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\nvar Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\");\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n  fromObject: function (object) {\n    // unwrap value type if mapped\n    if (object && object[\"@type\"]) {\n      // Only use fully qualified type name after the last '/'\n      var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n      if (type) {\n        // type_url does not accept leading \".\"\n        var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].slice(1) : object[\"@type\"];\n        // type_url prefix is optional, but path seperator is required\n        if (type_url.indexOf(\"/\") === -1) {\n          type_url = \"/\" + type_url;\n        }\n        return this.create({\n          type_url: type_url,\n          value: type.encode(type.fromObject(object)).finish()\n        });\n      }\n    }\n    return this.fromObject(object);\n  },\n  toObject: function (message, options) {\n    // Default prefix\n    var googleApi = \"type.googleapis.com/\";\n    var prefix = \"\";\n    var name = \"\";\n\n    // decode value if requested and unmapped\n    if (options && options.json && message.type_url && message.value) {\n      // Only use fully qualified type name after the last '/'\n      name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n      // Separate the prefix used\n      prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n      if (type) message = type.decode(message.value);\n    }\n\n    // wrap value if unmapped\n    if (!(message instanceof this.ctor) && message instanceof Message) {\n      var object = message.$type.toObject(message, options);\n      var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.slice(1) : message.$type.fullName;\n      // Default to type.googleapis.com prefix if no prefix is used\n      if (prefix === \"\") {\n        prefix = googleApi;\n      }\n      name = prefix + messageName;\n      object[\"@type\"] = name;\n      return object;\n    }\n    return this.toObject(message, options);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/wrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Writer;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar BufferWriter; // cyclic\n\nvar LongBits = util.LongBits,\n  base64 = util.base64,\n  utf8 = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n  /**\n   * Function to call.\n   * @type {function(Uint8Array, number, *)}\n   */\n  this.fn = fn;\n\n  /**\n   * Value byte length.\n   * @type {number}\n   */\n  this.len = len;\n\n  /**\n   * Next operation.\n   * @type {Writer.Op|undefined}\n   */\n  this.next = undefined;\n\n  /**\n   * Value to write.\n   * @type {*}\n   */\n  this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n  /**\n   * Current head.\n   * @type {Writer.Op}\n   */\n  this.head = writer.head;\n\n  /**\n   * Current tail.\n   * @type {Writer.Op}\n   */\n  this.tail = writer.tail;\n\n  /**\n   * Current buffer length.\n   * @type {number}\n   */\n  this.len = writer.len;\n\n  /**\n   * Next state.\n   * @type {State|null}\n   */\n  this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n  /**\n   * Current length.\n   * @type {number}\n   */\n  this.len = 0;\n\n  /**\n   * Operations head.\n   * @type {Object}\n   */\n  this.head = new Op(noop, 0, 0);\n\n  /**\n   * Operations tail\n   * @type {Object}\n   */\n  this.tail = this.head;\n\n  /**\n   * Linked forked states.\n   * @type {Object|null}\n   */\n  this.states = null;\n\n  // When a value is written, the writer calculates its byte length and puts it into a linked\n  // list of operations to perform when finish() is called. This both allows us to allocate\n  // buffers of the exact required size and reduces the amount of work we have to do compared\n  // to first calculating over objects and then encoding over objects. In our case, the encoding\n  // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n  return util.Buffer ? function create_buffer_setup() {\n    return (Writer.create = function create_buffer() {\n      return new BufferWriter();\n    })();\n  }\n  /* istanbul ignore next */ : function create_array() {\n    return new Writer();\n  };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n  return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n  this.tail = this.tail.next = new Op(fn, len, val);\n  this.len += len;\n  return this;\n};\nfunction writeByte(val, buf, pos) {\n  buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128;\n    val >>>= 7;\n  }\n  buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n  this.len = len;\n  this.next = undefined;\n  this.val = val;\n}\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n  // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n  // uint32 is by far the most frequently used operation and benefits significantly from this.\n  this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n  return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n  return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n  : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n  return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\nfunction writeVarint64(val, buf, pos) {\n  while (val.hi) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n    val.hi >>>= 7;\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = val.lo >>> 7;\n  }\n  buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n  var bits = LongBits.from(value);\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n  var bits = LongBits.from(value).zzEncode();\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n  return this._push(writeByte, 1, value ? 1 : 0);\n};\nfunction writeFixed32(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n  return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n  var bits = LongBits.from(value);\n  return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n  return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n  return this._push(util.float.writeDoubleLE, 8, value);\n};\nvar writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n  buf.set(val, pos); // also works for plain array values\n}\n/* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n  for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n};\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n  var len = value.length >>> 0;\n  if (!len) return this._push(writeByte, 1, 0);\n  if (util.isString(value)) {\n    var buf = Writer.alloc(len = base64.length(value));\n    base64.decode(value, buf, 0);\n    value = buf;\n  }\n  return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n  var len = utf8.length(value);\n  return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n  this.states = new State(this);\n  this.head = this.tail = new Op(noop, 0, 0);\n  this.len = 0;\n  return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n  if (this.states) {\n    this.head = this.states.head;\n    this.tail = this.states.tail;\n    this.len = this.states.len;\n    this.states = this.states.next;\n  } else {\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n  }\n  return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n  var head = this.head,\n    tail = this.tail,\n    len = this.len;\n  this.reset().uint32(len);\n  if (len) {\n    this.tail.next = head.next; // skip noop\n    this.tail = tail;\n    this.len += len;\n  }\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n  var head = this.head.next,\n    // skip noop\n    buf = this.constructor.alloc(this.len),\n    pos = 0;\n  while (head) {\n    head.fn(head.val, buf, pos);\n    pos += head.len;\n    head = head.next;\n  }\n  // this.head = this.tail = null;\n  return buf;\n};\nWriter._configure = function (BufferWriter_) {\n  BufferWriter = BufferWriter_;\n  Writer.create = create();\n  BufferWriter._configure();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n  Writer.call(this);\n}\nBufferWriter._configure = function () {\n  /**\n   * Allocates a buffer of the specified size.\n   * @function\n   * @param {number} size Buffer size\n   * @returns {Buffer} Buffer\n   */\n  BufferWriter.alloc = util._Buffer_allocUnsafe;\n  BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n    if (val.copy)\n      // Buffer values\n      val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n    // plain array values\n    buf[pos++] = val[i++];\n  };\n};\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n  if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n  return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40)\n    // plain js is faster for short strings (probably due to redundant assertions)\n    util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n  var len = util.Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLCtEQUFVLENBQUM7QUFDaEMsQ0FBQ0YsWUFBWSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFlBQVk7QUFFckYsSUFBSU8sSUFBSSxHQUFHTCxtQkFBTyxDQUFDLDJFQUFnQixDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRixZQUFZQSxDQUFBLEVBQUc7RUFDcEJDLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLElBQUksQ0FBQztBQUNyQjtBQUVBUixZQUFZLENBQUNTLFVBQVUsR0FBRyxZQUFZO0VBQ2xDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJVCxZQUFZLENBQUNVLEtBQUssR0FBR0gsSUFBSSxDQUFDSSxtQkFBbUI7RUFFN0NYLFlBQVksQ0FBQ1ksZ0JBQWdCLEdBQUdMLElBQUksQ0FBQ00sTUFBTSxJQUFJTixJQUFJLENBQUNNLE1BQU0sQ0FBQ1YsU0FBUyxZQUFZVyxVQUFVLElBQUlQLElBQUksQ0FBQ00sTUFBTSxDQUFDVixTQUFTLENBQUNZLEdBQUcsQ0FBQ0MsSUFBSSxLQUFLLEtBQUssR0FDaEksU0FBU0Msb0JBQW9CQSxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0lBQzdDRCxHQUFHLENBQUNKLEdBQUcsQ0FBQ0csR0FBRyxFQUFFRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CO0VBQ0Y7RUFDQSw2QkFDRSxTQUFTQyxxQkFBcUJBLENBQUNILEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7SUFDOUMsSUFBSUYsR0FBRyxDQUFDSSxJQUFJO01BQUU7TUFDWkosR0FBRyxDQUFDSSxJQUFJLENBQUNILEdBQUcsRUFBRUMsR0FBRyxFQUFFLENBQUMsRUFBRUYsR0FBRyxDQUFDSyxNQUFNLENBQUMsQ0FBQyxLQUMvQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR04sR0FBRyxDQUFDSyxNQUFNO0lBQUc7SUFDcENKLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFLENBQUMsR0FBR0YsR0FBRyxDQUFDTSxDQUFDLEVBQUUsQ0FBQztFQUN6QixDQUFDO0FBQ1QsQ0FBQzs7QUFHRDtBQUNBO0FBQ0E7QUFDQXhCLFlBQVksQ0FBQ0csU0FBUyxDQUFDc0IsS0FBSyxHQUFHLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQzlELElBQUlwQixJQUFJLENBQUNxQixRQUFRLENBQUNELEtBQUssQ0FBQyxFQUNwQkEsS0FBSyxHQUFHcEIsSUFBSSxDQUFDc0IsWUFBWSxDQUFDRixLQUFLLEVBQUUsUUFBUSxDQUFDO0VBQzlDLElBQUlHLEdBQUcsR0FBR0gsS0FBSyxDQUFDSixNQUFNLEtBQUssQ0FBQztFQUM1QixJQUFJLENBQUNRLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDO0VBQ2hCLElBQUlBLEdBQUcsRUFDSCxJQUFJLENBQUNFLEtBQUssQ0FBQ2hDLFlBQVksQ0FBQ1ksZ0JBQWdCLEVBQUVrQixHQUFHLEVBQUVILEtBQUssQ0FBQztFQUN6RCxPQUFPLElBQUk7QUFDZixDQUFDO0FBRUQsU0FBU00saUJBQWlCQSxDQUFDZixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ3RDLElBQUlGLEdBQUcsQ0FBQ0ssTUFBTSxHQUFHLEVBQUU7SUFBRTtJQUNqQmhCLElBQUksQ0FBQzJCLElBQUksQ0FBQ0MsS0FBSyxDQUFDakIsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxDQUFDLEtBQzlCLElBQUlELEdBQUcsQ0FBQ2lCLFNBQVMsRUFDbEJqQixHQUFHLENBQUNpQixTQUFTLENBQUNsQixHQUFHLEVBQUVFLEdBQUcsQ0FBQyxDQUFDLEtBRXhCRCxHQUFHLENBQUNnQixLQUFLLENBQUNqQixHQUFHLEVBQUVFLEdBQUcsQ0FBQztBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQXBCLFlBQVksQ0FBQ0csU0FBUyxDQUFDa0MsTUFBTSxHQUFHLFNBQVNDLG1CQUFtQkEsQ0FBQ1gsS0FBSyxFQUFFO0VBQ2hFLElBQUlHLEdBQUcsR0FBR3ZCLElBQUksQ0FBQ00sTUFBTSxDQUFDMEIsVUFBVSxDQUFDWixLQUFLLENBQUM7RUFDdkMsSUFBSSxDQUFDSSxNQUFNLENBQUNELEdBQUcsQ0FBQztFQUNoQixJQUFJQSxHQUFHLEVBQ0gsSUFBSSxDQUFDRSxLQUFLLENBQUNDLGlCQUFpQixFQUFFSCxHQUFHLEVBQUVILEtBQUssQ0FBQztFQUM3QyxPQUFPLElBQUk7QUFDZixDQUFDOztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTNCLFlBQVksQ0FBQ1MsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlcl9idWZmZXIuanM/MjBkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xuXG4vLyBleHRlbmRzIFdyaXRlclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbihCdWZmZXJXcml0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJXcml0ZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHdyaXRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgd3JpdGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcbn1cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxuICAgICAqL1xuICAgIEJ1ZmZlcldyaXRlci5hbGxvYyA9IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZTtcblxuICAgIEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyID0gdXRpbC5CdWZmZXIgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2V0Lm5hbWUgPT09IFwic2V0XCJcbiAgICAgICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxuICAgICAgICAgIC8vIGFsc28gd29ya3MgZm9yIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9jb3B5KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBpZiAodmFsLmNvcHkpIC8vIEJ1ZmZlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xuICAgICAgICB9O1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXNfYnVmZmVyKHZhbHVlKSB7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKVxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaChCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVN0cmluZ0J1ZmZlcih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgaWYgKHZhbC5sZW5ndGggPCA0MCkgLy8gcGxhaW4ganMgaXMgZmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIChwcm9iYWJseSBkdWUgdG8gcmVkdW5kYW50IGFzc2VydGlvbnMpXG4gICAgICAgIHV0aWwudXRmOC53cml0ZSh2YWwsIGJ1ZiwgcG9zKTtcbiAgICBlbHNlIGlmIChidWYudXRmOFdyaXRlKVxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcbiAgICBlbHNlXG4gICAgICAgIGJ1Zi53cml0ZSh2YWwsIHBvcyk7XG59XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nX2J1ZmZlcih2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGlsLkJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAbmFtZSBCdWZmZXJXcml0ZXIjZmluaXNoXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkJ1ZmZlcldyaXRlciIsIldyaXRlciIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInV0aWwiLCJjYWxsIiwiX2NvbmZpZ3VyZSIsImFsbG9jIiwiX0J1ZmZlcl9hbGxvY1Vuc2FmZSIsIndyaXRlQnl0ZXNCdWZmZXIiLCJCdWZmZXIiLCJVaW50OEFycmF5Iiwic2V0IiwibmFtZSIsIndyaXRlQnl0ZXNCdWZmZXJfc2V0IiwidmFsIiwiYnVmIiwicG9zIiwid3JpdGVCeXRlc0J1ZmZlcl9jb3B5IiwiY29weSIsImxlbmd0aCIsImkiLCJieXRlcyIsIndyaXRlX2J5dGVzX2J1ZmZlciIsInZhbHVlIiwiaXNTdHJpbmciLCJfQnVmZmVyX2Zyb20iLCJsZW4iLCJ1aW50MzIiLCJfcHVzaCIsIndyaXRlU3RyaW5nQnVmZmVyIiwidXRmOCIsIndyaXRlIiwidXRmOFdyaXRlIiwic3RyaW5nIiwid3JpdGVfc3RyaW5nX2J1ZmZlciIsImJ5dGVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/api.json":
/*!**********************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/api.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Api":{"fields":{"name":{"type":"string","id":1},"methods":{"rule":"repeated","type":"Method","id":2},"options":{"rule":"repeated","type":"Option","id":3},"version":{"type":"string","id":4},"sourceContext":{"type":"SourceContext","id":5},"mixins":{"rule":"repeated","type":"Mixin","id":6},"syntax":{"type":"Syntax","id":7}}},"Method":{"fields":{"name":{"type":"string","id":1},"requestTypeUrl":{"type":"string","id":2},"requestStreaming":{"type":"bool","id":3},"responseTypeUrl":{"type":"string","id":4},"responseStreaming":{"type":"bool","id":5},"options":{"rule":"repeated","type":"Option","id":6},"syntax":{"type":"Syntax","id":7}}},"Mixin":{"fields":{"name":{"type":"string","id":1},"root":{"type":"string","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json":
/*!*****************************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/descriptor.json ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5},"serverStreaming":{"type":"bool","id":6}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16},"javaGenericServices":{"type":"bool","id":17},"pyGenericServices":{"type":"bool","id":18},"deprecated":{"type":"bool","id":23},"ccEnableArenas":{"type":"bool","id":31},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1},"noStandardDescriptorAccessor":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5},"deprecated":{"type":"bool","id":3},"weak":{"type":"bool","id":10},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/source_context.json":
/*!*********************************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/source_context.json ***!
  \*********************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/type.json":
/*!***********************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/type.json ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Type":{"fields":{"name":{"type":"string","id":1},"fields":{"rule":"repeated","type":"Field","id":2},"oneofs":{"rule":"repeated","type":"string","id":3},"options":{"rule":"repeated","type":"Option","id":4},"sourceContext":{"type":"SourceContext","id":5},"syntax":{"type":"Syntax","id":6}}},"Field":{"fields":{"kind":{"type":"Kind","id":1},"cardinality":{"type":"Cardinality","id":2},"number":{"type":"int32","id":3},"name":{"type":"string","id":4},"typeUrl":{"type":"string","id":6},"oneofIndex":{"type":"int32","id":7},"packed":{"type":"bool","id":8},"options":{"rule":"repeated","type":"Option","id":9},"jsonName":{"type":"string","id":10},"defaultValue":{"type":"string","id":11}},"nested":{"Kind":{"values":{"TYPE_UNKNOWN":0,"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Cardinality":{"values":{"CARDINALITY_UNKNOWN":0,"CARDINALITY_OPTIONAL":1,"CARDINALITY_REQUIRED":2,"CARDINALITY_REPEATED":3}}}},"Enum":{"fields":{"name":{"type":"string","id":1},"enumvalue":{"rule":"repeated","type":"EnumValue","id":2},"options":{"rule":"repeated","type":"Option","id":3},"sourceContext":{"type":"SourceContext","id":4},"syntax":{"type":"Syntax","id":5}}},"EnumValue":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"rule":"repeated","type":"Option","id":3}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ })

};
;