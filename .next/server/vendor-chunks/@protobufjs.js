"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@protobufjs";
exports.ids = ["vendor-chunks/@protobufjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = asPromise;\n\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\nfunction asPromise(fn, ctx /*, varargs */) {\n  var params = new Array(arguments.length - 1),\n    offset = 0,\n    index = 2,\n    pending = true;\n  while (index < arguments.length) params[offset++] = arguments[index++];\n  return new Promise(function executor(resolve, reject) {\n    params[offset] = function callback(err /*, varargs */) {\n      if (pending) {\n        pending = false;\n        if (err) reject(err);else {\n          var params = new Array(arguments.length - 1),\n            offset = 0;\n          while (offset < params.length) params[offset++] = arguments[offset];\n          resolve.apply(null, params);\n        }\n      }\n    };\n    try {\n      fn.apply(ctx || null, params);\n    } catch (err) {\n      if (pending) {\n        pending = false;\n        reject(err);\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYXNwcm9taXNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUzs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsU0FBU0EsQ0FBQ0MsRUFBRSxFQUFFQyxHQUFHLGlCQUFnQjtFQUN0QyxJQUFJQyxNQUFNLEdBQUksSUFBSUMsS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDekNDLE1BQU0sR0FBSSxDQUFDO0lBQ1hDLEtBQUssR0FBSyxDQUFDO0lBQ1hDLE9BQU8sR0FBRyxJQUFJO0VBQ2xCLE9BQU9ELEtBQUssR0FBR0gsU0FBUyxDQUFDQyxNQUFNLEVBQzNCSCxNQUFNLENBQUNJLE1BQU0sRUFBRSxDQUFDLEdBQUdGLFNBQVMsQ0FBQ0csS0FBSyxFQUFFLENBQUM7RUFDekMsT0FBTyxJQUFJRSxPQUFPLENBQUMsU0FBU0MsUUFBUUEsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUU7SUFDbERWLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDLEdBQUcsU0FBU08sUUFBUUEsQ0FBQ0MsR0FBRyxpQkFBZ0I7TUFDbEQsSUFBSU4sT0FBTyxFQUFFO1FBQ1RBLE9BQU8sR0FBRyxLQUFLO1FBQ2YsSUFBSU0sR0FBRyxFQUNIRixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLEtBQ1g7VUFDRCxJQUFJWixNQUFNLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDeENDLE1BQU0sR0FBRyxDQUFDO1VBQ2QsT0FBT0EsTUFBTSxHQUFHSixNQUFNLENBQUNHLE1BQU0sRUFDekJILE1BQU0sQ0FBQ0ksTUFBTSxFQUFFLENBQUMsR0FBR0YsU0FBUyxDQUFDRSxNQUFNLENBQUM7VUFDeENLLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRWIsTUFBTSxDQUFDO1FBQy9CO01BQ0o7SUFDSixDQUFDO0lBQ0QsSUFBSTtNQUNBRixFQUFFLENBQUNlLEtBQUssQ0FBQ2QsR0FBRyxJQUFJLElBQUksRUFBRUMsTUFBTSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxPQUFPWSxHQUFHLEVBQUU7TUFDVixJQUFJTixPQUFPLEVBQUU7UUFDVEEsT0FBTyxHQUFHLEtBQUs7UUFDZkksTUFBTSxDQUFDRSxHQUFHLENBQUM7TUFDZjtJQUNKO0VBQ0osQ0FBQyxDQUFDO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2FzcHJvbWlzZS9pbmRleC5qcz80NmI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzUHJvbWlzZTtcclxuXHJcbi8qKlxyXG4gKiBDYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLmFzUHJvbWlzZX0uXHJcbiAqIEB0eXBlZGVmIGFzUHJvbWlzZUNhbGxiYWNrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55XHJcbiAqIEBwYXJhbSB7Li4uKn0gcGFyYW1zIEFkZGl0aW9uYWwgYXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBwcm9taXNlIGZyb20gYSBub2RlLXN0eWxlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge2FzUHJvbWlzZUNhbGxiYWNrfSBmbiBGdW5jdGlvbiB0byBjYWxsXHJcbiAqIEBwYXJhbSB7Kn0gY3R4IEZ1bmN0aW9uIGNvbnRleHRcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgRnVuY3Rpb24gYXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPCo+fSBQcm9taXNpZmllZCBmdW5jdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gYXNQcm9taXNlKGZuLCBjdHgvKiwgdmFyYXJncyAqLykge1xyXG4gICAgdmFyIHBhcmFtcyAgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgIG9mZnNldCAgPSAwLFxyXG4gICAgICAgIGluZGV4ICAgPSAyLFxyXG4gICAgICAgIHBlbmRpbmcgPSB0cnVlO1xyXG4gICAgd2hpbGUgKGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW2luZGV4KytdO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHBhcmFtc1tvZmZzZXRdID0gZnVuY3Rpb24gY2FsbGJhY2soZXJyLyosIHZhcmFyZ3MgKi8pIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0IDwgcGFyYW1zLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW29mZnNldCsrXSA9IGFyZ3VtZW50c1tvZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUuYXBwbHkobnVsbCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm4uYXBwbHkoY3R4IHx8IG51bGwsIHBhcmFtcyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXNQcm9taXNlIiwiZm4iLCJjdHgiLCJwYXJhbXMiLCJBcnJheSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm9mZnNldCIsImluZGV4IiwicGVuZGluZyIsIlByb21pc2UiLCJleGVjdXRvciIsInJlc29sdmUiLCJyZWplY3QiLCJjYWxsYmFjayIsImVyciIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/aspromise/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\nvar base64 = exports;\n\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\nbase64.length = function length(string) {\n  var p = string.length;\n  if (!p) return 0;\n  var n = 0;\n  while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n  return Math.ceil(string.length * 3) / 4 - n;\n};\n\n// Base64 encoding table\nvar b64 = new Array(64);\n\n// Base64 decoding table\nvar s64 = new Array(123);\n\n// 65..90, 97..122, 48..57, 43, 47\nfor (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\nbase64.encode = function encode(buffer, start, end) {\n  var parts = null,\n    chunk = [];\n  var i = 0,\n    // output index\n    j = 0,\n    // goto index\n    t; // temporary\n  while (start < end) {\n    var b = buffer[start++];\n    switch (j) {\n      case 0:\n        chunk[i++] = b64[b >> 2];\n        t = (b & 3) << 4;\n        j = 1;\n        break;\n      case 1:\n        chunk[i++] = b64[t | b >> 4];\n        t = (b & 15) << 2;\n        j = 2;\n        break;\n      case 2:\n        chunk[i++] = b64[t | b >> 6];\n        chunk[i++] = b64[b & 63];\n        j = 0;\n        break;\n    }\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (j) {\n    chunk[i++] = b64[t];\n    chunk[i++] = 61;\n    if (j === 1) chunk[i++] = 61;\n  }\n  if (parts) {\n    if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\nvar invalidEncoding = \"invalid encoding\";\n\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\nbase64.decode = function decode(string, buffer, offset) {\n  var start = offset;\n  var j = 0,\n    // goto index\n    t; // temporary\n  for (var i = 0; i < string.length;) {\n    var c = string.charCodeAt(i++);\n    if (c === 61 && j > 1) break;\n    if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n    switch (j) {\n      case 0:\n        t = c;\n        j = 1;\n        break;\n      case 1:\n        buffer[offset++] = t << 2 | (c & 48) >> 4;\n        t = c;\n        j = 2;\n        break;\n      case 2:\n        buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n        t = c;\n        j = 3;\n        break;\n      case 3:\n        buffer[offset++] = (t & 3) << 6 | c;\n        j = 0;\n        break;\n    }\n  }\n  if (j === 1) throw Error(invalidEncoding);\n  return offset - start;\n};\n\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\nbase64.test = function test(string) {\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/base64/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/codegen/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/codegen/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = codegen;\n\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\nfunction codegen(functionParams, functionName) {\n  /* istanbul ignore if */\n  if (typeof functionParams === \"string\") {\n    functionName = functionParams;\n    functionParams = undefined;\n  }\n  var body = [];\n\n  /**\r\n   * Appends code to the function's body or finishes generation.\r\n   * @typedef Codegen\r\n   * @type {function}\r\n   * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n   * @param {...*} [formatParams] Format parameters\r\n   * @returns {Codegen|Function} Itself or the generated function if finished\r\n   * @throws {Error} If format parameter counts do not match\r\n   */\n\n  function Codegen(formatStringOrScope) {\n    // note that explicit array handling below makes this ~50% faster\n\n    // finish the function\n    if (typeof formatStringOrScope !== \"string\") {\n      var source = toString();\n      if (codegen.verbose) console.log(\"codegen: \" + source); // eslint-disable-line no-console\n      source = \"return \" + source;\n      if (formatStringOrScope) {\n        var scopeKeys = Object.keys(formatStringOrScope),\n          scopeParams = new Array(scopeKeys.length + 1),\n          scopeValues = new Array(scopeKeys.length),\n          scopeOffset = 0;\n        while (scopeOffset < scopeKeys.length) {\n          scopeParams[scopeOffset] = scopeKeys[scopeOffset];\n          scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\n        }\n        scopeParams[scopeOffset] = source;\n        return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\n      }\n\n      return Function(source)(); // eslint-disable-line no-new-func\n    }\n\n    // otherwise append to body\n    var formatParams = new Array(arguments.length - 1),\n      formatOffset = 0;\n    while (formatOffset < formatParams.length) formatParams[formatOffset] = arguments[++formatOffset];\n    formatOffset = 0;\n    formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\n      var value = formatParams[formatOffset++];\n      switch ($1) {\n        case \"d\":\n        case \"f\":\n          return String(Number(value));\n        case \"i\":\n          return String(Math.floor(value));\n        case \"j\":\n          return JSON.stringify(value);\n        case \"s\":\n          return String(value);\n      }\n      return \"%\";\n    });\n    if (formatOffset !== formatParams.length) throw Error(\"parameter count mismatch\");\n    body.push(formatStringOrScope);\n    return Codegen;\n  }\n  function toString(functionNameOverride) {\n    return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\n  }\n  Codegen.toString = toString;\n  return Codegen;\n}\n\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\n\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\ncodegen.verbose = false;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/codegen/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = EventEmitter;\n\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\nfunction EventEmitter() {\n  /**\r\n   * Registered listeners.\r\n   * @type {Object.<string,*>}\r\n   * @private\r\n   */\n  this._listeners = {};\n}\n\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\n  (this._listeners[evt] || (this._listeners[evt] = [])).push({\n    fn: fn,\n    ctx: ctx || this\n  });\n  return this;\n};\n\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.off = function off(evt, fn) {\n  if (evt === undefined) this._listeners = {};else {\n    if (fn === undefined) this._listeners[evt] = [];else {\n      var listeners = this._listeners[evt];\n      for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n    }\n  }\n  return this;\n};\n\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.emit = function emit(evt) {\n  var listeners = this._listeners[evt];\n  if (listeners) {\n    var args = [],\n      i = 1;\n    for (; i < arguments.length;) args.push(arguments[i++]);\n    for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n  }\n  return this;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsWUFBWUEsQ0FBQSxFQUFHO0VBRXBCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUQsWUFBWSxDQUFDRSxTQUFTLENBQUNDLEVBQUUsR0FBRyxTQUFTQSxFQUFFQSxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsR0FBRyxFQUFFO0VBQ2xELENBQUMsSUFBSSxDQUFDTCxVQUFVLENBQUNHLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQ0gsVUFBVSxDQUFDRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRUcsSUFBSSxDQUFDO0lBQ3ZERixFQUFFLEVBQUlBLEVBQUU7SUFDUkMsR0FBRyxFQUFHQSxHQUFHLElBQUk7RUFDakIsQ0FBQyxDQUFDO0VBQ0YsT0FBTyxJQUFJO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQU4sWUFBWSxDQUFDRSxTQUFTLENBQUNNLEdBQUcsR0FBRyxTQUFTQSxHQUFHQSxDQUFDSixHQUFHLEVBQUVDLEVBQUUsRUFBRTtFQUMvQyxJQUFJRCxHQUFHLEtBQUtLLFNBQVMsRUFDakIsSUFBSSxDQUFDUixVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FDcEI7SUFDRCxJQUFJSSxFQUFFLEtBQUtJLFNBQVMsRUFDaEIsSUFBSSxDQUFDUixVQUFVLENBQUNHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUN6QjtNQUNELElBQUlNLFNBQVMsR0FBRyxJQUFJLENBQUNULFVBQVUsQ0FBQ0csR0FBRyxDQUFDO01BQ3BDLEtBQUssSUFBSU8sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxTQUFTLENBQUNFLE1BQU0sR0FDaEMsSUFBSUYsU0FBUyxDQUFDQyxDQUFDLENBQUMsQ0FBQ04sRUFBRSxLQUFLQSxFQUFFLEVBQ3RCSyxTQUFTLENBQUNHLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRXZCLEVBQUVBLENBQUM7SUFDZjtFQUNKO0VBQ0EsT0FBTyxJQUFJO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVgsWUFBWSxDQUFDRSxTQUFTLENBQUNZLElBQUksR0FBRyxTQUFTQSxJQUFJQSxDQUFDVixHQUFHLEVBQUU7RUFDN0MsSUFBSU0sU0FBUyxHQUFHLElBQUksQ0FBQ1QsVUFBVSxDQUFDRyxHQUFHLENBQUM7RUFDcEMsSUFBSU0sU0FBUyxFQUFFO0lBQ1gsSUFBSUssSUFBSSxHQUFHLEVBQUU7TUFDVEosQ0FBQyxHQUFHLENBQUM7SUFDVCxPQUFPQSxDQUFDLEdBQUdLLFNBQVMsQ0FBQ0osTUFBTSxHQUN2QkcsSUFBSSxDQUFDUixJQUFJLENBQUNTLFNBQVMsQ0FBQ0wsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELFNBQVMsQ0FBQ0UsTUFBTSxHQUM1QkYsU0FBUyxDQUFDQyxDQUFDLENBQUMsQ0FBQ04sRUFBRSxDQUFDWSxLQUFLLENBQUNQLFNBQVMsQ0FBQ0MsQ0FBQyxFQUFFLENBQUMsQ0FBQ0wsR0FBRyxFQUFFUyxJQUFJLENBQUM7RUFDdkQ7RUFDQSxPQUFPLElBQUk7QUFDZixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVudGJhYmUtbmV4dGpzLW1pZ3JhdGlvbi8uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9ldmVudGVtaXR0ZXIvaW5kZXguanM/Y2M3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBldmVudCBlbWl0dGVyIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIEEgbWluaW1hbCBldmVudCBlbWl0dGVyLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBMaXN0ZW5lclxyXG4gKiBAcGFyYW0geyp9IFtjdHhdIExpc3RlbmVyIGNvbnRleHRcclxuICogQHJldHVybnMge3V0aWwuRXZlbnRFbWl0dGVyfSBgdGhpc2BcclxuICovXHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldnQsIGZuLCBjdHgpIHtcclxuICAgICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSB8fCAodGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXSkpLnB1c2goe1xyXG4gICAgICAgIGZuICA6IGZuLFxyXG4gICAgICAgIGN0eCA6IGN0eCB8fCB0aGlzXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgb3IgYW55IG1hdGNoaW5nIGxpc3RlbmVycyBpZiBhcmd1bWVudHMgYXJlIG9taXR0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXZ0XSBFdmVudCBuYW1lLiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgaWYgb21pdHRlZC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2ZuXSBMaXN0ZW5lciB0byByZW1vdmUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBvZiBgZXZ0YCBpZiBvbWl0dGVkLlxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiBvZmYoZXZ0LCBmbikge1xyXG4gICAgaWYgKGV2dCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGZuID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdID0gW107XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gPT09IGZuKVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXRzIGFuIGV2ZW50IGJ5IGNhbGxpbmcgaXRzIGxpc3RlbmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZ0IEV2ZW50IG5hbWVcclxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50c1xyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldnQpIHtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdLFxyXG4gICAgICAgICAgICBpID0gMTtcclxuICAgICAgICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpKytdLmN0eCwgYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJFdmVudEVtaXR0ZXIiLCJfbGlzdGVuZXJzIiwicHJvdG90eXBlIiwib24iLCJldnQiLCJmbiIsImN0eCIsInB1c2giLCJvZmYiLCJ1bmRlZmluZWQiLCJsaXN0ZW5lcnMiLCJpIiwibGVuZ3RoIiwic3BsaWNlIiwiZW1pdCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/eventemitter/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/fetch/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/fetch/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = fetch;\nvar asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(ssr)/./node_modules/@protobufjs/aspromise/index.js\"),\n  inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(ssr)/./node_modules/@protobufjs/inquire/index.js\");\nvar fs = inquire(\"fs\");\n\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nfunction fetch(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) options = {};\n  if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\n\n  // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\n  if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\n    return err && typeof XMLHttpRequest !== \"undefined\" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\n  });\n\n  // use the XHR version otherwise.\n  return fetch.xhr(filename, options, callback);\n}\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\n\n/**/\nfetch.xhr = function fetch_xhr(filename, options, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\n    if (xhr.readyState !== 4) return undefined;\n\n    // local cors security errors return status 0 / empty string, too. afaik this cannot be\n    // reliably distinguished from an actually empty file for security reasons. feel free\n    // to send a pull request if you are aware of a solution.\n    if (xhr.status !== 0 && xhr.status !== 200) return callback(Error(\"status \" + xhr.status));\n\n    // if binary data is expected, make sure that some sort of array is returned, even if\n    // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\n    if (options.binary) {\n      var buffer = xhr.response;\n      if (!buffer) {\n        buffer = [];\n        for (var i = 0; i < xhr.responseText.length; ++i) buffer.push(xhr.responseText.charCodeAt(i) & 255);\n      }\n      return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\n    }\n    return callback(null, xhr.responseText);\n  };\n  if (options.binary) {\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\n    if (\"overrideMimeType\" in xhr) xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    xhr.responseType = \"arraybuffer\";\n  }\n  xhr.open(\"GET\", filename);\n  xhr.send();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/fetch/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = factory(factory);\n\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n// Factory function for the purpose of node-based testing in modified global environments\nfunction factory(exports) {\n  // float: typed array\n  if (typeof Float32Array !== \"undefined\") (function () {\n    var f32 = new Float32Array([-0]),\n      f8b = new Uint8Array(f32.buffer),\n      le = f8b[3] === 128;\n    function writeFloat_f32_cpy(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n    }\n    function writeFloat_f32_rev(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[3];\n      buf[pos + 1] = f8b[2];\n      buf[pos + 2] = f8b[1];\n      buf[pos + 3] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n    function readFloat_f32_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      return f32[0];\n    }\n    function readFloat_f32_rev(buf, pos) {\n      f8b[3] = buf[pos];\n      f8b[2] = buf[pos + 1];\n      f8b[1] = buf[pos + 2];\n      f8b[0] = buf[pos + 3];\n      return f32[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n    // float: ieee754\n  })();else (function () {\n    function writeFloat_ieee754(writeUint, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n        // +-Infinity\n        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n        // denormal\n        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n        var exponent = Math.floor(Math.log(val) / Math.LN2),\n          mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n      }\n    }\n    exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n    exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n    function readFloat_ieee754(readUint, buf, pos) {\n      var uint = readUint(buf, pos),\n        sign = (uint >> 31) * 2 + 1,\n        exponent = uint >>> 23 & 255,\n        mantissa = uint & 8388607;\n      return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n    }\n    exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n    exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n  })();\n\n  // double: typed array\n  if (typeof Float64Array !== \"undefined\") (function () {\n    var f64 = new Float64Array([-0]),\n      f8b = new Uint8Array(f64.buffer),\n      le = f8b[7] === 128;\n    function writeDouble_f64_cpy(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n      buf[pos + 4] = f8b[4];\n      buf[pos + 5] = f8b[5];\n      buf[pos + 6] = f8b[6];\n      buf[pos + 7] = f8b[7];\n    }\n    function writeDouble_f64_rev(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[7];\n      buf[pos + 1] = f8b[6];\n      buf[pos + 2] = f8b[5];\n      buf[pos + 3] = f8b[4];\n      buf[pos + 4] = f8b[3];\n      buf[pos + 5] = f8b[2];\n      buf[pos + 6] = f8b[1];\n      buf[pos + 7] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n    function readDouble_f64_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      f8b[4] = buf[pos + 4];\n      f8b[5] = buf[pos + 5];\n      f8b[6] = buf[pos + 6];\n      f8b[7] = buf[pos + 7];\n      return f64[0];\n    }\n    function readDouble_f64_rev(buf, pos) {\n      f8b[7] = buf[pos];\n      f8b[6] = buf[pos + 1];\n      f8b[5] = buf[pos + 2];\n      f8b[4] = buf[pos + 3];\n      f8b[3] = buf[pos + 4];\n      f8b[2] = buf[pos + 5];\n      f8b[1] = buf[pos + 6];\n      f8b[0] = buf[pos + 7];\n      return f64[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n    // double: ieee754\n  })();else (function () {\n    function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) {\n        writeUint(0, buf, pos + off0);\n        writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n      } else if (isNaN(val)) {\n        writeUint(0, buf, pos + off0);\n        writeUint(2146959360, buf, pos + off1);\n      } else if (val > 1.7976931348623157e+308) {\n        // +-Infinity\n        writeUint(0, buf, pos + off0);\n        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n      } else {\n        var mantissa;\n        if (val < 2.2250738585072014e-308) {\n          // denormal\n          mantissa = val / 5e-324;\n          writeUint(mantissa >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n        } else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2);\n          if (exponent === 1024) exponent = 1023;\n          mantissa = val * Math.pow(2, -exponent);\n          writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n        }\n      }\n    }\n    exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n    exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n    function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n      var lo = readUint(buf, pos + off0),\n        hi = readUint(buf, pos + off1);\n      var sign = (hi >> 31) * 2 + 1,\n        exponent = hi >>> 20 & 2047,\n        mantissa = 4294967296 * (hi & 1048575) + lo;\n      return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n    }\n    exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n    exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n  })();\n  return exports;\n}\n\n// uint helpers\n\nfunction writeUintLE(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\nfunction writeUintBE(val, buf, pos) {\n  buf[pos] = val >>> 24;\n  buf[pos + 1] = val >>> 16 & 255;\n  buf[pos + 2] = val >>> 8 & 255;\n  buf[pos + 3] = val & 255;\n}\nfunction readUintLE(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\nfunction readUintBE(buf, pos) {\n  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/float/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = inquire;\n\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\nfunction inquire(moduleName) {\n  try {\n    var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n    if (mod && (mod.length || Object.keys(mod).length)) return mod;\n  } catch (e) {} // eslint-disable-line no-empty\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLE9BQU9BLENBQUNDLFVBQVUsRUFBRTtFQUN6QixJQUFJO0lBQ0EsSUFBSUMsR0FBRyxHQUFHQyxJQUFJLENBQUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUNILFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsSUFBSUMsR0FBRyxLQUFLQSxHQUFHLENBQUNHLE1BQU0sSUFBSUMsTUFBTSxDQUFDQyxJQUFJLENBQUNMLEdBQUcsQ0FBQyxDQUFDRyxNQUFNLENBQUMsRUFDOUMsT0FBT0gsR0FBRztFQUNsQixDQUFDLENBQUMsT0FBT00sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2YsT0FBTyxJQUFJO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2lucXVpcmUvaW5kZXguanM/NDdiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBpbnF1aXJlO1xyXG5cclxuLyoqXHJcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIG9ubHkgaWYgYXZhaWxhYmxlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBNb2R1bGUgdG8gcmVxdWlyZVxyXG4gKiBAcmV0dXJucyB7P09iamVjdH0gUmVxdWlyZWQgbW9kdWxlIGlmIGF2YWlsYWJsZSBhbmQgbm90IGVtcHR5LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnF1aXJlKG1vZHVsZU5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIG1vZCA9IGV2YWwoXCJxdWlyZVwiLnJlcGxhY2UoL14vLFwicmVcIikpKG1vZHVsZU5hbWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcclxuICAgICAgICBpZiAobW9kICYmIChtb2QubGVuZ3RoIHx8IE9iamVjdC5rZXlzKG1vZCkubGVuZ3RoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaW5xdWlyZSIsIm1vZHVsZU5hbWUiLCJtb2QiLCJldmFsIiwicmVwbGFjZSIsImxlbmd0aCIsIk9iamVjdCIsImtleXMiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/inquire/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/path/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/path/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\nvar path = exports;\nvar isAbsolute =\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\npath.isAbsolute = function isAbsolute(path) {\n  return /^(?:\\/|\\w+:)/.test(path);\n};\nvar normalize =\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\npath.normalize = function normalize(path) {\n  path = path.replace(/\\\\/g, \"/\").replace(/\\/{2,}/g, \"/\");\n  var parts = path.split(\"/\"),\n    absolute = isAbsolute(path),\n    prefix = \"\";\n  if (absolute) prefix = parts.shift() + \"/\";\n  for (var i = 0; i < parts.length;) {\n    if (parts[i] === \"..\") {\n      if (i > 0 && parts[i - 1] !== \"..\") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;\n    } else if (parts[i] === \".\") parts.splice(i, 1);else ++i;\n  }\n  return prefix + parts.join(\"/\");\n};\n\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\n  if (!alreadyNormalized) includePath = normalize(includePath);\n  if (isAbsolute(includePath)) return includePath;\n  if (!alreadyNormalized) originPath = normalize(originPath);\n  return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcGF0aC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsSUFBSSxHQUFHQyxPQUFPO0FBRWxCLElBQUlDLFVBQVU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FGLElBQUksQ0FBQ0UsVUFBVSxHQUFHLFNBQVNBLFVBQVVBLENBQUNGLElBQUksRUFBRTtFQUN4QyxPQUFPLGNBQWMsQ0FBQ0csSUFBSSxDQUFDSCxJQUFJLENBQUM7QUFDcEMsQ0FBQztBQUVELElBQUlJLFNBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FKLElBQUksQ0FBQ0ksU0FBUyxHQUFHLFNBQVNBLFNBQVNBLENBQUNKLElBQUksRUFBRTtFQUN0Q0EsSUFBSSxHQUFHQSxJQUFJLENBQUNLLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQ25CQSxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQztFQUNuQyxJQUFJQyxLQUFLLEdBQU1OLElBQUksQ0FBQ08sS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUMxQkMsUUFBUSxHQUFHTixVQUFVLENBQUNGLElBQUksQ0FBQztJQUMzQlMsTUFBTSxHQUFLLEVBQUU7RUFDakIsSUFBSUQsUUFBUSxFQUNSQyxNQUFNLEdBQUdILEtBQUssQ0FBQ0ksS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHO0VBQ2hDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTCxLQUFLLENBQUNNLE1BQU0sR0FBRztJQUMvQixJQUFJTixLQUFLLENBQUNLLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtNQUNuQixJQUFJQSxDQUFDLEdBQUcsQ0FBQyxJQUFJTCxLQUFLLENBQUNLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQzlCTCxLQUFLLENBQUNPLE1BQU0sQ0FBQyxFQUFFRixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FDcEIsSUFBSUgsUUFBUSxFQUNiRixLQUFLLENBQUNPLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRW5CLEVBQUVBLENBQUM7SUFDWCxDQUFDLE1BQU0sSUFBSUwsS0FBSyxDQUFDSyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQ3ZCTCxLQUFLLENBQUNPLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRW5CLEVBQUVBLENBQUM7RUFDWDtFQUNBLE9BQU9GLE1BQU0sR0FBR0gsS0FBSyxDQUFDUSxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ25DLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWQsSUFBSSxDQUFDZSxPQUFPLEdBQUcsU0FBU0EsT0FBT0EsQ0FBQ0MsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLGlCQUFpQixFQUFFO0VBQ3hFLElBQUksQ0FBQ0EsaUJBQWlCLEVBQ2xCRCxXQUFXLEdBQUdiLFNBQVMsQ0FBQ2EsV0FBVyxDQUFDO0VBQ3hDLElBQUlmLFVBQVUsQ0FBQ2UsV0FBVyxDQUFDLEVBQ3ZCLE9BQU9BLFdBQVc7RUFDdEIsSUFBSSxDQUFDQyxpQkFBaUIsRUFDbEJGLFVBQVUsR0FBR1osU0FBUyxDQUFDWSxVQUFVLENBQUM7RUFDdEMsT0FBTyxDQUFDQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ1gsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxFQUFFTyxNQUFNLEdBQUdSLFNBQVMsQ0FBQ1ksVUFBVSxHQUFHLEdBQUcsR0FBR0MsV0FBVyxDQUFDLEdBQUdBLFdBQVc7QUFDbkksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRiYWJlLW5leHRqcy1taWdyYXRpb24vLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcGF0aC9pbmRleC5qcz8wOWVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgbWluaW1hbCBwYXRoIG1vZHVsZSB0byByZXNvbHZlIFVuaXgsIFdpbmRvd3MgYW5kIFVSTCBwYXRocyBhbGlrZS5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHBhdGggPSBleHBvcnRzO1xyXG5cclxudmFyIGlzQWJzb2x1dGUgPVxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBwYXRoIGlzIGFic29sdXRlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBwYXRoIGlzIGFic29sdXRlXHJcbiAqL1xyXG5wYXRoLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGgpIHtcclxuICAgIHJldHVybiAvXig/OlxcL3xcXHcrOikvLnRlc3QocGF0aCk7XHJcbn07XHJcblxyXG52YXIgbm9ybWFsaXplID1cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgdGhlIHNwZWNpZmllZCBwYXRoLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOb3JtYWxpemVkIHBhdGhcclxuICovXHJcbnBhdGgubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcclxuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC97Mix9L2csIFwiL1wiKTtcclxuICAgIHZhciBwYXJ0cyAgICA9IHBhdGguc3BsaXQoXCIvXCIpLFxyXG4gICAgICAgIGFic29sdXRlID0gaXNBYnNvbHV0ZShwYXRoKSxcclxuICAgICAgICBwcmVmaXggICA9IFwiXCI7XHJcbiAgICBpZiAoYWJzb2x1dGUpXHJcbiAgICAgICAgcHJlZml4ID0gcGFydHMuc2hpZnQoKSArIFwiL1wiO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7KSB7XHJcbiAgICAgICAgaWYgKHBhcnRzW2ldID09PSBcIi4uXCIpIHtcclxuICAgICAgICAgICAgaWYgKGkgPiAwICYmIHBhcnRzW2kgLSAxXSAhPT0gXCIuLlwiKVxyXG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKC0taSwgMik7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFic29sdXRlKVxyXG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gXCIuXCIpXHJcbiAgICAgICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICsraTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcmVmaXggKyBwYXJ0cy5qb2luKFwiL1wiKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlcyB0aGUgc3BlY2lmaWVkIGluY2x1ZGUgcGF0aCBhZ2FpbnN0IHRoZSBzcGVjaWZpZWQgb3JpZ2luIHBhdGguXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5QYXRoIFBhdGggdG8gdGhlIG9yaWdpbiBmaWxlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbmNsdWRlUGF0aCBJbmNsdWRlIHBhdGggcmVsYXRpdmUgdG8gb3JpZ2luIHBhdGhcclxuICogQHBhcmFtIHtib29sZWFufSBbYWxyZWFkeU5vcm1hbGl6ZWQ9ZmFsc2VdIGB0cnVlYCBpZiBib3RoIHBhdGhzIGFyZSBhbHJlYWR5IGtub3duIHRvIGJlIG5vcm1hbGl6ZWRcclxuICogQHJldHVybnMge3N0cmluZ30gUGF0aCB0byB0aGUgaW5jbHVkZSBmaWxlXHJcbiAqL1xyXG5wYXRoLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKG9yaWdpblBhdGgsIGluY2x1ZGVQYXRoLCBhbHJlYWR5Tm9ybWFsaXplZCkge1xyXG4gICAgaWYgKCFhbHJlYWR5Tm9ybWFsaXplZClcclxuICAgICAgICBpbmNsdWRlUGF0aCA9IG5vcm1hbGl6ZShpbmNsdWRlUGF0aCk7XHJcbiAgICBpZiAoaXNBYnNvbHV0ZShpbmNsdWRlUGF0aCkpXHJcbiAgICAgICAgcmV0dXJuIGluY2x1ZGVQYXRoO1xyXG4gICAgaWYgKCFhbHJlYWR5Tm9ybWFsaXplZClcclxuICAgICAgICBvcmlnaW5QYXRoID0gbm9ybWFsaXplKG9yaWdpblBhdGgpO1xyXG4gICAgcmV0dXJuIChvcmlnaW5QYXRoID0gb3JpZ2luUGF0aC5yZXBsYWNlKC8oPzpcXC98XilbXi9dKyQvLCBcIlwiKSkubGVuZ3RoID8gbm9ybWFsaXplKG9yaWdpblBhdGggKyBcIi9cIiArIGluY2x1ZGVQYXRoKSA6IGluY2x1ZGVQYXRoO1xyXG59O1xyXG4iXSwibmFtZXMiOlsicGF0aCIsImV4cG9ydHMiLCJpc0Fic29sdXRlIiwidGVzdCIsIm5vcm1hbGl6ZSIsInJlcGxhY2UiLCJwYXJ0cyIsInNwbGl0IiwiYWJzb2x1dGUiLCJwcmVmaXgiLCJzaGlmdCIsImkiLCJsZW5ndGgiLCJzcGxpY2UiLCJqb2luIiwicmVzb2x2ZSIsIm9yaWdpblBhdGgiLCJpbmNsdWRlUGF0aCIsImFscmVhZHlOb3JtYWxpemVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/path/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pool;\n\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\nfunction pool(alloc, slice, size) {\n  var SIZE = size || 8192;\n  var MAX = SIZE >>> 1;\n  var slab = null;\n  var offset = SIZE;\n  return function pool_alloc(size) {\n    if (size < 1 || size > MAX) return alloc(size);\n    if (offset + size > SIZE) {\n      slab = alloc(SIZE);\n      offset = 0;\n    }\n    var buf = slice.call(slab, offset, offset += size);\n    if (offset & 7)\n      // align to 32 bit\n      offset = (offset | 7) + 1;\n    return buf;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcG9vbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxJQUFJQSxDQUFDQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFO0VBQzlCLElBQUlDLElBQUksR0FBS0QsSUFBSSxJQUFJLElBQUk7RUFDekIsSUFBSUUsR0FBRyxHQUFNRCxJQUFJLEtBQUssQ0FBQztFQUN2QixJQUFJRSxJQUFJLEdBQUssSUFBSTtFQUNqQixJQUFJQyxNQUFNLEdBQUdILElBQUk7RUFDakIsT0FBTyxTQUFTSSxVQUFVQSxDQUFDTCxJQUFJLEVBQUU7SUFDN0IsSUFBSUEsSUFBSSxHQUFHLENBQUMsSUFBSUEsSUFBSSxHQUFHRSxHQUFHLEVBQ3RCLE9BQU9KLEtBQUssQ0FBQ0UsSUFBSSxDQUFDO0lBQ3RCLElBQUlJLE1BQU0sR0FBR0osSUFBSSxHQUFHQyxJQUFJLEVBQUU7TUFDdEJFLElBQUksR0FBR0wsS0FBSyxDQUFDRyxJQUFJLENBQUM7TUFDbEJHLE1BQU0sR0FBRyxDQUFDO0lBQ2Q7SUFDQSxJQUFJRSxHQUFHLEdBQUdQLEtBQUssQ0FBQ1EsSUFBSSxDQUFDSixJQUFJLEVBQUVDLE1BQU0sRUFBRUEsTUFBTSxJQUFJSixJQUFJLENBQUM7SUFDbEQsSUFBSUksTUFBTSxHQUFHLENBQUM7TUFBRTtNQUNaQSxNQUFNLEdBQUcsQ0FBQ0EsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQzdCLE9BQU9FLEdBQUc7RUFDZCxDQUFDO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW50YmFiZS1uZXh0anMtbWlncmF0aW9uLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL3Bvb2wvaW5kZXguanM/MGZhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBwb29sO1xyXG5cclxuLyoqXHJcbiAqIEFuIGFsbG9jYXRvciBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLnBvb2x9LlxyXG4gKiBAdHlwZWRlZiBQb29sQWxsb2NhdG9yXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IEJ1ZmZlclxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIHNsaWNlciBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLnBvb2x9LlxyXG4gKiBAdHlwZWRlZiBQb29sU2xpY2VyXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFN0YXJ0IG9mZnNldFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIEVuZCBvZmZzZXRcclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IEJ1ZmZlciBzbGljZVxyXG4gKiBAdGhpcyB7VWludDhBcnJheX1cclxuICovXHJcblxyXG4vKipcclxuICogQSBnZW5lcmFsIHB1cnBvc2UgYnVmZmVyIHBvb2wuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1Bvb2xBbGxvY2F0b3J9IGFsbG9jIEFsbG9jYXRvclxyXG4gKiBAcGFyYW0ge1Bvb2xTbGljZXJ9IHNsaWNlIFNsaWNlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3NpemU9ODE5Ml0gU2xhYiBzaXplXHJcbiAqIEByZXR1cm5zIHtQb29sQWxsb2NhdG9yfSBQb29sZWQgYWxsb2NhdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBwb29sKGFsbG9jLCBzbGljZSwgc2l6ZSkge1xyXG4gICAgdmFyIFNJWkUgICA9IHNpemUgfHwgODE5MjtcclxuICAgIHZhciBNQVggICAgPSBTSVpFID4+PiAxO1xyXG4gICAgdmFyIHNsYWIgICA9IG51bGw7XHJcbiAgICB2YXIgb2Zmc2V0ID0gU0laRTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBwb29sX2FsbG9jKHNpemUpIHtcclxuICAgICAgICBpZiAoc2l6ZSA8IDEgfHwgc2l6ZSA+IE1BWClcclxuICAgICAgICAgICAgcmV0dXJuIGFsbG9jKHNpemUpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgKyBzaXplID4gU0laRSkge1xyXG4gICAgICAgICAgICBzbGFiID0gYWxsb2MoU0laRSk7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBidWYgPSBzbGljZS5jYWxsKHNsYWIsIG9mZnNldCwgb2Zmc2V0ICs9IHNpemUpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgJiA3KSAvLyBhbGlnbiB0byAzMiBiaXRcclxuICAgICAgICAgICAgb2Zmc2V0ID0gKG9mZnNldCB8IDcpICsgMTtcclxuICAgICAgICByZXR1cm4gYnVmO1xyXG4gICAgfTtcclxufVxyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBvb2wiLCJhbGxvYyIsInNsaWNlIiwic2l6ZSIsIlNJWkUiLCJNQVgiLCJzbGFiIiwib2Zmc2V0IiwicG9vbF9hbGxvYyIsImJ1ZiIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/pool/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\nvar utf8 = exports;\n\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\nutf8.length = function utf8_length(string) {\n  var len = 0,\n    c = 0;\n  for (var i = 0; i < string.length; ++i) {\n    c = string.charCodeAt(i);\n    if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n      ++i;\n      len += 4;\n    } else len += 3;\n  }\n  return len;\n};\n\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\nutf8.read = function utf8_read(buffer, start, end) {\n  var len = end - start;\n  if (len < 1) return \"\";\n  var parts = null,\n    chunk = [],\n    i = 0,\n    // char offset\n    t; // temporary\n  while (start < end) {\n    t = buffer[start++];\n    if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n      t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n      chunk[i++] = 0xD800 + (t >> 10);\n      chunk[i++] = 0xDC00 + (t & 1023);\n    } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (parts) {\n    if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\n\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\nutf8.write = function utf8_write(string, buffer, offset) {\n  var start = offset,\n    c1,\n    // character 1\n    c2; // character 2\n  for (var i = 0; i < string.length; ++i) {\n    c1 = string.charCodeAt(i);\n    if (c1 < 128) {\n      buffer[offset++] = c1;\n    } else if (c1 < 2048) {\n      buffer[offset++] = c1 >> 6 | 192;\n      buffer[offset++] = c1 & 63 | 128;\n    } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n      c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n      ++i;\n      buffer[offset++] = c1 >> 18 | 240;\n      buffer[offset++] = c1 >> 12 & 63 | 128;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    } else {\n      buffer[offset++] = c1 >> 12 | 224;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    }\n  }\n  return offset - start;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/utf8/index.js\n");

/***/ })

};
;